<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>稗田 阿柔</title>
  
  <subtitle>Sanctuary of Hiedano Ajuu</subtitle>
  <link href="https://hiedanoajuu.github.io/atom.xml" rel="self"/>
  
  <link href="https://hiedanoajuu.github.io/"/>
  <updated>2025-07-29T09:12:54.235Z</updated>
  <id>https://hiedanoajuu.github.io/</id>
  
  <author>
    <name>稗田 阿柔</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello, World!</title>
    <link href="https://hiedanoajuu.github.io/2025/07/30/hello/"/>
    <id>https://hiedanoajuu.github.io/2025/07/30/hello/</id>
    <published>2025-07-29T16:15:50.000Z</published>
    <updated>2025-07-29T09:12:54.235Z</updated>
    
    <content type="html"><![CDATA[<p>Hello, World!</p>]]></content>
    
    
    <summary type="html">Hello, World!</summary>
    
    
    
    <category term="Misc." scheme="https://hiedanoajuu.github.io/categories/Misc/"/>
    
    
  </entry>
  
  <entry>
    <title>埃及法老名表及年代表</title>
    <link href="https://hiedanoajuu.github.io/2025/07/21/chronology-ancient-egypt/"/>
    <id>https://hiedanoajuu.github.io/2025/07/21/chronology-ancient-egypt/</id>
    <published>2025-07-21T08:48:48.000Z</published>
    <updated>2025-08-06T11:14:05.505Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前王朝晚期"><a href="#前王朝晚期" class="headerlink" title="前王朝晚期"></a>前王朝晚期</h1><p>第 0 王朝（涅伽达末期）：3250-3050<br>约9-13位来自上埃及的希拉孔波利斯国王在位统治。最后四位的名字能够辨识（尽管并不清晰）：</p><div class="table-container"><table><thead><tr><th>….</th><th></th></tr></thead><tbody><tr><td>荷鲁斯·“蝎”<sup><a href="#fn_1" id="reffn_1">1</a></sup>（Horus “Scorpion”）</td><td></td></tr><tr><td>荷鲁斯·泽赫恩<sup><a href="#fn_2" id="reffn_2">2</a></sup>？/卡？（Horus Zekhen?/Ka?）</td><td>第一位埋葬在阿拜多斯（Abydos）的国王</td></tr><tr><td>荷鲁斯·罗<sup><a href="#fn_3" id="reffn_3">3</a></sup>（Horus Ro）</td><td>阿拜多斯（Abydos）王墓B 1+2</td></tr><tr><td>荷鲁斯·那尔迈<sup><a href="#fn_4" id="reffn_4">4</a></sup>（Horus Narmer）</td><td>“鲶鱼”</td></tr></tbody></table></div><h1 id="古风时期"><a href="#古风时期" class="headerlink" title="古风时期"></a>古风时期</h1><p><strong>（亦称 早王朝）</strong></p><p>第 I 王朝：3050-2857</p><div class="table-container"><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>荷鲁斯·阿哈（Horus Aha）</td><td>美尼（Meni）</td><td>3050-3016</td></tr><tr><td>荷鲁斯·杰尔（Horus Djer）</td><td>伊提（Iti）</td><td>3016-2970</td></tr><tr><td>荷鲁斯·瓦吉（Horus Wadji）</td><td>伊特尔提？（Iterti?）</td><td>2970-2963</td></tr><tr><td>荷鲁斯·登（Horus Dewen）</td><td>哈塞提/杰姆提？（Khasti/Zemti?）</td><td>2963-2949</td></tr><tr><td>荷鲁斯·阿涅吉布（Horus Anedjib）</td><td>美尔皮比亚？（Merpibia?）</td><td>2949-2897</td></tr><tr><td>荷鲁斯·塞默赫特（Horus Semerkhet）</td><td>伊里-涅布提（Iri-Nebti）</td><td>2897-2889</td></tr><tr><td>荷鲁斯·卡阿（Horus Qa’a）</td><td>卡阿-涅布提（Qa’a Nebti）</td><td>2889-2859</td></tr><tr><td>荷鲁斯·巴？（Horus Ba?）</td><td>（顺序未定）</td><td></td></tr><tr><td>荷鲁斯·塞涅弗尔卡（Horus Seneferka）</td><td>（顺序未定）</td><td>2859-2857</td></tr><tr><td>荷鲁斯…（Horus […]）</td><td>（顺序未定）</td></tr></tbody></table></div><p>第 II 王朝：2857-2705</p><div class="table-container"><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>荷鲁斯·赫特普塞赫姆威（Horus Hetepsekhemwy）</td><td>赫特普-涅布提（Hetep-Nebty）</td><td>2857-</td></tr><tr><td>荷鲁斯·涅布拉（Horus Nebre）</td><td></td><td>-2815</td></tr><tr><td>荷鲁斯·尼涅杰尔（Horus Ninetjer）</td><td>尼涅杰尔-涅布提（    Ninetjer-Nebty）</td><td>2815    -2778</td></tr><tr><td>荷鲁斯·乌涅格？（Horus Weneg?）</td><td>乌涅格-涅布提（Weneg-Nebty）</td><td>2778-2772</td></tr><tr><td>塞涅德（Sened）</td><td></td><td>2772-</td></tr><tr><td>努布涅弗尔（Nubnefer）</td><td></td><td>-2751</td></tr><tr><td>塞特·佩尔伊布森（Seth Peribsen）</td><td></td><td>2751-2743</td></tr><tr><td>荷鲁斯·塞赫姆伊布（-佩伦玛阿特）（Horus Sekhemib(-perenma’at)）</td><td></td><td>2743-2732</td></tr><tr><td>荷鲁斯·哈塞赫姆（Horus Khasekhem）</td><td>（与下一位国王为同一人）</td><td></td></tr><tr><td></td><td>荷鲁斯-塞特·哈塞赫姆威（-赫特普-涅杰尔威伊美夫）（Horus-Seth Khasekhemwy(-hetep-netjerwyimef)）</td><td>2732-2705</td></tr></tbody></table></div><h1 id="古王国"><a href="#古王国" class="headerlink" title="古王国"></a>古王国</h1><p>第 III 王朝：2705-2630</p><div class="table-container"><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>荷鲁斯·涅赫特扎（扎）（Horus Nekhtza(Za)）</td><td>涅布卡一世（Nebka I）</td><td>2705-2687</td></tr><tr><td>荷鲁斯·涅杰里赫特（Horus Netjerikhet）</td><td>（左塞尔）（Djoser）</td><td>2687-2667</td></tr><tr><td>荷鲁斯·塞赫姆赫特（Horus Sekhemkhet）</td><td>（左塞尔-特提）（Djoser-Teti）</td><td>2667-2660</td></tr><tr><td>荷鲁斯·哈巴（Horus Khaba）</td><td></td><td>2660-2654</td></tr><tr><td>荷鲁斯·卡赫杰特（Horus Qahedjet）</td><td>胡尼（Huni）</td><td>2654-2630</td></tr></tbody></table></div><p>第 IV 王朝：2630-2524</p><div class="table-container"><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>斯涅弗鲁（Snefru）</td><td></td><td>2630-2606</td></tr><tr><td>（赫努姆-）胡夫伊（(Khnum-)Khufwi）</td><td>（胡夫/“齐奥普斯”）（Khufu/“Cheops”）</td><td>2606-2583</td></tr><tr><td>拉杰德夫（Radjedef）</td><td>杰德夫拉（Djedefre）</td><td>2583-2575</td></tr><tr><td>哈夫拉（Khafre）</td><td>（“凯夫伦”）（”Chephren”）</td><td>2575-2550</td></tr><tr><td>涅布卡二世（Nebka II）</td><td></td><td>2550-2548</td></tr><tr><td>蒙卡乌拉（Menkaure）</td><td>（“米凯里努斯”）（”Mycerinus”）</td><td>2548-2530</td></tr><tr><td>舍普塞斯卡夫（Shepseskaf）</td><td></td><td>2530-2526</td></tr><tr><td>[空位期？]</td><td></td><td>2526-2524</td></tr></tbody></table></div><p>第 V 王朝：2524-2400</p><div class="table-container"><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>乌塞尔卡夫（Userkaf）</td><td></td><td>2524-2517</td></tr><tr><td>萨胡拉（Sahure）</td><td></td><td>2517-2505</td></tr><tr><td>涅斐里尔卡拉一世·卡凯（Neferirkare I Kakai）</td><td></td><td>2505-2495</td></tr><tr><td>舍普塞斯卡拉·伊齐？（Shepseskare Izi?）</td><td></td><td>2495-2488</td></tr><tr><td>涅斐拉夫拉（Neferefre）</td><td>（拉涅斐拉夫？）（Raneferef?）</td><td>2488- 2477</td></tr><tr><td>尼乌塞尔拉·伊尼（Niuserre Ini）</td><td></td><td>2477-2466</td></tr><tr><td>蒙卡乌荷尔·伊卡乌荷尔（Menkauhor Ikauhor）</td><td></td><td>2466-2458</td></tr><tr><td>杰德卡拉·伊泽齐（Djedkare Izezi）</td><td></td><td>2458-2430</td></tr><tr><td>乌尼斯（Unis）</td><td></td><td>2430-2400</td></tr></tbody></table></div><p>第 VI 王朝：2400-2250</p><div class="table-container"><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>特提（Teti）</td><td></td><td>2400-2390</td></tr><tr><td>佩皮一世（Pepi I）</td><td></td><td>2390-</td></tr><tr><td>乌塞尔卡拉（Userkare）</td><td>（乌塞尔佩尔？）（Userper?）</td><td>-2382</td></tr><tr><td>佩皮一世（Pepi I）</td><td>（复辟！）</td><td>2382-2361</td></tr><tr><td>美尔涅拉一世·涅姆提耶姆扎夫（Mernere I Nemtyemzaf）</td><td></td><td>2361-2355</td></tr><tr><td>佩皮二世（Pepi II）</td><td></td><td>2355-2261</td></tr><tr><td>美尔涅拉二世·涅姆提耶姆扎夫（Mernere II Nemtyemzaf）</td><td></td><td>2261-2260</td></tr><tr><td>女王 尼托克里斯（Queen Nitocris）</td><td></td><td>2260-2250?</td></tr></tbody></table></div><p>第 VII 王朝：2250?-2230<br>阿拜多斯王名表中记录了十位国王，但在都灵王名表中被省略了（涅杰尔卡拉（Netjerkare）[阿拜多斯]=涅伊提克尔提（Neitiqerti）[都灵]）。同时期的资料上记载了这些王名：涅斐尔卡拉二世（Neferkare II）……塞赫姆卡拉（Sekhemkare）……瓦吉卡拉（统治顺序未定）。</p><p>第 VIII 王朝：2230-2213<br>六位国王，末四位从同时期的资料可知：</p><div class="table-container"><table><thead><tr><th>….</th><th></th><th></th></tr></thead><tbody><tr><td>卡卡拉·伊比（Qakare Ibi）</td><td></td><td>2222-2220</td></tr><tr><td>涅斐尔卡乌拉（Neferkaure）</td><td>（伊蒙荷特普？）（=Imhotep?）</td><td>2220-2216</td></tr><tr><td>涅斐尔卡乌荷尔·卡普伊比（Neferkauhor Kapuibi）</td><td>（伊提？）（=Iti?）</td><td>2216-2214</td></tr><tr><td>涅斐里尔卡拉二世（Neferirkare II）</td><td></td><td>2214-2213</td></tr></tbody></table></div><p>伊蒙荷特普（Imhotep）和伊提（Iti）（来自哈马马特干谷的涂鸦）两个个人名的归属并不确定。涅斐尔乌卡拉（Neferkaure）总的来说被认为与荷鲁斯·哈[巴乌？]（Horus Kha[bau?]）为同一人，涅斐里尔卡拉二世（Neferiekare II）与科普托斯法令上的荷鲁斯·德美吉布塔威（Horus Demedjibtawy）为同一人，但尚存疑。荷鲁斯·涅杰里巴乌（Horus Netjeribau）则确定与涅斐尔卡乌荷尔（Neferkauhor）为同一人。</p><h1 id="第一中间期"><a href="#第一中间期" class="headerlink" title="第一中间期"></a>第一中间期</h1><p>第 IX 王朝：2213-约2175<br>四位在赫拉克利奥波利斯执政的国王，在埃及范围内大概获得了认可。顺序并不清楚：</p><div class="table-container"><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>美里布拉·阿赫托伊（Meryibre Akhtoy）</td><td>（=第一或第二位国王？）</td><td>2213-</td></tr><tr><td>….</td><td></td><td></td></tr><tr><td>涅斐尔卡拉五世（Neferkare V）</td><td>（第三位国王）</td><td>约2185-</td></tr><tr><td>….</td><td></td><td>-2175</td></tr></tbody></table></div><p>第 X 王朝：约2175-约2035<br>十四位统治北方的赫拉克利奥波利斯国王，与同时期底比斯的第十一王朝国王交战，直到于2047年和2022年间败于涅布赫佩特拉·蒙图荷特普二世（Nebhepetre Mentuhotep II）。六位国王可以由同时期的资料证明：</p><div class="table-container"><table><thead><tr><th>….</th><th></th><th>约2175</th></tr></thead><tbody><tr><td>涅布卡乌拉·阿赫托伊（Nebkaure Akhtoy）</td><td>（美里卡拉的父亲？）</td><td></td></tr><tr><td>美里卡拉（Merikare）</td><td>与后文瓦罕赫·因约特夫（Wahankh Inyotef）同时期统治</td><td>约2075</td></tr></tbody></table></div><p>下列其他统治者的统治年代无法大致界定：</p><p>|  |  |<br>| 美里[…]拉·阿赫托伊（Meri[…]re Akhtoy）| （不是第十王朝的建立者“美里哈托尔”（Merihator））<br>| 瓦卡拉·阿赫托伊（Wahkare Akhtoy） |  |<br>| 胡伊（Khui） | （从德拉（Dara）得到的碎片） |<br>| 伊杰努（Iytjenu） | 萨卡拉（Saqqara）的第X王朝个人名之一 |</p><p>第 XI 王朝：2134-1991<br>在许多传统的年表中，底比斯的第XI王朝被归入中王国而非第一中间期。但是，近年来埃及学家们修正了这一观点。这一王朝存在了约143年，其中99年王国处于分裂与内战之中，只有44年王国处于相对和平统一的状态。重要的是，后44年是政权巩固和国家重建的时期，只有到第XII王朝开始这些工作才得以完成。认为第XI王朝是中王国的开始是不合理的。</p><div class="table-container"><table><thead><tr><th>荷鲁斯·特皮奥（Horus Tepi-‘o）</th><th>蒙图荷特普一世（Mentuhotep I）</th><th>2134-</th></tr></thead><tbody><tr><td>荷鲁斯·塞赫尔塔威（Horus Sehertawy）</td><td>因约特夫一世（Inyotef I）</td><td>-2118</td></tr><tr><td>荷鲁斯·瓦罕赫（Horus Wahankh）</td><td>因约特夫二世（Inyotef II）</td><td>2118-2069</td></tr><tr><td>荷鲁斯·涅赫特涅布特普涅斐尔（Horus Nekhtnebtepnefer）</td><td>因约特夫三世（Inyotef III）</td><td>2069-2061</td></tr><tr><td>荷鲁斯·珊希布塔威（Horus Sankhibtawy）</td><td></td><td></td></tr><tr><td>荷鲁斯·达伊哈苏特（Horus Daikhasut）<sup><a href="#fn_*" id="reffn_*">*</a></sup></td><td>与下两位个人名均为蒙图荷特普二世（Mentuhotep II）</td><td></td></tr><tr><td>荷鲁斯·涅布赫杰特（Horus Nebhedjet）<sup><a href="#fn_#" id="reffn_#">#</a></sup></td><td>与下一位王名均为涅布赫佩特拉（Nebhepetre）</td><td></td></tr><tr><td>荷鲁斯·塞马塔威（Horus Sematawy）<sup><a href="#fn_$" id="reffn_$">$</a></sup></td><td></td><td>2061-2010</td></tr><tr><td>珊赫卡拉（Sankhkare）</td><td>蒙图荷特普三世（Mentuhotep III）</td><td>2010-1998</td></tr><tr><td>卡卡拉·因约特夫四世（Qakare Inyotef IV）</td><td>（顺序未定）</td><td></td></tr><tr><td>伊布拉·亨特（Iyibre Khent）</td><td>（顺序未定）</td><td></td></tr><tr><td>涅布塔威拉（Nebtawyre）</td><td>蒙图荷特普四世（Mentuhotep IV）</td><td>-1991</td></tr></tbody></table></div><p><strong>拿片假名拼也怪累的好吗（流汗</strong></p><blockquote id="fn_1"><sup>1</sup>. 因为石碑上的符号是个蝎子，所以称为蝎王（Scorpion II），可能读塞尔克（Selk）或者韦哈（Weha）（注释均为译者所加，不保证对错，图片出自维基百科en.wikiepdia.org，下同）。<a href="#reffn_1" title="Jump back to footnote [1] in the text."> &#8617;</a></blockquote><p><img src="skorpion.svg" alt="蝎子" title="蝎子"></p><blockquote id="fn_2"><sup>2</sup>. 符号是两条上举的手臂，可能表示“力量”，过于抽象：<a href="#reffn_2" title="Jump back to footnote [2] in the text."> &#8617;</a></blockquote><p><img src="ka.png" alt="卡" title="卡"></p><blockquote id="fn_3"><sup>3</sup>. “罗”（Ro）是弗林德斯·皮特里（Flinders Petrie）爵士的读法，现代一般被读作“伊里-荷尔”（Iry-Hor），符号是一个鸟下面两个环，意思可能是“荷鲁斯之主”：<a href="#reffn_3" title="Jump back to footnote [3] in the text."> &#8617;</a></blockquote><p><img src="ro.svg" alt="罗" title="罗"></p><blockquote id="fn_4"><sup>4</sup>. “那尔迈”（Narmer）是根据铭文读出来的名字，意思可能是“凶狠的鲶鱼”，符号是一个鲶鱼下面一根制杖，见<a href="https://en.wikipedia.org/wiki/Narmer">https://en.wikipedia.org/wiki/Narmer</a> ；<a href="#reffn_4" title="Jump back to footnote [4] in the text."> &#8617;</a></blockquote><p><img src="narmer.svg" alt="那尔迈" title="那尔迈"></p><blockquote id="fn_*"><sup>*</sup>. Daikhasut大意为“征服者”，推测可能是蒙图荷特普二世在即位前使用的荷鲁斯名（译者猜测）。<a href="#reffn_*" title="Jump back to footnote [*] in the text."> &#8617;</a></blockquote><blockquote id="fn_#"><sup>#</sup>. Nebhedjet大意为“白王冠之主”，推测可能是蒙图荷特普二世即位上埃及统治者后使用的荷鲁斯名（译者猜测）。<a href="#reffn_#" title="Jump back to footnote [#] in the text."> &#8617;</a></blockquote><blockquote id="fn_$"><sup>$</sup>. Sematawy大意为“统一两土地（上下埃及）”，推测可能是蒙图荷特普二世统一埃及后使用的荷鲁斯名（译者猜测）。<a href="#reffn_$" title="Jump back to footnote [$] in the text."> &#8617;</a></blockquote>]]></content>
    
    
    <summary type="html">来自https://piccionep.people.charleston.edu/graphics/kinglist.html，原作者P.A.皮乔内</summary>
    
    
    
    <category term="zh-CN" scheme="https://hiedanoajuu.github.io/categories/zh-CN/"/>
    
    <category term="历史" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E5%8E%86%E5%8F%B2/"/>
    
    <category term="古代史" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E5%8E%86%E5%8F%B2/%E5%8F%A4%E4%BB%A3%E5%8F%B2/"/>
    
    <category term="埃及" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E5%8E%86%E5%8F%B2/%E5%8F%A4%E4%BB%A3%E5%8F%B2/%E5%9F%83%E5%8F%8A/"/>
    
    <category term="0 杂项" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E5%8E%86%E5%8F%B2/%E5%8F%A4%E4%BB%A3%E5%8F%B2/%E5%9F%83%E5%8F%8A/0-%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="渣翻" scheme="https://hiedanoajuu.github.io/tags/%E6%B8%A3%E7%BF%BB/"/>
    
    <category term="历史" scheme="https://hiedanoajuu.github.io/tags/%E5%8E%86%E5%8F%B2/"/>
    
    <category term="图表" scheme="https://hiedanoajuu.github.io/tags/%E5%9B%BE%E8%A1%A8/"/>
    
    <category term="埃及" scheme="https://hiedanoajuu.github.io/tags/%E5%9F%83%E5%8F%8A/"/>
    
  </entry>
  
  <entry>
    <title>曼涅托 埃及史(25-07-17)</title>
    <link href="https://hiedanoajuu.github.io/2025/07/17/manetho/"/>
    <id>https://hiedanoajuu.github.io/2025/07/17/manetho/</id>
    <published>2025-07-17T11:36:40.000Z</published>
    <updated>2025-07-30T05:26:04.038Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一卷"><a href="#第一卷" class="headerlink" title="第一卷"></a>第一卷</h1><h2 id="1-（来自亚美尼亚语版《尤西比乌斯编年史》）"><a href="#1-（来自亚美尼亚语版《尤西比乌斯编年史》）" class="headerlink" title="1 （来自亚美尼亚语版《尤西比乌斯编年史》）"></a>1 （来自亚美尼亚语版《尤西比乌斯编年史》）</h2><p>神王朝、半神朝与亡灵朝。<br>摘自曼涅托《埃及史》，他将他对埃及历史的记叙写成这三卷书。从神明、半神、亡灵，以及统治埃及的人王朝，直到波斯国王大流士（Darius）。</p><ol><li><p>埃及的第一个人（或者神）是赫菲斯托斯（Hephaestus）<sup><a href="#fn_1" id="reffn_1">1</a></sup>，在埃及人中也因发现火而闻名。他的儿子赫利俄斯（Helios）（太阳神）由索西斯（Sôsis）继承；然后依次是克洛诺斯（Cronos）、奥西里斯（Osiris）、奥西里斯的弟弟提丰（Typhon），最后是奥西里斯和伊西斯（Isis）的儿子奥鲁斯（Orus）。他们是埃及的第一批统治者。此后，王位由上一个人传给下一个人，这样的继承持续了13,900年而未有中断，直到比迪斯（比特斯）<sup><a href="#fn_2" id="reffn_2">2</a></sup>。然而，这里的“年”我认为是阴历年，也就是说，每年只有30天：如今我们所说的“月”以前被埃及人称作“年”。<sup><a href="#fn_3" id="reffn_3">3</a></sup></p></li><li><p>众神之后，半神统治了1255年，<sup><a href="#fn_4" id="reffn_4">4</a></sup>另一列国王又统治了1817年；之后又出了三十位孟斐斯的国王，<sup><a href="#fn_5" id="reffn_5">5</a></sup>他们统治了1790年。接下来又有十位国王，统治了350年。</p></li><li><p>亡灵与半神<sup><a href="#fn_6" id="reffn_6">6</a></sup>的统治又再延续了5813年。</p></li><li><p>[上述的五个王朝的]统治共计11,000年，<sup><a href="#fn_7" id="reffn_7">7</a></sup>然而这些都是阴历年，也就是月。但是，事实上埃及人所述的整个的统治——神王朝、半神朝和亡灵朝——据估算共包括24,900个阴历年，即2206<sup><a href="#fn_8" id="reffn_8">8</a></sup>个阳历年。</p></li><li><p>现在，如果你愿意将这些数字与希伯来人的年表进行比对，你会发现它们是完美和谐的。希伯来人称埃及为“梅斯特拉伊姆”<sup><a href="#fn_9" id="reffn_9">9</a></sup>；而且梅斯特拉伊姆诞生在大洪水后不久，因为，诺亚的儿子占（或者含），在他们的宗族以这样那样的方式分散时，生下了埃古普托斯（Aegyptus），也即梅斯特拉伊姆（Mestraïm），第一个着手在埃及定居的人。根据希伯来人的记述，从亚当到大洪水，总计2242年。</p></li><li><p>但是，由于埃及人根据他们历史悠久的王权宣称，在大洪水之前，还有一列神明、半神和亡灵，统治了埃及超过20,000年，显然，这年数如果当作月来算，和希伯来人记载的年数应该是一样的：也就是说，希伯来人记录的年数中所包含的月数应该等于埃及人记录的阴历年数，与从人类最初被创造直到梅斯特拉伊姆估算的总时长一致。梅斯特拉伊姆确是埃及族人的始祖；而埃及的第一个王朝应当是起源于他。</p></li><li><p>但是如果年数还是过多，我们必须假定可能同时有数位埃及国王进行统治；因为他们说这些统治者同时是底比斯、孟斐斯、塞易斯、埃塞俄比亚<sup><a href="#fn_*" id="reffn_*">*</a></sup>和其他地方的国王。此外，似乎有不同的国王统治着不同的地区，每个王朝的统治也只限于自己所在的诺姆：因此，其实不是国王一个接一个地继承王位，而是有数个国王同时在不同地区进行统治。<sup><a href="#fn_10" id="reffn_10">10</a></sup>因此就有了这较大的总年数。但是，让我们抛开这个问题，仔细研究一下埃及历史的年表。</p></li></ol><p>（续见7（b））</p><h2 id="2-（来自辛凯洛斯）"><a href="#2-（来自辛凯洛斯）" class="headerlink" title="2 （来自辛凯洛斯）"></a>2 （来自辛凯洛斯）</h2><p>此后<sup><a href="#fn_11" id="reffn_11">11</a></sup>，曼涅托还讲述了形成了三十个王朝的五个埃及部落，包括他所谓的神明、半神、亡灵和凡人。对于这些，尤西比乌斯，潘菲鲁斯之“子”，在他的《年代记》中这样描述道：“关于神明、半神、亡灵和凡人，埃及人有一长串愚蠢的神话。事实上，最古老的埃及国王宣称他们的年是由三十天组成的阴历年，而继承他们的半神则将三个月的长年命名为‘霍洛伊’。所以尤西比乌斯写信责备埃及人说话愚妄，是很有道理的；而且在我看来，帕诺多鲁斯<sup><a href="#fn_12" id="reffn_12">12</a></sup>在这里因为尤西比乌斯没有解释明白历史学家的意思而指责尤西比乌斯，是错误的，而帕诺多鲁斯自以为采用了一种较为新颖的方法成功地解释了这一点，具体如下：</p><p>“事实上，从亚当诞生直至以诺，也就是直到创世1282年，那时的日子不是按月与年来计数的；但创世1000年降临大地的埃格雷戈雷（或者“守望者”）<sup><a href="#fn_13" id="reffn_13">13</a></sup>同人类交谈，并告诉他们日月二曜的轨道由黄道十二宫划分，由360个部分组成。人们观察到月球的轨道离地球更近、更小、更明显，而因为它的周期是三十天，人们就决定将其算作一年；而太阳的轨道同样由黄道十二宫划分为相等的360个部分。于是，六个王朝的六代神明在人类中的统治以年进行计算，每一年由30天的月球周期组成。按阴历年总计11,985年，即969个阳历年。加上他们统治前的1058<sup><a href="#fn_14" id="reffn_14">14</a></sup>个阳历年，总计2027年。”类似地，在九个的两个王朝——这些王朝尽管从未存在，却被视为历史——帕诺多鲁斯试图将858个霍洛伊（即三个月）或者特罗波伊<sup><a href="#fn_#" id="reffn_#">#</a></sup>拼凑出214½年，加上前面的969年，他说，总计1183½年，这些，再加上从亚当时代到众神统治的1058年，到大洪水总计2242年。</p><p>由此，帕诺多鲁斯为反对神明和我们的神启经典而引用的埃及作品和它们实际上是一致的。他在此批评尤西比乌斯，却并未意识到自己的论点既无法证实也不合逻辑，反而自相矛盾且违背事实——毕竟……大洪水之前，巴比伦和迦勒底并未有君王统治，埃及在梅斯特里姆<sup><a href="#fn_$" id="reffn_$">$</a></sup>之前也并不存在，依我看来，在那之前那片土地甚至无人居住……</p><h2 id="3-（来自辛凯洛斯）"><a href="#3-（来自辛凯洛斯）" class="headerlink" title="3 （来自辛凯洛斯）"></a>3 （来自辛凯洛斯）</h2><p>埃及古代史</p><p>塞本尼托斯的曼涅托，埃及被诅咒的神庙的首席祭司，生活在贝罗索斯<sup><a href="#fn_%" id="reffn_%">%</a></sup>之后的托勒密“爱姐弟者”时代，他给这位托勒密写信，用和贝罗索斯一样的谎言，讲述了六个从未存在的王朝或者六个神明：他说统治了11,985年。第一个是神明赫菲斯托斯，当了9000年国王。现在我们的一些史学家将9000年按阴历的月份进行计算，将9000个阴历月所包含的天数除以每年的365天，发现总计是727¾年。他们自以为得到了一个惊人的结果，但我们更应该说，那只不过是他们试图对抗真相的可笑谎言罢了。</p><p>埃及第一王朝</p><ol><li>赫菲斯托斯（Hêphaestus），统治727¾年。</li><li>赫利俄斯（太阳神）（Hêlios），赫菲斯托斯之子，80⅙年。</li><li>阿伽忒戴蒙（Agathodaemôn），56 7/12年。</li><li>克洛诺斯（Cronos），40½年。</li><li>奥西里斯（Osiris）与伊西斯（Isis），35年。</li><li>提丰（Typhon），29年。<sup><a href="#fn_15" id="reffn_15">15</a></sup>半神朝：</li><li>奥鲁斯（Ôrus），25年。</li><li>阿瑞斯（Arês），23年。</li><li>阿努比斯（Anubis），17年。</li><li>赫拉克勒斯（Hêraclês），15年。</li><li>阿波罗（Apollô），25年。</li><li>阿蒙（Ammôn），30年。</li><li>提托厄斯（Tithoês），<sup><a href="#fn_16" id="reffn_16">16</a></sup>27年。</li><li>索苏斯（Sôsus），32年。</li><li>宙斯（Zeus），20年。<sup><a href="#fn_17" id="reffn_17">17</a></sup></li></ol><h2 id="4-（来自《巴尔巴鲁斯的拉丁文摘录》）"><a href="#4-（来自《巴尔巴鲁斯的拉丁文摘录》）" class="headerlink" title="4 （来自《巴尔巴鲁斯的拉丁文摘录》）"></a>4 （来自《巴尔巴鲁斯的拉丁文摘录》）</h2><p><sup><a href="#fn_18" id="reffn_18">18</a></sup><br>在埃及诞生了最早的王国，我们将按照曼涅托的记载，记录其诞生。首先，根据埃及人的记载，要推回到众神的统治。一些人说神明赫菲斯托斯（Hêphaestus）统治埃及680年；在他之后，索尔（Sol）[赫利俄斯，太阳神]，赫菲斯托斯之子，77年：接着，索西诺奥西里斯（Sosinosiris）[索西斯和奥西里斯]，320年：然后是统治者奥鲁斯（Orus），28年；在他之后是提丰（Typhon），45年。神明的统治总计1550年。<sup><a href="#fn_19" id="reffn_19">19</a></sup></p><p>接下来是半神的统治，如下，首先是阿努比斯（Anubes）<sup><a href="#fn_20" id="reffn_20">20</a></sup>，83年；他之后，阿缪西斯（Amusis），一些人说他是国王。关于他，文法学者阿庇翁<sup><a href="#fn_21" id="reffn_21">21</a></sup>，埃及历史的编纂者，解释道，他生活于阿尔戈斯的建立者，伊那科斯<sup><a href="#fn_22" id="reffn_22">22</a></sup>的时代，他统治了67年。<sup><a href="#fn_23" id="reffn_23">23</a></sup></p><p>I. 此后他[曼涅托]描述了亡灵朝的国王，也叫他们半神，……亡灵朝统治了2100年：他称他们“非常勇敢”（称他们为英雄）。<br>II. 米内乌斯（Mineus）与他的七个后代统治253年。<sup><a href="#fn_24" id="reffn_24">24</a></sup></p><p><strong>施工中，敬请期待。</strong></p><blockquote id="fn_1"><sup>1</sup>. 前王朝始于一群神明，包括“在孟斐斯被供奉的赫利奥波利斯大九柱神”(T·E·皮特，《剑桥古代史》I p250)(译者注:见1924年的第一版)。在汇总了1-3章后皮特补充道：“从历史的角度来说，这并不能得出什么结论。”关于埃及前王朝时期的传说，见迈耶《古代史》5,I.ii p102及后续。都灵纸草上诸神的顺序如下：(普塔)、拉、(舒)、盖布、奥西里斯、塞特(200年)、荷鲁斯(300年)、托特(3126年)、玛阿特、荷尔。见迈耶《埃及年代学》6并参考片段3(译者注:没找到这本书)。<a href="#reffn_1" title="Jump back to footnote [1] in the text."> &#8617;</a></blockquote><blockquote id="fn_2"><sup>2</sup>. 比迪斯(或比特斯)似乎是埃及语“国王”(bı͗ty)(来自“蜜蜂”bit)，下埃及国王的头衔：见巴勒莫石碑，并参见希罗多德，IV.155“利比亚人称他们的国王为‘巴托斯’”(P.E.纽贝里)。“bı͗ty”后期作为赫尔墨斯著作的翻译者或是解释者出现：见伊安布利库斯《神秘论》VIII.5(同斯科特《赫耳墨斯文集》IV p34)中先知“bı͗ty”[为国王阿蒙]翻译了一本书(《通往更高之道》，是一篇论文，关于关于达到与神结合的神秘的或是超自然的方法)，他在埃及塞易斯的一座神殿里发现了这本以象形文字雕刻着的著作。参见《伪曼涅托》附录。<a href="#reffn_2" title="Jump back to footnote [2] in the text."> &#8617;</a></blockquote><blockquote id="fn_3"><sup>3</sup>. 尚无证据表明埃及的一年曾经等于一个月：有短年(每年360天)和长年(见片段49)。<a href="#reffn_3" title="Jump back to footnote [3] in the text."> &#8617;</a></blockquote><blockquote id="fn_4"><sup>4</sup>. 见《巴尔巴鲁斯的拉丁文摘录》(片段4)中这个王朝的开始：“第一个，阿努比斯…”<a href="#reffn_4" title="Jump back to footnote [4] in the text."> &#8617;</a></blockquote><blockquote id="fn_5"><sup>5</sup>. 与都灵纸草第II列相互印证：“孟斐斯的”。<a href="#reffn_5" title="Jump back to footnote [5] in the text."> &#8617;</a></blockquote><blockquote id="fn_6"><sup>6</sup>. “半神”应该是“亡灵”(νέκυες ἡμίθεοι)的同位语，同《巴尔巴鲁斯的拉丁文摘录》(片段4)和阿非利加努斯(片段6.1)。这些或许是谢姆苏·荷尔，都灵纸草上荷鲁斯的追随者或是崇拜者：见H·R·霍尔《剑桥古代史》，I p265。征服了肥沃的三角洲并建立了第一王朝的美尼斯(片段6)王之前，——谢姆苏·荷尔，隼鹰家族的成员们，他们的老家在在西三角洲，他们通过征服上埃及建立了一个更早的统一王国：见V·戈登·蔡尔德《最古东方新看法》1934，基于布雷斯特德《法兰西东方考古学会年报》XXX(开罗，1930),p10及之后和谢费尔在《东方文学杂志》(1932)的批评，p704。<a href="#reffn_6" title="Jump back to footnote [6] in the text."> &#8617;</a></blockquote><blockquote id="fn_7"><sup>7</sup>. 上述各王朝统治年数之和确切为11,025年，下文的24,900也是24,925取整的结果。<a href="#reffn_7" title="Jump back to footnote [7] in the text."> &#8617;</a></blockquote><blockquote id="fn_8"><sup>8</sup>. 博克《曼涅托与天狼星周期》，p85，将其修正为2046年。<a href="#reffn_8" title="Jump back to footnote [8] in the text."> &#8617;</a></blockquote><blockquote id="fn_9"><sup>9</sup>. 梅斯特拉伊姆（Mestraïm）：旧约创世纪X.6中的米兹拉伊姆（Mizraïm）；阿拉伯语中的米斯伦（Miṣrun），楔形文字中的穆斯利（Muṣri），米斯里（Miṣri）。“Mizraïm”是一个双音节合成词，可能与埃及本土的两个主要区域——上、下埃及有关。<a href="#reffn_9" title="Jump back to footnote [9] in the text."> &#8617;</a></blockquote><blockquote id="fn_*"><sup>*</sup>. “埃塞俄比亚”应该指努比亚地区（译者注）。<a href="#reffn_*" title="Jump back to footnote [*] in the text."> &#8617;</a></blockquote><blockquote id="fn_10"><sup>10</sup>. 关于埃及当时存在的许多小王国，见皮安希石碑，布雷斯特《古代记录》，IV，§§ 830,878，并且阿尔塔帕努斯的文章《关于犹太人》，引用于p73 n.3. T·尼克林（在他的《埃及年表研究》，1928-29,p39）中说：“曼涅托的王朝并不是全埃及的统治者的名单，而一部分是或多或少独立的诸侯，一部分是后来涌现出来的统治全埃及的家族。（参考苏格兰斯图亚特王朝或是汉诺威选帝侯），有些仅仅是宫殿中的市长或是独立地位不稳定的小诸侯，甚至是更下级的诺姆长，然而，后来的君主就是从他们那里传下来的。（参考英格兰七王国）”。<a href="#reffn_10" title="Jump back to footnote [10] in the text."> &#8617;</a></blockquote><blockquote id="fn_11"><sup>11</sup>. 前见附录I，p210。<a href="#reffn_11" title="Jump back to footnote [11] in the text."> &#8617;</a></blockquote><blockquote id="fn_12"><sup>12</sup>. 帕诺多鲁斯（Panodôrus，395-408 A.D.）和他同时代的安尼亚努斯都是埃及僧侣，他们撰写年表的目的是使迦勒底人和埃及人的体系与犹太人的体系相互协调。帕诺多鲁斯运用了（也许编纂了）《索提斯之书》（附录IV）。<a href="#reffn_12" title="Jump back to footnote [12] in the text."> &#8617;</a></blockquote><blockquote id="fn_13"><sup>13</sup>. 埃格雷戈雷（Ἐγρήγοροι），“守望者，天使”——在《以诺书》，179，指的是那些爱上人类女子的天使。希腊语词Ἐγρήγοροι是对《以诺书》179中的埃兰语词汇的误读。<a href="#reffn_13" title="Jump back to footnote [13] in the text."> &#8617;</a></blockquote><blockquote id="fn_14"><sup>14</sup>. 见引. p. xxviii.º <a href="#reffn_14" title="Jump back to footnote [14] in the text."> &#8617;</a></blockquote><blockquote id="fn_#"><sup>#</sup>. 特罗波伊(tropoi)的意思可能是“季”（译者注）。<a href="#reffn_#" title="Jump back to footnote [#] in the text."> &#8617;</a></blockquote><blockquote id="fn_$"><sup>$</sup>. 梅斯特里姆（Mestrem）同注9梅斯特拉伊姆（Mestraïm）（译者注）。<a href="#reffn_$" title="Jump back to footnote [$] in the text."> &#8617;</a></blockquote><blockquote id="fn_%"><sup>%</sup>. 贝罗索斯（Bêrôssos），巴比伦僧侣，编纂《巴比伦志》（译者注）。<a href="#reffn_%" title="Jump back to footnote [%] in the text."> &#8617;</a></blockquote><blockquote id="fn_15"><sup>15</sup>. 总计969年。<a href="#reffn_15" title="Jump back to footnote [15] in the text."> &#8617;</a></blockquote><blockquote id="fn_16"><sup>16</sup>. 总计214年。神王朝与半神朝总计1183年，见片段2。<a href="#reffn_16" title="Jump back to footnote [16] in the text."> &#8617;</a></blockquote><blockquote id="fn_17"><sup>17</sup>. 该摘录出自一位匿名且学识浅薄的抄写员巴尔巴鲁斯（并非真实姓名，而是后世学者因其抄录的拉丁文文字粗陋而起的绰号“野蛮人”，译者注）之手，主要依靠阿非利加努斯的著作。见韦尔《埃及中王国末期》第640页，第642页及其后，第655页及其后。格尔泽与鲍尔推断，巴尔巴鲁斯所译的希腊文记载要么出自埃及僧侣安尼亚努斯之手（见片段2，第11页注2），要么至少是衍生自他的材料（拉克尔，《古典古代学百科全书》XIV.1, 1081）。<a href="#reffn_17" title="Jump back to footnote [17] in the text."> &#8617;</a></blockquote><blockquote id="fn_18"><sup>18</sup>. 关于神提托厄斯，见科普托斯的两则铭文，见O.盖罗，收录于《埃及文物局年鉴》35(1935)第5页及其后。<a href="#reffn_18" title="Jump back to footnote [18] in the text."> &#8617;</a></blockquote><blockquote id="fn_19"><sup>19</sup>. 实际给出各项总计1150年。<a href="#reffn_19" title="Jump back to footnote [19] in the text."> &#8617;</a></blockquote><blockquote id="fn_20"><sup>20</sup>. 本译法遵循修复的希腊语原文：见文中注3（英文译者注）。<a href="#reffn_20" title="Jump back to footnote [20] in the text."> &#8617;</a></blockquote><blockquote id="fn_21"><sup>21</sup>. 文法学者阿庇翁（Apiôn），生于上埃及，提比略、盖乌斯（卡利古拉）和克劳狄乌斯时期居住于罗马：提比略给他起了个绰号“世界的铜钹”（cymbalum mundi）*。作为反犹运动的领袖，阿庇翁后来在约瑟夫斯的《反阿庇翁》中遭到抨击。此处阿庇翁的引文貌似部分源自门德斯的托勒密的《历史》。见塔提安《反希腊人的演说》，收录于米涅《希腊教父全集》VI.880–882以及缪勒《希腊历史残篇》IV p485（又引见于II p533）。（门德斯的托勒密将出埃及定年于阿摩西斯（现代称阿赫摩斯（Ahmose），古希腊语转写为阿摩西斯（Amôsis），译者注）王统治时期，与伊那科斯同时代。阿庇翁在其《埃及志》（五卷本）第四卷写道阿摩西斯摧毁了阿瓦里斯城。）门德斯的托勒密与阿庇翁的作品应含有大量相同的材料。参见尤西比乌斯转述阿非利加努斯《福音预备录》X.10，“阿庇翁称，摩西是在伊那科斯时代带领犹太人出埃及的。”参见片段52，1；53，9。*塞耶注：普林尼，《自然史》序言25。<a href="#reffn_21" title="Jump back to footnote [21] in the text."> &#8617;</a></blockquote><blockquote id="fn_22"><sup>22</sup>. 阿尔戈斯第一王朝的建立者，伊那科斯（Inachus）据说死于特洛伊陷落前二十代人的时候，即约公元前1850年，埃古普托斯和达那俄斯（Danaus）是伊那科斯的第五代后裔。参见片段50,§ 102。<a href="#reffn_22" title="Jump back to footnote [22] in the text."> &#8617;</a></blockquote><blockquote id="fn_23"><sup>23</sup>. 这貌似是阿摩西斯的统治年数，而非伊那科斯，参见片段52，1，其中阿非利加努斯（由辛凯洛斯转述）忽略了他的统治年数。<a href="#reffn_23" title="Jump back to footnote [23] in the text."> &#8617;</a></blockquote><blockquote id="fn_24"><sup>24</sup>. 巴尔巴鲁斯给出的年数总的来说与阿非利加努斯相同。巴尔巴鲁斯忽略了曼涅托的第VII王朝；巴尔巴鲁斯所载的第X王权（Potestas X）被盖尔泽（塞克斯图斯·尤利乌斯·阿非利加努斯，p199）解释为曼涅托第X王朝+第XI王朝+阿蒙涅姆赫（16年）=244年。总计2300年。<a href="#reffn_24" title="Jump back to footnote [24] in the text."> &#8617;</a></blockquote>]]></content>
    
    
    <summary type="html">曼涅托《埃及史》残卷。洛布古典丛书，1940。哈佛大学出版社，剑桥(马萨诸塞)。本书属于公共领域。</summary>
    
    
    
    <category term="zh-CN" scheme="https://hiedanoajuu.github.io/categories/zh-CN/"/>
    
    <category term="历史" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E5%8E%86%E5%8F%B2/"/>
    
    <category term="古代史" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E5%8E%86%E5%8F%B2/%E5%8F%A4%E4%BB%A3%E5%8F%B2/"/>
    
    <category term="埃及" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E5%8E%86%E5%8F%B2/%E5%8F%A4%E4%BB%A3%E5%8F%B2/%E5%9F%83%E5%8F%8A/"/>
    
    <category term="0 杂项" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E5%8E%86%E5%8F%B2/%E5%8F%A4%E4%BB%A3%E5%8F%B2/%E5%9F%83%E5%8F%8A/0-%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="渣翻" scheme="https://hiedanoajuu.github.io/tags/%E6%B8%A3%E7%BF%BB/"/>
    
    <category term="历史" scheme="https://hiedanoajuu.github.io/tags/%E5%8E%86%E5%8F%B2/"/>
    
    <category term="埃及" scheme="https://hiedanoajuu.github.io/tags/%E5%9F%83%E5%8F%8A/"/>
    
  </entry>
  
  <entry>
    <title>NASM - 全网通用汇编器</title>
    <link href="https://hiedanoajuu.github.io/2025/07/05/nasmdoc/"/>
    <id>https://hiedanoajuu.github.io/2025/07/05/nasmdoc/</id>
    <published>2025-07-05T07:12:23.000Z</published>
    <updated>2025-07-30T05:26:22.596Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><h2 id="什么是NASM？"><a href="#什么是NASM？" class="headerlink" title="什么是NASM？"></a>什么是NASM？</h2><p>全网通用汇编器（NASM，Netwide Assembler）是一款为可移植性和模块化而设计的80x86和x86-64汇编器，支持多种目标文件格式，包括Linux与*BSD的a.out、ELF、Mach-O、16位和32位的.obj（OMF）格式，COFF（包括其Win32和Win64变体）。同样可以输出原始二进制文件、Intel十六进制格式和以及Motorola S-Record。其语法设计得简单易懂，类似于Intel软件开发者手册中的语法，并尽可能降低了复杂性。支持当前所有已知的x86架构扩展，并提供了强大的宏命令支持。</p><h3 id="许可证"><a href="#许可证" class="headerlink" title="许可证"></a>许可证</h3><p>NASM遵循所谓的2-clause BSD许可证，亦称BSD简化许可证：<br>版权所在 1996-2024 NASM作者 - 保留所有权利。<br>允许以源代码和二进制形式再分发与使用（无论修改与否），但须满足以下条件：</p><ul><li>源代码再分发须保留上述版权声明、本条件清单及下述免责声明。</li><li>二进制形式再分发须在随分发的文档和/或其他材料中复制上述版权声明、本材料清单及下述免责声明。<br>本软件按”原样”提供，版权持有人及贡献者不承担任何明示或默示的担保责任，包括但不限于对适销性和特定用途适用性的默示担保。在任何情况下，无论基于何种法律理论（无论是合同责任、严格责任还是侵权责任，包括疏忽或其他原因），版权持有人或贡献者均不对因使用本软件而产生的任何直接、间接、偶然、特殊、典型或后果性损害（包括但不限于替代商品或服务的采购、使用损失、数据丢失或利润损失、业务中断）承担责任，即使已被告知发生此类损害的可能性。</li></ul><h1 id="运行NASM"><a href="#运行NASM" class="headerlink" title="运行NASM"></a>运行NASM</h1><h2 id="NASM命令行语法"><a href="#NASM命令行语法" class="headerlink" title="NASM命令行语法"></a>NASM命令行语法</h2><p>要汇编一个文件，可以使用以下形式的命令：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nasm -f &lt;格式&gt; &lt;文件名&gt; [-o &lt;输出文件名&gt;]</span><br></pre></td></tr></table></figure><br>例如：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nasm -f elf myfile.asm</span><br></pre></td></tr></table></figure><br>将汇编<code>myfile.asm</code>为ELF对象文件<code>myfile.o</code>，而：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nasm -f bin myfile.asm -o myfile.com</span><br></pre></td></tr></table></figure><br>将汇编<code>myfile.asm</code>为原始二进制文件<code>myfile.com</code>。<br>要生成在源代码左侧显示NASM输出的十六进制机器码的列表文件，添加<code>-l</code>选项并给出列表文件名，例如：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nasm -f coff myfile.asm -l myfile.lst</span><br></pre></td></tr></table></figure><br>要获取NASM的更多使用说明，请输入：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nasm -h</span><br></pre></td></tr></table></figure><br>选项<code>-h</code>可替换为<code>--help</code>。<br>如果使用Linux但不确定系统使用的是<code>a.out</code>还是ELF，（在存放NASM二进制文件的目录）执行：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file nasm</span><br></pre></td></tr></table></figure><br>如果输出结果类似：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nasm: ELF 32-bit LSB executable i386 (386 and up) Version 1</span><br></pre></td></tr></table></figure><br>则系统使用ELF，在编译Linux目标文件时应当使用<code>-f elf</code>选项。如果输出结果类似：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nasm: Linux/i386 demand-paged executable (QMAGIC)</span><br></pre></td></tr></table></figure><br>系统使用a.out，应当使用<code>-f aout</code>（Linux<code>a.out</code>系统早已废弃，如今已罕见）<br>和Unix编译器与汇编器一样，NASM除报错外没有其他提示。</p><h3 id="o选项：输出文件名"><a href="#o选项：输出文件名" class="headerlink" title="-o选项：输出文件名"></a>-o选项：输出文件名</h3><p>NASM通常会自动选择输出文件名，具体命名规则取决于目标文件格式。对于Microsoft目标文件格式（<code>obj</code>、<code>win32</code>和<code>win64</code>），会将你的源文件名的<code>.asm</code>扩展名（或其他扩展名——NASM对此无限制）换成<code>.obj</code>。对于Unix目标文件格式（<code>aout</code>、<code>as86</code>、<code>coff</code>、<code>elf32</code>、<code>elf64</code>、<code>elfx32</code>、<code>ieee</code>、<code>macho32</code>与<code>macho64</code>），会换成<code>.o</code>。对于<code>dbg</code>、<code>ith</code>和<code>srec</code>，会分别使用<code>.dbg</code>、<code>.ith</code>和<code>.srec</code>。对于<code>bin</code>格式只是去掉扩展名，例如<code>myfile.asm</code>生成<code>myfile</code>文件。<br>如果输出文件已存在，<code>NASM</code>会将其覆盖。除非其名称与输入文件相同，这种情况将会给出警告并使用<code>nasm.out</code>作为输出文件名。<br>如果不接受该默认行为，NASM提供了<code>-o</code>命令行选项，用于指定自己想要的的输出文件名。可以在<code>-o</code>选项后加上自己想要的输出文件名，中间有无空格均可，例如：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nasm -f bin program.asm -o program.com</span><br><span class="line">nasm -f bin driver.asm -odriver.sys</span><br></pre></td></tr></table></figure><br>注意此处为小写o，与制定优化次数的大写O不同。见节<a href="&quot;#&quot;">2.1.24</a></p><h3 id="f选项：输出文件格式"><a href="#f选项：输出文件格式" class="headerlink" title="-f选项：输出文件格式"></a>-f选项：输出文件格式</h3><p>如果未指定<code>-f</code>选项，NASM将自己选择输出文件格式。在NASM的发行版中，默认选项始终是<code>bin</code>；如果自行编译NASM，可以在编译时重新定义<code>OF_DEFAULT</code>并指定想要的默认选项。<br>和<code>-o</code>一样，<code>-f</code>和输出文件格式间的空格可有可无；因此<code>-f elf</code>和<code>-felf</code>均有效。<br>可用输出文件格式的完整列表可以由命令<code>nasm -h</code>给出。</p><h3 id="l选项：生成列表文件"><a href="#l选项：生成列表文件" class="headerlink" title="-l选项：生成列表文件"></a>-l选项：生成列表文件</h3><p>如果指定<code>-l</code>选项并在其后（中间的空格可有可无）加上一个文件名，NASM会生成一个源代码列表文件。其中地址和生成的机器码会列在左侧，源代码和多行宏的展开内容（除特别声明不展开的宏外：见节<a href="&quot;#&quot;">4.5.11</a>）。例如：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nasm -f elf myfile.asm -l myfile.lst</span><br></pre></td></tr></table></figure><br>若已启用列表文件生成，可通过指令<code>[list -]</code>不列出源代码中的某一部分，通过<code>[list +]</code>恢复列出（默认）。该指令不存在（省略括号的）“使用形式”。该功能可用于仅列出目标的代码部分，避免生成过于冗长的列表文件。</p><h2 id="L选项：附加或修改列表文件信息"><a href="#L选项：附加或修改列表文件信息" class="headerlink" title="-L选项：附加或修改列表文件信息"></a>-L选项：附加或修改列表文件信息</h2><p>使用该选项指定列表文件的输出细节。<br>支持的选项有：</p><ul><li><code>-Lb</code>显示内置宏包（标准和<code>%use</code>）</li><li><code>-Ld</code>以十进制，而非十六进制显示字节计数和重复次数</li><li><code>-Le</code>显示预处理输入</li><li><code>-Lf</code>忽略<code>.nolist</code>并强制输出列表文件</li><li><code>-Lm</code>显示带参数展开的多行宏调用</li><li><code>-Lp</code>在每次编译过程输出列表文件，用于错误排查</li><li><code>-Ls</code>显示所有单行宏定义</li><li><code>-Lw</code>逐行刷新输出（极慢，主要用于调试NASM崩溃问题）</li><li><code>-L+</code>启用除<code>-Lw</code>外的所有列表功能选项（极详细）<br>这些选项可以通过使用运行时指令<code>%pragma list options</code>启用或禁用：<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%pragma list options [+|-]标志...</span><br></pre></td></tr></table></figure>例如，启用<code>d</code>和<code>m</code>标志，禁用<code>s</code>标志：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%pragma list options +dm -s</span><br></pre></td></tr></table></figure>出于向前兼容性考虑，未定义的标志将忽略。因此，指定NASM新版本引入的标志并不会影响旧版本。列表文件选项标志始终为单字母数字字符，区分大小写。</li></ul><h3 id="M选项：生成Makefile依赖项"><a href="#M选项：生成Makefile依赖项" class="headerlink" title="-M选项：生成Makefile依赖项"></a>-M选项：生成Makefile依赖项</h3><p>该选项用于将makefile依赖项输出到stdout。可重定向到一个文件以进行后续处理。例如：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nasm -M myfile.asm &gt; myfile.dep</span><br></pre></td></tr></table></figure></p><h3 id="MG选项：生成Makefile依赖项"><a href="#MG选项：生成Makefile依赖项" class="headerlink" title="-MG选项：生成Makefile依赖项"></a>-MG选项：生成Makefile依赖项</h3><p>该选项用于将makefile依赖项输出到stdout。与<code>-M</code>选项不同，如果遇到不存在的文件，会将其视为生成的文件，并将其添加到依赖列表（无前缀）。</p><h3 id="MF选项：设置Makefile依赖文件"><a href="#MF选项：设置Makefile依赖文件" class="headerlink" title="-MF选项：设置Makefile依赖文件"></a>-MF选项：设置Makefile依赖文件</h3><p>该选项和<code>-M</code>或<code>-MG</code>一起使用，将输出送入文件而不是stdout，例如：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nasm -M -MF myfile.dep myfile.asm</span><br></pre></td></tr></table></figure></p><h3 id="MD选项：汇编并生成依赖项"><a href="#MD选项：汇编并生成依赖项" class="headerlink" title="-MD选项：汇编并生成依赖项"></a>-MD选项：汇编并生成依赖项</h3><p><code>-MD</code>选项等效于同时使用<code>-M</code>和<code>-MF</code>选项（此时必须指定文件名）。但是，和<code>-M</code>与<code>-MG</code>选项不同，<code>-MD</code><em>没有</em>终止汇编器的正常功能。使用该选项在每次汇编时自动生成更新的依赖项。例如：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nasm -f elf -o myfile.o -MD myfile.dep myfile.asm</span><br></pre></td></tr></table></figure><br>如果<code>-MD</code>后的参数是选项而非文件名，则按以下优先级确定输出文件名：</p><ul><li><code>-MF</code>选项设置的文件名；</li><li><code>-o</code>选项的输出文件名加上<code>.d</code>；</li><li>输入文件名，扩展名设为<code>.d</code>；</li></ul><h3 id="MT选项：依赖目标名称"><a href="#MT选项：依赖目标名称" class="headerlink" title="-MT选项：依赖目标名称"></a>-MT选项：依赖目标名称</h3><p><code>-MT</code>可用于覆盖依赖目标的默认名称。一般和输出文件名一致，由<code>-o</code>选项指定。</p><h3 id="MQ选项：依赖目标名称（转义）"><a href="#MQ选项：依赖目标名称（转义）" class="headerlink" title="-MQ选项：依赖目标名称（转义）"></a>-MQ选项：依赖目标名称（转义）</h3><p><code>-MQ</code>选项与<code>-MT</code>选项功能类似，除了会试着对Makefile语法中的特殊字符转义。这并非万无一失，因为并非所有特殊字符都能在<code>make</code>中正确地转义。默认输出（如果未指定<code>-MT</code>或<code>-MQ</code>）会自动转义。</p><h3 id="MP选项：生成伪Makefile目标"><a href="#MP选项：生成伪Makefile目标" class="headerlink" title="-MP选项：生成伪Makefile目标"></a>-MP选项：生成伪Makefile目标</h3><p>和任何依赖生成选项一起使用时，<code>-MP</code>选项会使NASM为每个头文件生成一个无依赖项的伪目标。阻止<code>make</code>在头文件被移除时报错。</p><h3 id="MW选项：Watcom-make转义风格"><a href="#MW选项：Watcom-make转义风格" class="headerlink" title="-MW选项：Watcom make转义风格"></a>-MW选项：Watcom make转义风格</h3><p>该选项使NASM尝试根据Watcom <code>make</code>规则而非POSIX <code>make</code>规则（也被大多数<code>make</code>的变种所采用）转义依赖。这种规则转义<code>#</code>的方式是<code>$#</code>而不是<code>\#</code>，续行符使用<code>&amp;</code>而不是<code>\</code>，并将包含空格的文件名用引号括起来。</p><h3 id="F选项：调试信息格式"><a href="#F选项：调试信息格式" class="headerlink" title="-F选项：调试信息格式"></a>-F选项：调试信息格式</h3><p>该选项用于选择输出文件中调试信息的格式，供调试器使用。在2.03.01版本前，启用此选项并不会输出所选的调试信息格式。使用<code>-g</code>启用输出，见节<a href="&quot;#&quot;">2.1.14</a>。版本2.03.01及后续版本在指定<code>-F</code>时自动启用<code>-g</code>。<br>输出格式可用的调试文件格式的完整列表可通过命令<code>nasm -h</code>查询。当前并非所有输出格式均支持调试输出。<br>请不要和<code>-f dbg</code>输出格式选项混淆，见节<a href="&quot;#&quot;">8.13</a>。</p><h3 id="g选项：启用调试信息"><a href="#g选项：启用调试信息" class="headerlink" title="-g选项：启用调试信息"></a>-g选项：启用调试信息</h3><p>该选项可以用于生成制定格式的调试信息。见节[2.1.13]。不使用<code>-F</code>单独使用<code>-g</code>会以所选输出格式的默认调试格式（如果存在）输出调试信息。如果当前所选输出格式未实现调试信息，<code>-g</code>将被忽略。</p><h3 id="X选项：选择报错格式"><a href="#X选项：选择报错格式" class="headerlink" title="-X选项：选择报错格式"></a>-X选项：选择报错格式</h3><p>该选项可被用于选择任何NASM产生的报错的格式。<br>目前有两种可选的报错格式。分别是<code>-Xvc</code>选项和<code>-Xgnu</code>选项。GNU格式为默认，如下所示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename.asm:65: error: specific error messageerror is the severity of the error (this could be warning)</span><br></pre></td></tr></table></figure><br>其中<code>filename.asm</code>是发现错误的源文件的文件名，<code>65</code>是发现错误的源文件行号，<code>error</code>是错误的严重性（还可能是<code>warning</code>），<code>specific error message</code>是更详细的文本说明，帮助定位具体问题。<br>另一种格式，由<code>-Xvc</code>指定，是由微软Visual C++和其他一些程序使用的风格，如下所示：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename.asm(<span class="number">65</span>) : error: specific error message</span><br></pre></td></tr></table></figure><br>唯一的区别是行号在括号中，而不是被分号分隔。<br>见<code>Visual C++</code>输出格式，节<a href="&quot;#&quot;">8.5</a>。</p><h3 id="Z选项：将错误发送到文件"><a href="#Z选项：将错误发送到文件" class="headerlink" title="-Z选项：将错误发送到文件"></a>-Z选项：将错误发送到文件</h3><p>在<code>MS-DOS</code>上很难（虽然可以）将程序的标准错误输出重定向到一个文件。由于NASM通常将警告和错误输出到<code>stderr</code>，（举例来说）如果需要将这些信息载入编辑器，可能很难捕获错误。<br>NASM因此提供了<code>-Z</code>选项，接受一个文件名参数，并将错误信息输出到指定文件而非标准错误流。因此可以用如下命令将错误重定向到一个文件。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nasm -Z myfile.err -f obj myfile.asm</span><br></pre></td></tr></table></figure><br>在NASM的早期版本，该选项称作<code>-E</code>，但因<code>-E</code>选项通常仅用于预处理，该设计已被调整，复用会引发灾难性后果。见节<a href="&quot;#&quot;">2.1.22</a>。</p><h3 id="s选项：将错误发送到stdout"><a href="#s选项：将错误发送到stdout" class="headerlink" title="-s选项：将错误发送到stdout"></a>-s选项：将错误发送到stdout</h3><p><code>-s</code>选项将错误信息重定向到<code>stdout</code>而不是<code>stderr</code>，因此可以在<code>MS-DOS</code>上重定向。要汇编<code>myfile.asm</code>文件并将其输出传递给<code>more</code>程序，可以输入以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nasm -s -f obj myfile.asm | more</span><br></pre></td></tr></table></figure><br>见<code>-Z</code>选项，节<a href="&quot;#&quot;">2.1.16</a>。</p><h3 id="i选项：包含文件搜索目录"><a href="#i选项：包含文件搜索目录" class="headerlink" title="-i选项：包含文件搜索目录"></a>-i选项：包含文件搜索目录</h3><p>当NASM在源文件中遇到<code>%include</code>或<code>%pathsearch</code>命令（见节<a href="&quot;#&quot;">4.8.1</a>，节<a href="&quot;#&quot;">4.8.2</a>或节<a href="&quot;#&quot;">3.2.3</a>），不仅会在当前目录搜索指定文件，还会在东莞命令行选项<code>-i</code>添加的目录中搜素。因此 比如说，可以用如下命令引入宏库中的文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nasm -ic:\marcolib\ -f obj myfile.asm</span><br></pre></td></tr></table></figure><br>（通常，<code>-i</code>与路径名之间的空格可有可无）。<br>NASM 2.14之前，通过该选项给出的路径会直接原样使用，是否添加路径分隔符取决于调用方。此前允许隐式拼接搜索路径与文件名。不过这也只是华而不实。现在则强制保留末尾路径分隔符，因此<code>-ifoo</code>会认为是<code>-ifoo/</code>目录。<br>如果想要定义<em>标准</em>包含搜索路径，类似Unix系统上的<code>/usr/include</code>，可以在<code>NASMENV</code>环境变量中设置一或多个<code>-i</code>参数（见节<a href="&quot;#&quot;">2.1.35</a>）。<br>考虑到Makefile和多数C编译器的兼容性，该选项也可以指定为<code>-I</code>。</p><h3 id="p选项：预包含文件"><a href="#p选项：预包含文件" class="headerlink" title="-p选项：预包含文件"></a>-p选项：预包含文件</h3><p>NASM允许通过<code>-p</code>选项指定文件成为源代码的预包含文件。因此运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nasm myfile.asm -p myinc.inc</span><br></pre></td></tr></table></figure><br>等价于运行<code>nasm myfile.asm</code>并在文件的开头放上<code>%include &quot;myinc.inc&quot;</code>。<br><code>--include</code>选项同样可接受。<br>考虑到和<code>-I</code>、<code>-D</code>与<code>-U</code>选项保持一致，该选项也可以指定为<code>-P</code>。</p><h3 id="d选项：预定义宏"><a href="#d选项：预定义宏" class="headerlink" title="-d选项：预定义宏"></a>-d选项：预定义宏</h3><p>正如<code>-p</code>选项提供了源文件开头的<code>%include</code>命令的替代，<code>d</code>选项提供了<code>%define</code>命令的替代，可以输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nasm myfile.asm -dFOO=100。</span><br></pre></td></tr></table></figure><br>替代文件开头的下面这条指令：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%define FOO 100</span><br></pre></td></tr></table></figure><br>也可以忽略宏的值：选项<code>-dFOO</code>等价于代码<code>%define FOO</code>。这种形式的命令适用于配置需要通过<code>%ifdef</code>检测的汇编时选项，例如<code>-dDEBUG</code>。<br>考虑到Makefile和多数C编译器的兼容性，该选项也可以指定为<code>-D</code>。</p>]]></content>
    
    
    <summary type="html">NASM（Netwide Assembler）说明文档：一款面向Intel x86系列处理器的汇编器，并附带可移植源代码。版本 2.16.03，译者：稗田阿柔</summary>
    
    
    
    <category term="zh-CN" scheme="https://hiedanoajuu.github.io/categories/zh-CN/"/>
    
    <category term="计算机" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="汇编语言" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Nasm" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/Nasm/"/>
    
    
    <category term="渣翻" scheme="https://hiedanoajuu.github.io/tags/%E6%B8%A3%E7%BF%BB/"/>
    
    <category term="编程语言" scheme="https://hiedanoajuu.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>虚拟硬盘映像格式规范</title>
    <link href="https://hiedanoajuu.github.io/2025/07/03/vhd/"/>
    <id>https://hiedanoajuu.github.io/2025/07/03/vhd/</id>
    <published>2025-07-03T09:46:25.000Z</published>
    <updated>2025-07-30T05:29:54.390Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文描述了微软虚拟PC和虚拟服务器支持的不同虚拟硬盘格式，并提供了有关如何存储数据的信息。<br>如评论或提问，请通过电子邮件联系vhdtalk@microsoft.com。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul>  <li>引言</li>  <li>虚拟硬盘映像类型总览<ul>  <li>静态硬盘映像</li>  <li>动态硬盘映像</li>  <li>差分硬盘映像</li>  </ul></li>  <li>硬盘文件尾格式</li>  <li>动态磁盘文件头格式</li>  <li>块分配表和数据块</li>  <li>动态磁盘实现</li>  <li>映射磁盘扇区到块扇区</li>  <li>分割硬盘映像</li>  <li>差分硬盘实现<ul>  <li>差分硬盘的写操作</li>  <li>差分硬盘的读操作</li>  <li>父硬盘映像的识别</li>  <li>父硬盘映像的修改</li>  </ul></li>  <li>附录：CHS计算</li></ul><p>© 2005 微软公司。保留所有权利。本规范依据微软开放规范承诺提供。关于微软开放规范承诺的进一步细节，请参见：<a href="https://www.microsoft.com/interop/osp/default.mspx">https://www.microsoft.com/interop/osp/default.mspx</a>。微软拥有与本材料主题相关的专利、专利程序、商标、版权或其他知识产权。除在微软开放规范承诺中明确授权，提供这些材料不代表授予您使用这些专利、商标、版权或其他知识产权的任何许可。</p><p>© 2005 微软公司。保留所有权利。<br>Microsoft、Windows和Windows NT均为微软公司在美国和/或其他国家/地区的注册商标或商标。<br>文中提及的实际公司名称和产品名称为各自所有者的商标。</p><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>本文描述了微软虚拟PC和虚拟服务器产品支持的不同硬盘格式，既不解释硬盘如何与虚拟机连接，也不提供有关ATA（AT附加装置）硬盘或小型计算机接口（SCSI）硬盘的信息，而是聚焦如何以文件形式在主机文件系统上存储数据。<br>读者应当熟悉虚拟机技术和术语，例如名词<em>客机</em>（guest）、<em>主机</em>（host）在虚拟机架构语境下的运用。用户同样应当熟悉硬盘技术并应当理解数据在现代存储介质上的访问和布局方式。文中使用的术语如下：</p><p><strong>系统（System）</strong><br>指虚拟PC、虚拟服务器，或二者兼有。</p><p><strong>绝对字节偏移（Absolute Byte Offset）</strong><br>指从文件开头开始的字节偏移地址。</p><p><strong>保留字段（Reserved）</strong><br>被标记为保留的字段已被弃用，或留作未来使用。</p><p><strong>扇区长度（Sector length）</strong><br>扇区长度总为512字节。</p><p>若无特殊说明，文件格式中的所有值都以网络字节顺序（大端序）存储。同样，若无特殊说明，所有保留字段值需置零。</p><h1 id="虚拟硬盘映像类型总览"><a href="#虚拟硬盘映像类型总览" class="headerlink" title="虚拟硬盘映像类型总览"></a>虚拟硬盘映像类型总览</h1><p>虚拟机硬盘被实现为位于主机文件系统本地的文件。下列虚拟硬盘格式类型由微软虚拟PC和虚拟服务器支持：</p><ul><li>静态硬盘映像（Fixed hard disk image）</li><li>动态硬盘映像（Dynamic hard disk image）</li><li>差分硬盘映像（Differencing hard disk image）<br>每种虚拟硬盘映像具有专属的文件格式，将在下面的部分中介绍。</li></ul><h2 id="静态硬盘映像"><a href="#静态硬盘映像" class="headerlink" title="静态硬盘映像"></a>静态硬盘映像</h2><p>静态硬盘映像是分配了虚拟磁盘大小的空间的文件。例如，如果你创建一块大小2GB的虚拟硬盘，系统将在主机上创建一个大小约为2GB的文件。</p><p>为数据分配的空间后是文件尾（footer）结构。整个文件的大小是客机操作系统硬盘的容量加上文件尾的大小。由于主机文件系统的文件大小限制，静态硬盘的大小可能受限。例如，在FAT32文件系统，虚拟硬盘的最大容量为4GB。</p><h2 id="动态硬盘映像"><a href="#动态硬盘映像" class="headerlink" title="动态硬盘映像"></a>动态硬盘映像</h2><p>动态硬盘映像是在任何时候大小都等于写入的数据加上文件头（header）和尾大小的文件。分配以块的形式完成。每当写入更多数据，文件大小会因分配了更多块而动态增长。例如，一块2GB虚拟硬盘的文件在主机文件系统上最初的大小在2MB左右。随着向映像中写入数据，文件的大小增长到2GB的最大值。<br>动态硬盘存储用于访问存储在硬盘上的用户数据的元数据。动态硬盘的最大容量为2040GB。实际大小受底层硬盘协议限制。例如，ATA硬盘有127GB的限制。<br>动态硬盘的基本格式如下表所示。</p><div class="table-container"><table><thead><tr><th>动态磁盘头字段</th></tr></thead><tbody><tr><td>硬盘文件尾备份（512字节）</td></tr><tr><td>动态硬盘文件头（1024字节）</td></tr><tr><td>BAT（块分配表）</td></tr><tr><td>数据块1</td></tr><tr><td>数据块2</td></tr><tr><td>…</td></tr><tr><td>数据块n</td></tr><tr><td>硬盘文件尾（512字节）</td></tr></tbody></table></div><p>每添加一个数据块，硬盘文件尾必须移动到文件的结尾。因为硬盘文件尾是硬盘映像至关重要的一部分，所以文件尾出于冗余目的在文件头中被镜像了一份。</p><h2 id="差分硬盘映像"><a href="#差分硬盘映像" class="headerlink" title="差分硬盘映像"></a>差分硬盘映像</h2><p>差分硬盘映像通过记录相对于父镜像发生修改的数据块的集合，表示虚拟硬盘的当前状态。此类硬盘映像并非独立；需要依赖其他硬盘格式实现完整功能。父硬盘映像可以是提到的任何一种硬盘映像类型，包括另一个差分硬盘映像。<br>关于此格式的细节，参见后文“差分硬盘实现”。</p><h1 id="硬盘文件尾格式"><a href="#硬盘文件尾格式" class="headerlink" title="硬盘文件尾格式"></a>硬盘文件尾格式</h1><p>所有硬盘映像共享基本文件尾格式。每种硬盘类型根据需要扩展此格式。<br>硬盘文件尾格式如下表所列：</p><div class="table-container"><table><thead><tr><th>硬盘文件尾字段</th><th>大小（字节）</th></tr></thead><tbody><tr><td>标识符</td><td>8</td></tr><tr><td>特性</td><td>4</td></tr><tr><td>文件格式版本</td><td>4</td></tr><tr><td>数据偏移</td><td>8</td></tr><tr><td>时间戳</td><td>4</td></tr><tr><td>创建应用</td><td>4</td></tr><tr><td>创建应用版本</td><td>4</td></tr><tr><td>创建主机操作系统</td><td>4</td></tr><tr><td>原始大小</td><td>8</td></tr><tr><td>目前大小</td><td>8</td></tr><tr><td>磁盘几何参数</td><td>4</td></tr><tr><td>磁盘类型</td><td>4</td></tr><tr><td>校验和</td><td>4</td></tr><tr><td>唯一标识</td><td>16</td></tr><tr><td>保存状态</td><td>1</td></tr><tr><td>保留字段</td><td>427</td></tr></tbody></table></div><p><strong>注</strong>：早于微软虚拟PC 2004的版本创建的硬盘映像文件尾大小为511字节，因此硬盘文件尾可以位于存放硬盘映像的文件的最后511或512字节。</p><p><strong>硬盘文件尾字段描述</strong><br>下文提供了硬盘文件尾字段的详细定义。</p><p><strong>标识符（Cookie）</strong><br>标识符用于唯一标识硬盘映像的原始创建者。值区分大小写。<br>微软使用“conectix”字符串作为微软虚拟服务器、虚拟PC和早期产品创建的硬盘映像文件的标识。标识符以八字符的ASCII字符串形式存储，“c”位于第一个字节上，“o”位于第二个字节上，以此类推。</p><p><strong>特性（Features）</strong><br>这是一个用于指示特定的功能支持的位字段。特性的列表如下表所示。未被展示的字段视为保留。</p><div class="table-container"><table><thead><tr><th>特性</th><th>值</th></tr></thead><tbody><tr><td>无特性启用</td><td>0x00000000</td></tr><tr><td>临时</td><td>0x00000001</td></tr><tr><td>保留</td><td>0x00000002</td></tr></tbody></table></div><p><strong>无特性启用（No features enabled）</strong>：硬盘映像上没有特别启用的特性。<br><strong>临时（Temporary）</strong>：当前磁盘为临时磁盘时设置此位。指定为临时磁盘向应用程序表明，磁盘是关闭时待删除的磁盘。<br><strong>保留</strong>：此位必须始终置1。<br>所有其他位均被保留，并应置0。</p><p><strong>文件格式版本（File Format Version）</strong><br>该字段分为主/次版本，并与创建文件时的规范版本相匹配。两高位字节为主版本，低位字节为次版本。必须与文件格式规范相匹配。当前规范下，字段需初始化为<code>0x00010000</code>。<br>主版本仅当文件格式进行不兼容旧版本的修改时才会递增。</p><p><strong>数据偏移（Data Offset）</strong><br>该字段保存从文件开头至下一结构的绝对字节偏移。该字段用于动态磁盘和差分磁盘，但并不用于静态磁盘。静态磁盘此字段需置为0xFFFFFFFF。</p><p><strong>时间戳（Time Stamp）</strong><br>该字段存储硬盘映像的创建时间。数据是从UTC/GMT 2000年1月1日 12：00：00 AM开始的秒数。</p><p><strong>创建应用（Creator Application）</strong><br>该字段用于记录创建硬盘的应用程序。此字段为左对齐文本字段，使用单字节字符集。<br>如果硬盘由微软虚拟PC创建，“vpc ”将被写入该字段。如果硬盘映像由微软虚拟服务器创建，“vs  ”将被写入该字段。<br>其他应用程序应使用其专属的标识符。</p><p><strong>创建应用版本（Creator Version）</strong><br>该字段存放创建硬盘映像的程序的主/次版本。<br>虚拟服务器2004置<code>0x00010000</code>，虚拟PC2004置<code>0x00050000</code>。</p><p><strong>创建主机操作系统（Creator Host OS）</strong><br>该字段存储创建磁盘镜像的主机操作系统类型。</p><div class="table-container"><table><thead><tr><th>主机操作系统类型</th><th>值</th></tr></thead><tbody><tr><td>Windows</td><td>0x5769326B(Wi2k)</td></tr><tr><td>Macintosh</td><td>0x4D616320(Mac )</td></tr></tbody></table></div><p><strong>原始大小（Original Size）</strong><br>该字段在创建文件时以虚拟机的视角以字节数形式存储硬盘的原始大小。该字段仅供参考。</p><p><strong>当前大小（Current Size）</strong><br>该字段以虚拟机的视角以字节数形式存储硬盘的当前大小。<br>该值同原始大小一样在创建硬盘时生成。该值可依据硬盘是否扩展改变。</p><p><strong>磁盘几何参数（Disk Geometry）</strong><br>该字段存储硬盘的柱面（cylinder）、磁头（heads）和每磁道（track）的扇区（sectors）数。</p><div class="table-container"><table><thead><tr><th>磁盘几何参数字段</th><th>大小（字节）</th></tr></thead><tbody><tr><td>柱面</td><td>2</td></tr><tr><td>磁头</td><td>1</td></tr><tr><td>每磁道/柱面扇区数</td><td>1</td></tr></tbody></table></div><p>当一块磁盘被编辑为ATA硬盘，CHS值（<strong>C</strong>ylinder,<strong>H</strong>eads,<strong>S</strong>ectors per track）由ATA控制器使用，决定磁盘的大小。当用户创建一块确定大小的硬盘，硬盘映像的大小小于用户创建的大小。因为由硬盘大小计算得来的CHS值向下舍入。决定CHS值算法的伪代码见本文档的附录。</p><p><strong>磁盘类型</strong></p><div class="table-container"><table><thead><tr><th>磁盘类型字段</th><th>值</th></tr></thead><tbody><tr><td>空</td><td>0</td></tr><tr><td>保留（废弃）</td><td>1</td></tr><tr><td>静态硬盘</td><td>2</td></tr><tr><td>动态硬盘</td><td>3</td></tr><tr><td>差分硬盘</td><td>4</td></tr><tr><td>保留（废弃）</td><td>5</td></tr><tr><td>保留（废弃）</td><td>6</td></tr></tbody></table></div><p><strong>校验和（Checksum）</strong><br>该字段保存硬盘文件脚的基本校验和，只是文件脚中除校验和以外其他所有字段之一的补码。如果校验和验证失败，虚拟PC和虚拟服务器产品将会使用文件头作为替代。如果文件头中的校验和同样失败，文件应当被认为已损坏。用于决定校验和的算法的伪代码见本文档附录。</p><p><strong>唯一标识（Unique ID）</strong><br>每一块硬盘拥有一个存在硬盘中的唯一标识，是128位的全局通用标识（UUID），用于识别硬盘。该字段用于关联父硬盘映像与其差分硬盘映像。</p><p><strong>保存状态（Saved State）</strong><br>该字段保存了单字节标志，描述了系统是否处于保存状态。如果硬盘处于保存状态该值被置1。如压缩和扩展的操作在保存状态下的硬盘上无法执行。</p><p><strong>保留字段（Reserved）</strong><br>该字段大小为427字节，均置零。</p><h1 id="动态磁盘文件头格式"><a href="#动态磁盘文件头格式" class="headerlink" title="动态磁盘文件头格式"></a>动态磁盘文件头格式</h1><p>对于动态和差分磁盘映像，映像文件尾的“数据偏移”字段指向一个次级结构，该结构提供了有关磁盘映像的附加信息。动态磁盘文件头应出现在扇区（512字节）边界上。<br>动态磁盘文件头格式如下表所列。</p><div class="table-container"><table><thead><tr><th>动态硬盘文件头字段</th><th>大小（字节）</th></tr></thead><tbody><tr><td>标识符</td><td>8</td></tr><tr><td>数据偏移</td><td>8</td></tr><tr><td>表偏移</td><td>8</td></tr><tr><td>文件头版本</td><td>8</td></tr><tr><td>最大表项数</td><td>4</td></tr><tr><td>块大小</td><td>4</td></tr><tr><td>校验和</td><td>4</td></tr><tr><td>父唯一标识</td><td>16</td></tr><tr><td>父时间戳</td><td>4</td></tr><tr><td>保留字段</td><td>4</td></tr><tr><td>父Unicode名称</td><td>512</td></tr><tr><td>父定位器项1</td><td>24</td></tr><tr><td>父定位器项2</td><td>24</td></tr><tr><td>父定位器项3</td><td>24</td></tr><tr><td>父定位器项4</td><td>24</td></tr><tr><td>父定位器项5</td><td>24</td></tr><tr><td>父定位器项6</td><td>24</td></tr><tr><td>父定位器项7</td><td>24</td></tr><tr><td>父定位器项8</td><td>24</td></tr><tr><td>保留字段</td><td>256</td></tr></tbody></table></div><p><strong>动态磁盘文件头字段描述</strong><br>下文提供了动态磁盘文件头字段的详细定义。</p><p><strong>标识符</strong><br>该字段保存值“cxsparse”。该字段标识文件头。</p><p><strong>数据偏移</strong><br>该字段包含到硬盘映像中下一结构的绝对字节偏移。当前未被现有格式使用，应置0xFFFFFFFF。</p><p><strong>表偏移（Table Offset）</strong><br>该字段在文件中存储块分配表（BAT）的绝对字节偏移。</p><p><strong>文件头版本（Header Version）</strong><br>该字段分为主/次版本，并与创建文件时的规范版本相匹配。两高位字节为主版本，低位字节为次版本。必须与文件格式规范相匹配。当前规范下，字段需初始化为<code>0x00010000</code>。<br>主版本仅当文件格式进行不兼容旧版本的修改时才会递增。</p><p><strong>最大表项数（Max Table Entries）</strong><br>该字段保存BAT中呈现的最大表项数。应等于磁盘中的块数（磁盘大小除以块大小）。</p><p><strong>块大小（Block Size）</strong><br>块是动态和差分硬盘扩展的单位，以字节数的形式存储。大小并不包括块位图的大小，只包含区块数据段的大小。每块的扇区数必须始终是2的幂。默认值为<code>0x00200000</code>（表示块大小为2MB）。</p><p><strong>校验和</strong><br>该字段保存硬盘文件头的基本校验和，是文件头中除校验和以外其他所有字段之一的补码。如果校验和验证失败，文件应当被认为已损坏。</p><p><strong>父唯一标识（Parent Unique ID）</strong><br>该字段用于差分硬盘。差分硬盘存储了父硬盘的128位UUID。关于更多信息，见后文“创建差分硬盘映像”。</p><p><strong>父时间戳（Parent Time Stamp）</strong><br>该字段存储了父硬盘的修改时间戳。数据是从UTC/GMT 2000年1月1日 12：00：00 AM开始的秒数。</p><p><strong>保留字段</strong><br>该字段需置零。</p><p><strong>父Unicode名称（Parent Unicode Name）</strong><br>字段包含一个父硬盘文件名的Unicode字符串（UTF-16）。</p><p><strong>父定位器项（Parent Locator Entries）</strong><br>这些项在文件中存储绝对字节偏移，其中存储了差分硬盘的父定位器。该字段仅在差分硬盘中使用，并在动态硬盘中应被置零。</p><p>每个定位器项含有字段如下表所示。</p><div class="table-container"><table><thead><tr><th>父定位器表字段</th><th>大小（字节）</th></tr></thead><tbody><tr><td>平台码</td><td>4</td></tr><tr><td>平台数据空间</td><td>4</td></tr><tr><td>平台数据长度</td><td>4</td></tr><tr><td>保留</td><td>4</td></tr><tr><td>平台数据偏移</td><td>8</td></tr></tbody></table></div><p><strong>平台码（Platform Code）</strong>。平台码描述了用于文件定位器的平台特定格式。对于Windows,文件定位器以路径存储（例如“c:\disksimages\ParentDisk.vhd”）。在Macintosh系统上，文件定位器是一个包含“替身”的二进制大对象（blob）。父定位器表用于支持跨平台移动硬盘映像。</p><p>一些当前的平台码如下所示：</p><div class="table-container"><table><thead><tr><th>平台码</th><th>描述</th></tr></thead><tbody><tr><td>空（0x0）</td><td></td></tr><tr><td>Wi2r(0x57693272)</td><td>[弃用]</td></tr><tr><td>Wi2k(0x5769326B)</td><td>[弃用]</td></tr><tr><td>W2ru(0x57327275)</td><td>Windows上相对差分磁盘路径名的Unicocde路径名（UTF-16）</td></tr><tr><td>W2ku(0x57326B75)</td><td>Windows上绝对Unicode（UTF-16）路径名</td></tr><tr><td>Mac (0x4D616320)</td><td>（Mac OS以blob形式存储的替身）</td></tr><tr><td>MacX(0x4D616358)</td><td>符合RFC 2396的UTF-8编码的文件URL</td></tr></tbody></table></div><p><strong>平台数据空间（Platform Data Space）</strong>。该字段存储了存储父硬盘定位器所需的512字节的扇区数。<br><strong>平台数据长度（Platform Data Length）</strong>。该字段以字节数的形式存储了父硬盘定位器的实际长度。<br><strong>保留字段</strong>。该字段需置零。<br><strong>平台数据偏移（Platform Data Offset）</strong>。该字段以字节形式存储了平台特定文件定位器存储位置的绝对字节偏移。</p><p><strong>保留字段</strong><br>该字段需置零。</p><h1 id="块分配表和数据块"><a href="#块分配表和数据块" class="headerlink" title="块分配表和数据块"></a>块分配表和数据块</h1><p>块分配表（BAT）是一张绝对扇区偏移的表，包含在硬盘映像文件中，由动态磁盘文件头的“表偏移”字段指向。<br>BAT的大小在创建硬盘时计算。BAT中的表项数是完整扩展时需要用于存储磁盘内容的块数。例如，一个使用2MB块的2GB磁盘映像需要1024个BAT表项。每个表项长四字节。所有未使用表项初始化为0xFFFFFFFF。<br>BAT总是扩展到扇区边界。动态磁盘文件头中的“最大表项数”字段显示有多少表项是有效的。</p><p>BAT每个中每个表项代表磁盘映像中的一个块。<br><img src="map.png" alt="映射关系" title="映射关系"></p><p>数据块由一个扇区位图和数据组成。对于动态磁盘，扇区位图展现了哪些扇区含有有效数据（1）以及哪些扇区没有被修改（0）过。对于差分磁盘，扇区位图展现了哪些扇区存在于差分磁盘中（1）和哪些扇区存在于父磁盘（0）中。位图需要填充到512字节扇区边界。<br>每个块的大小是扇区大小的二的整数次幂倍。默认情况下，块是4096个512字节的扇区（2MB）。一个映像中块的大小必须相等。大小由动态磁盘文件头中的“块大小”字段规定。<br>所有在位图中标记为零的块内扇区，其在磁盘上存储的必须512字节全为零。访问磁盘映像的软件可利用此假设优化性能。<br><strong>注</strong>：即使格式支持不同的块大小，微软虚拟PC 2004和虚拟服务器 2005目前只测试了512K和2MB的块大小。</p><h1 id="动态磁盘实现"><a href="#动态磁盘实现" class="headerlink" title="动态磁盘实现"></a>动态磁盘实现</h1><p>块依据需求分配。创建动态磁盘时，最初没有块被分配。一个新创建的映像只包含如前所述的数据结构（包括动态磁盘文件头和BAT）。<br>数据被写入映像时，动态磁盘扩展出一个新的块。BAT也会更新，以包含映像中分配的每一个新块。</p><h1 id="映射磁盘扇区到块扇区"><a href="#映射磁盘扇区到块扇区" class="headerlink" title="映射磁盘扇区到块扇区"></a>映射磁盘扇区到块扇区</h1><p>下面的公式可用于根据给出的扇区数计算块数：</p><script type="math/tex; mode=display">块号 = floor(全局扇区数 / 每块的扇区数)</script><script type="math/tex; mode=display">块内扇区号 = 全局扇区数 % 每块扇区</script><p><em>块号</em>用作BAT中的索引。BAT表项包含块数据后的块位图的绝对扇区偏移。下面的公式可用于计算数据的位置：</p><script type="math/tex; mode=display">实际扇区位置 = BAT[块号]+块位图所占扇区数+块内扇区号</script><p>通过这种方法，块可按任意顺序分配，同时通过BAT维持其逻辑序列。<br>一个块被分配时，映像文件尾必须被移动到文件的结尾。文件的扩展部分需置零。</p><h1 id="分割硬盘映像"><a href="#分割硬盘映像" class="headerlink" title="分割硬盘映像"></a>分割硬盘映像</h1><p>如果磁盘映像的大小超过主机文件系统支持的最大文件大小，微软虚拟服务器 2005之前的版本支持拆分磁盘映像。<br>一些文件系统，例如FAT32文件系统，在文件大小上有4GB的限制。如果硬盘映像扩展到超过4GB,微软虚拟PC 2004及之前的版本将会将硬盘映像分割到另一个文件中。分割出来的文件不含有文件头和文件尾，只含有纯数据。只有最后一个文件的结尾存储文件尾。分割的磁盘中的第一个文件扩展名为.vhd。后续的分割文件使用<em>.v01</em>、<em>.v02</em>……作为文件扩展名。分割文件将被放在主硬盘映像的同一目录。映像分割分割出来的文件最多可以有64个。分割文件的大小无法改变。</p><h1 id="实现差分硬盘"><a href="#实现差分硬盘" class="headerlink" title="实现差分硬盘"></a>实现差分硬盘</h1><p>差分硬盘自身内部存储着父硬盘的文件定位器。当虚拟机试图打开一个差分硬盘时，差分硬盘和父硬盘都会被打开。父硬盘同样可以是一块差分硬盘，在这种情况下，可能会形成一个由多个差分硬盘组成的链条，最终以一个非差分硬盘作为终点。<br>为了能够跨平台移动硬盘，硬盘格式设计为允许同时存储用于不同平台的父硬盘的文件定位器。<br>父定位器表仅由差分硬盘使用，见前文“动态硬盘文件头格式”所述。父定位器表为存储在文件中的每一个父文件定位器存储了一份平台码。虚拟机会读取当前平台所对应的父文件定位器并打开硬盘映像。<br>在Windows系统上，有两种平台定位器<strong>W2ku</strong>和<strong>W2ru</strong>。前者是父硬盘的绝对路径名，后者是父硬盘相对差分硬盘的路径名。<br>例如，一个位于系统分区的父硬盘映像在一台典型的基于Windows的机器上存储方式如下所示：</p><div class="table-container"><table><thead><tr><th>类型</th><th>示例</th></tr></thead><tbody><tr><td>W2ku</td><td>c:\directory\parent.vhd</td></tr><tr><td>W2ru</td><td>.\directory\parent.vhd</td></tr></tbody></table></div><p>例如，在典型的基于苹果Macintosh的机器上，父硬盘映像存储方式如下所示：</p><div class="table-container"><table><thead><tr><th>类型</th><th>示例</th></tr></thead><tbody><tr><td>Mac</td><td>（Mac OS上替身以blob形式存储）</td></tr><tr><td>MacX</td><td>file://localhost/directory/parent.vhd</td></tr></tbody></table></div><p>相对路径名的优点是允许将差分硬盘和父硬盘移到不同的位置。而采用绝对路径，无论何时移动父硬盘，父硬盘和子硬盘都要显式地重新连接。<br>差分硬盘创建时，如果可能，应当在各自的平台上初始化两种类型的平台定位器路径。<br><strong>注</strong>：微软虚拟PC 2004之前的版本只存储绝对路径名。</p><h1 id="差分硬盘的写操作"><a href="#差分硬盘的写操作" class="headerlink" title="差分硬盘的写操作"></a>差分硬盘的写操作</h1><p>进行写操作，所有数据被写入差分硬盘映像。凡是被写入某个块的扇区，在位图上都会被标为非空。</p><h1 id="差分硬盘的读操作"><a href="#差分硬盘的读操作" class="headerlink" title="差分硬盘的读操作"></a>差分硬盘的读操作</h1><p>当虚拟机读取硬盘映像扇区，差分硬盘子系统检查差分硬盘中的块位图。差分硬盘子系统从差分硬盘中读取被标记为非空的扇区和父硬盘中被标记为空的扇区。<br>例如，考虑一个在父硬盘映像和子硬盘映像中都包含扇区4096到8191的块。第一个扇区中存储了块的位图。下图中的每个单元格代表位图中的一个位，黑点表示该块中的特定扇区已被虚拟机写入。<br><img src="read.png" alt="读操作" title="读操作"><br>如果虚拟机发出读取扇区4098到4104的操作，差分硬盘子系统将从父硬盘块中读取扇区 4098到4101，并从子块中读取扇区4102到4104。<br>如果虚拟机发出写入扇区4102到4106的操作，则所有数据都会写入到子块中，并且位图中对应子块的4105和4106号扇区的部分将被标记为非空。</p><h1 id="父硬盘映像的识别"><a href="#父硬盘映像的识别" class="headerlink" title="父硬盘映像的识别"></a>父硬盘映像的识别</h1><p>每个硬盘拥有存在硬盘文件尾的UUID。差分硬盘创建时，在差分硬盘内部存储父硬盘的UUID。UUID和父硬盘的名称被用于识别父硬盘。</p><h1 id="父硬盘映像的修改"><a href="#父硬盘映像的修改" class="headerlink" title="父硬盘映像的修改"></a>父硬盘映像的修改</h1><p>在父硬盘的差分硬盘创建后，父硬盘将不会被修改。修改父硬盘会使差分硬盘状态失效。为避免这种情况，父硬盘的修改日期被存放在差分硬盘结构中。</p><p>为确保存在有效的父-子硬盘关系，父硬盘UUID和父硬盘修改日期都需要检查。</p><h1 id="附录：CHS计算"><a href="#附录：CHS计算" class="headerlink" title="附录：CHS计算"></a>附录：CHS计算</h1><p>CHS计算基于磁盘映像的总扇区数。</p><p><strong>CHS计算</strong></p><div class="table-container"><table><thead><tr><th>CHS计算的变量</th><th>描述</th></tr></thead><tbody><tr><td>totalSectors</td><td>磁盘映像的数据扇区总数</td></tr><tr><td>cylinders</td><td>磁盘的柱面数</td></tr><tr><td>heads</td><td>磁盘的磁头总数</td></tr><tr><td>sectorsPerTrack</td><td>磁盘的每磁道扇区数</td></tr><tr><td>cylinderTimesHead</td><td>柱面数 x 磁头数</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">                    C      H    S</span><br><span class="line">if (totalSectors &gt; 65535 * 16 * 255)</span><br><span class="line">&#123;</span><br><span class="line">totalSectors = 65535 * 16 * 255;</span><br><span class="line">&#125;</span><br><span class="line">if (totalSectors &gt;= 65535 * 16 * 63)</span><br><span class="line">&#123;</span><br><span class="line">sectorsPerTrack = 255;</span><br><span class="line">heads = 16;</span><br><span class="line">cylinderTimesHeads = totalSectors / sectorsPerTrack;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">sectorsPerTrack = 17;</span><br><span class="line">cylinderTimesHeads = totalSectors / sectorsPerTrack;</span><br><span class="line">heads = (cylinderTimesHeads + 1023) / 1024;</span><br><span class="line">if (heads &lt; 4)</span><br><span class="line">&#123;</span><br><span class="line">heads = 4;</span><br><span class="line">&#125;</span><br><span class="line">if (cylinderTimesHeads &gt;= (heads * 1024) || heads &gt; 16)</span><br><span class="line">&#123;</span><br><span class="line">sectorsPerTrack = 31;</span><br><span class="line">heads = 16;</span><br><span class="line">cylinderTimesHeads = totalSectors / sectorsPerTrack;</span><br><span class="line">&#125;</span><br><span class="line">if (cylinderTimesHeads &gt;= (heads * 1024))</span><br><span class="line">&#123;</span><br><span class="line">sectorsPerTrack = 63;</span><br><span class="line">heads = 16;</span><br><span class="line">cylinderTimesHead = totalSectors / sectorsPerTrack;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cylinders = cylinderTimesHead / heads;</span><br></pre></td></tr></table></figure><p><strong>校验和计算</strong></p><div class="table-container"><table><thead><tr><th>校验和计算的变量</th><th>描述</th></tr></thead><tbody><tr><td>driveFooter</td><td>保存磁盘文件尾的变量</td></tr><tr><td>checksum</td><td>存储校验和数值的变量</td></tr><tr><td>driveFooterSize</td><td>driveFooter结构的大小</td></tr><tr><td>counter</td><td>本地计数器</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">checksum = 0;</span><br><span class="line">driveFooter.Checksum = 0;</span><br><span class="line">for (counter = 0 ; counter &lt; driveFooterSize ; counter++)</span><br><span class="line">&#123;</span><br><span class="line">checksum += driveFooter[counter];</span><br><span class="line">&#125;</span><br><span class="line">driveFooter.Checksum = ~checksum;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">微软技术文档（翻译：稗田阿柔），2006年10月11日 - 版本1.0</summary>
    
    
    
    <category term="zh-CN" scheme="https://hiedanoajuu.github.io/categories/zh-CN/"/>
    
    <category term="计算机" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="汇编语言" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Nasm" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/Nasm/"/>
    
    
    <category term="渣翻" scheme="https://hiedanoajuu.github.io/tags/%E6%B8%A3%E7%BF%BB/"/>
    
    <category term="计算机" scheme="https://hiedanoajuu.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>东方梦绡集 ～ Fragments of Dream</title>
    <link href="https://hiedanoajuu.github.io/2025/06/09/th-msk/"/>
    <id>https://hiedanoajuu.github.io/2025/06/09/th-msk/</id>
    <published>2025-06-09T11:20:20.000Z</published>
    <updated>2025-07-30T05:28:36.602Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创作声明"><a href="#创作声明" class="headerlink" title="创作声明"></a>创作声明</h1><ul><li>本作品为《东方Project》二次创作同人小说，原作版权归属上海爱丽丝幻乐团及博丽神主ZUN先生,遵照<a href="https://www.bilibili.com/opus/400555526272745308">东方Project使用规定案</a>发布；</li><li>本作品原创内容(原创角色、情节及世界观扩展)采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en">CC BY-NC-SA 4.0</a>协议； </li><li>禁止AI训练/NFT化/未授权盈利性使用；</li><li>转载须标注原作者笔名：<strong>稗田阿柔</strong>；</li></ul><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><p>我的灵感消失得像是京都的秋那样的迅速。<br>那时我正为我的研究生论文而焦头烂额，已改到第七遍了。导师在我的身后紧盯着屏幕。窗外的天与电脑里的「文化症候」在比着谁更阴暗。</p><p>「赫恩，你知道我为什么不建议学生学习精神分析吗？」<br>「因为它不科学？」<br>我睁开朦胧的眼，忍不住打了个哈欠。<br>「不，是因为它让我的学生也变得不科学。」<br>导师的眉头紧锁着，从我的论文草稿中摘出来一句读道。<br>「当下精神疾病的流行趋势本质上反映了现代社会发展进程中的一类文化症候。这句话是人写的？」<br>我睁大眼睛看向他，流露出无辜之色。</p><p>「赫恩，再这样下去可是毕不了业啊。」<br>导师叹了口气。<br>「依我看你还是缺少临床经验。这样吧，我介绍你到东京都xx精神病院交流学习一下。到你论文写完为止，怎么样？」</p><p>「你是想让我毕业还是入院？」<br>我一脸无奈地看着他。<br>「你爱怎么理解怎么理解，反正，和病人接触本来就是精神分析学者研究的一部分。」<br>导师笑道。</p><p>「这么说，你导师把你赶到东京去陪精神病人玩？」<br>「嗯。」<br>我怯怯地点点头。</p><p>「哈哈，我倒要看看我们的梅莉要怎么当精神病院的女王。」<br>莲子努力咬住自己的嘴唇，但还是忍俊不禁道。<br>「你要再这么贫嘴，小心我剜了你的脑干，让你再也说不了话。」<br>我的脸上传来一阵灼烧感，忍不住低下头去。</p><p>「哎呀，梅莉，你总是这样。好好好，我不说了。」<br>莲子收起了脸上的笑意，很认真地说道，<br>「不过，如果梅莉要去东京，我倒想跟着。」</p><p>「莲子跟着也好，我也有个照应。」<br>这时我才得以再次抬起头来，莲子已经在收拾行李了。</p><p>到了出发的那一天，八点二十五分<sup><a href="#fn_0" id="reffn_0">0</a></sup>的京都驿已有下车乘客的脚步在回荡。<br>我焦头烂额地看着手表。离发车的钟声敲响只剩五分钟不到，莲子才姗姗来迟，拖着行李箱走过进站口。<br>虽然早就知道莲子是爱迟到的性子，但到约定的时间看不到莲子的身影还是要急得跺脚。</p><p>「真是不巧呢，梅莉，到得晚了点。」<br>莲子摘掉阳帽，擦擦额头的汗水。<br>「没事，莲子，还有五分钟才发车呢。快点去检票吧」<br>我看着她，皱紧的眉头终于舒展开来。毕竟，能与友人一同出行总归是愉快的。</p><p>往相反方向的列车像煮饺子般挤满了人，而往东京方向的列车很空，两个人可以面对面坐在四人座上。我一般会靠窗而坐。<br>「梅莉，你看，富士山还是那么庄严。」<br>莲子指着窗户，望向富士山。<br>说是「窗」，其实不过是一遍遍放映着广重<sup><a href="#fn_1" id="reffn_1">1</a></sup>的富士三十六景的硕大的电子屏罢了，几乎覆盖了整个侧壁。<br>「只能看这些虚假的景色还真是无趣啊。」<sup><a href="#fn_2" id="reffn_2">2</a></sup></p><p>又要想起以前和莲子一起坐旧东海道新干线的时候。看着窗外在眼前不断变换着的景色，真有如梦一般的恍惚感。<br>「你知道吗？按照爱因斯坦的相对论，高速移动的物体其实会让时间变慢——也就是所谓的时间膨胀。」<br>那时莲子一脸神秘地看着我。<br>「也就是说，我们透过窗户看到的景物，看到的其实是它们未来的样貌？」<br>我靠在窗边，眼神渐渐迷离。<br>「理论上是这样，但这列车的速度离光速还差远了呢。」<br>「可是，对古人而言，这种速度恐怕已经像是做梦一般了吧。」</p><p>「说来，其实莲子不只是想陪我吧。我看你从前天一直兴奋到现在。」<br>我突然凝视莲子。<br>「被看穿啦？其实，我是想去拜访东京大学的冈崎<sup><a href="#fn_3" id="reffn_3">3</a></sup>教授，她可是统一场论响当当的反对者。」<br>莲子看着我，狡黠一笑。<br>「真的只是为了去拜访一位教授吗？」<br>「才不是呢，还要拜访秋叶原、富士山……毕竟，东京是我的家乡嘛。」<br>我看着她满怀期待的眼神，不加分辨地点头。</p><p>53分钟说短不短。与莲子无话时，我总是信手翻翻此行随身携带的那个笔记本。<br>「梅莉，在看什么呢？」<br>莲子一脸好奇地看着我。<br>「这是我父亲留下来的笔记哦，我只是无聊时读来解闷罢了。」<br>我翻开笔记本，向莲子指着父亲留下的签名。</p><p>「L·赫恩？」<br>莲子瞪大了眼，<br>「你父亲为什么连名字都要隐藏？」<br>「不知道，我的父亲在我很小的时候就病逝了，听人说他是个心理医生。」<br>我很平淡地说道。</p><p>53分钟说长不长。列车的速度渐渐放缓下来，但听不到车轮与轨道摩擦的咔嗒声。<br>「看来是要到了。」<br>莲子背起她的双肩包，从座位上起身。<br>「说实话，莲子，我一直搞不明白磁悬浮列车是怎样刹车的。」<br>我吸了一口气，向莲子开口道。<br>「其实是有涡流啦，不过，你就当它是用念力停下来的吧。」<br>莲子笑道。</p><p>广重列车在东京驿的地下站台前终于站住了脚步，广播中机械的女声将我从笔记中拉回了现实。<br>「梅莉，到了呢，东京。」<br>梅莉伸了个懒腰，把行李箱拖出来。<br>「莲子，你想先去哪里？要不先去东大？」<br>「那个明天再说吧，今天当然是要好好感受一下东京的空气。」</p><p>卯酉新干线几乎全程都位于百米深的地下——为了避开东京错综复杂的地下世界。上升的电梯似乎永远都不会停下。鼓膜上的咔嗒声像是在提醒我高度的变化。<br>电梯终于停止了上升，门缓缓打开，扑面而来的便是城市的喧嚣。<br>「东京好吵啊……」<br>「这才不叫吵，这是活着的声音。走啦，梅莉，东京才不会等你这种慢性子。」</p><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><p>莲子说东京<sup><a href="#fn_4" id="reffn_4">4</a></sup>是一座不会睡的城市；我却说，东京是一场不会醒的梦。</p><p>千代田区肃穆而庄严，远远能望见那座矗立的皇居，被围墙和翠绿的园林包围。<br>「那里曾经是天皇的住处，现在已经被改成了旅游景点，听说还可以在御座上拍照呢。」<br>莲子漫不经心地说道，历史仿佛只是供人拍照的舞台布景。</p><p>台东区最著名的就是秋叶原电器街了，手办、徽章、等身抱枕摆满了货架与橱窗——那些二次元人物几乎全部是我素未谋面的。<br>「他们就是这样，榨干每一个角色的商业价值，然后再丢掉。」<br>莲子撇撇嘴，京大物理系著名宅女在此点评道。<br>「不过，总有些东西会被记住的，不是吗？」<br>我隔着橱窗玻璃看着那一张张永远带着笑容的PVC脸。</p><p>中央区的银座，每座大楼的橱窗中都展示着本季最新的西装、手表、香水，但我看不出来它们之间又有什么区别。<br>「快看，这是当前东京最流行的颜色，境界紫哦。」<br>路过的人群低声交谈着，指着我的衣服。<br>这时所有的主牌广告的色调突然又很默契地切换成黑色。<br>「快看快看，这才是最新的颜色，格林尼治黑。」<br>人群又用一模一样的语气对着莲子说道。</p><p>港区的东京塔还残存着昭和时代对未来的幻想。我原以为登上塔后能像画报中那样能看到东京的全景，但东京塔早就被一堆比它要高得多的摩天楼包裹在里面。<br>「东京塔在1958年竣工的时候可是东京最高的建筑哦。我爷爷说，那时的人们还觉得高度代表着希望。」<br>莲子回忆道。<br>「现在呢，高度代表什么？」<br>「更贵的租金。」</p><p>涩谷区的十字路口是风暴潮的中心，我几乎分不清自己是在被莲子拉着走还是在被人推着走。<br>「这地方，很容易走丢吧，被人流挤到不同的方向。」<br>为了让莲子能听到，我把声音提高了几分。<br>「所以啊，梅莉你可要小心点，别被东京吞没了。」<br>我从嘈杂中竭尽全力地辨认出莲子的声音。</p><p>新宿区的广告牌绝对不是给人看的，字幕滚动的速度远远超出了我的理解能力。<br>「一看就是没有在东京生活过，读这东西可是有诀窍的，我给你演示一下。」<br>莲子一脸狡黠地看着我，然后望向远处的广告牌，嘴唇像是在动，却吐不出一个字。</p><p>最后是文京区，和前面几个地方相比，文京区安静得像是未寄出的明信片一般。<br>因此，莲子把旅店选在了这里——当然，也有可能是离东大比较近。</p><p>安放好行李后，我瘫倒在床上，脑海中还是闪烁着电子屏幕的光芒。<br>「怎么样，东京很有意思吧。」<br>莲子看着我疲惫的样子，问道。<br>「嗯。」<br>我摘掉帽子，头发散在床单上。<br>「东京的夜生活更是有意思呢。你知道吗？东京是座不会睡觉的城市。」<br>莲子冲我眨眨眼，不过这时我应该已经合眼了。<br><strong>待续。</strong></p><blockquote id="fn_0"><sup>0</sup>. 参考JR东海道新干线时刻表 <a href="https://japantravel.navitime.com/zh-cn/area/jp/depArrTimeList/">https://japantravel.navitime.com/zh-cn/area/jp/depArrTimeList/</a><a href="#reffn_0" title="Jump back to footnote [0] in the text."> &#8617;</a></blockquote><blockquote id="fn_1"><sup>1</sup>. 即歌川广重，日本浮世绘画家；<a href="#reffn_1" title="Jump back to footnote [1] in the text."> &#8617;</a></blockquote><blockquote id="fn_2"><sup>2</sup>. 见《卯酉东海道》；<a href="#reffn_2" title="Jump back to footnote [2] in the text."> &#8617;</a></blockquote><blockquote id="fn_3"><sup>3</sup>. 即冈崎梦美，见《东方梦时空》；<a href="#reffn_3" title="Jump back to footnote [3] in the text."> &#8617;</a></blockquote><blockquote id="fn_4"><sup>4</sup>. 本篇的东京以上海为印象（作者没去过东京）；<a href="#reffn_4" title="Jump back to footnote [4] in the text."> &#8617;</a></blockquote>]]></content>
    
    
    <summary type="html">东方Project同人创作轻小说。献给那些守在过楼梯口的人。更新时间 2025-06-09</summary>
    
    
    
    <category term="zh-CN" scheme="https://hiedanoajuu.github.io/categories/zh-CN/"/>
    
    <category term="东方Project" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E4%B8%9C%E6%96%B9Project/"/>
    
    
    <category term="东方Project" scheme="https://hiedanoajuu.github.io/tags/%E4%B8%9C%E6%96%B9Project/"/>
    
    <category term="二次创作" scheme="https://hiedanoajuu.github.io/tags/%E4%BA%8C%E6%AC%A1%E5%88%9B%E4%BD%9C/"/>
    
    <category term="秘封组" scheme="https://hiedanoajuu.github.io/tags/%E7%A7%98%E5%B0%81%E7%BB%84/"/>
    
    <category term="轻悬疑" scheme="https://hiedanoajuu.github.io/tags/%E8%BD%BB%E6%82%AC%E7%96%91/"/>
    
  </entry>
  
  <entry>
    <title>课程设计2:计算机引导程序</title>
    <link href="https://hiedanoajuu.github.io/2025/05/03/masm-bootloader/"/>
    <id>https://hiedanoajuu.github.io/2025/05/03/masm-bootloader/</id>
    <published>2025-05-03T07:22:34.000Z</published>
    <updated>2025-07-30T05:26:14.362Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目情景"><a href="#项目情景" class="headerlink" title="项目情景"></a>项目情景</h1><p>开机后，CPU自动进入到<code>FFFF</code>:<code>0</code>单元处执行，此处有一条<code>jmp</code>指令。CPU执行该指令后，转去执行BIOS中的硬件系统检测和初始化程序。</p><p>初始化程序将建立BIOS所支持的中断向量，即将BIOS提供的中断例程的入口地址登记在中断向量表中。<br>硬件系统检测和初始化完成后，调用<code>int 19h</code>进行操作系统的引导。<br>如果设置从软盘启动操作系统，则<code>int 19h</code>将主要完成以下任务：</p><ol><li>控制0号软驱(A)，读取软盘0道0面1扇区至<code>0</code>:<code>7C00</code>；</li><li>将<code>CS</code>:<code>IP</code>指向<code>0</code>:<code>7C00</code>；</li></ol><p>软盘的0面0道1扇区装有操作系统引导程序。<code>int 19h</code>将其装到<code>0</code>:<code>7C00</code>处后，设置CPU从此处开始执行引导程序，操作系统被激活，控制计算机。</p><p>详细过程如下图所示：<br><img src="BIOS.svg" alt="BIOS启动流程" title="BIOS启动流程"><br><strong>这个图是笔者随便画的。</strong></p><p>如果0号软驱中没有软盘，或者软盘发生读写错误，则<code>int 19h</code>进行下列操作：</p><ol><li>读取硬盘C的0道0面1扇区的内容到<code>0</code>:<code>7C00</code>；</li><li>将<code>CS</code>:<code>IP</code>指向<code>0</code>:<code>7C00</code>；</li></ol><p>这次课程设计的任务是编写一个可以自行启动计算机，不需要在现有操作系统环境中运行的程序。</p><p>该程序的功能如下：</p><ol><li><p>列出功能选项，让用户通过键盘进行选择，界面如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1) reset pc     ;重新启动计算机</span><br><span class="line">2) start system ;引导现有操作系统</span><br><span class="line">3) clock        ;进入时钟程序</span><br><span class="line">4) set clock    ;设置时间</span><br></pre></td></tr></table></figure></li><li><p>用户输入<code>1</code>后重新启动计算机（提示：考虑<code>0FFFF</code>:<code>0</code>单元）；</p></li><li>用户输入<code>2</code>后引导现有操作系统（提示：考虑C盘0道0面1扇区）；</li><li>用户输入<code>3</code>后执行动态显示当前日期、时间的程序。<br>   显示格式如下：年/月/日 时:分:秒<br>   进入此项功能后，一直动态显示当前的时间，在屏幕上将出现时间按秒变化的效果（提示：循环读取CMOS）；<br>   按下<code>F1</code>后改变显示颜色；按下<code>ESC</code>返回主选单（提示：利用键盘中断）。</li><li>用户输入<code>4</code>后可更改当前的日期、时间，更改后返回到主选单（提示：输入字符串）；</li></ol><p>下面给出几点建议：</p><ol><li>在DOS下编写安装程序，在安装程序中包含任务程序；</li><li>运行安装程序，将任务程序写到软盘上；</li><li>若要任务程序可以在开机后自动执行，要将它写到软盘的0道0面0扇区。如程序长度大于<code>512B</code>，则需要用多个扇区存放。这种情况下，处于软盘0道0面1扇区中的程序就必须负责将其他扇区中的内容读入内存；</li></ol><p>这个程序较为复杂，它用到了我们学到的所有技术，需要进行仔细的分析和耐心的调试。这个程序对于我们的整个学习过程是具有总结性的，希望读者能够尽力完成。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>这个题目看起来非常复杂，然而实际上也是极其复杂的。</p><p>首先，一个扇区(<code>512B</code>)肯定是无法容纳这么多功能的，我们需要提前将每个扇区中存放什么东西规划好:</p><ol><li><strong>扇区1</strong>: 存放<strong>主程序</strong>和主选单文本；</li><li><strong>扇区2</strong>: 存放需要用到的<strong>子程序</strong>；</li><li><strong>扇区3</strong>: 存放自己编写的<strong>中断例程</strong>；</li></ol><p>其次，<code>debug</code>在这里是用不了的。<code>debug</code>根本承受不住软盘<code>1.44MB</code>的容量，如果试图强行打开只会喜提报错。</p><p><img src="error8.png" alt="Extended Error 8" title="Extended Error 8"><br><code>Extended Error 8</code>义为”没有足够的内存来完成请求的操作”，接下来就只能靠颅内<code>debug</code>了。</p><h1 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h1><h2 id="主选单"><a href="#主选单" class="headerlink" title="主选单"></a>主选单</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">; 引导程序主程序 (扇区 1)</span><br><span class="line">main:</span><br><span class="line">    ; 0(后面这种单个数字是编译后相对0:7C00的偏移地址)</span><br><span class="line">    jmp short display</span><br><span class="line">    ; 2</span><br><span class="line"></span><br><span class="line">    ; 主页面文字</span><br><span class="line">    text db &quot;BootLoader By Hiedano Ajuu&quot;,0ah,&quot;1) reset pc&quot;,0ah,&quot;2) start system&quot;,0ah,&quot;3) clock&quot;,0ah,&quot;4) set clock&quot;,0</span><br><span class="line">    ; &quot;引导程序，稗田阿柔&quot;</span><br><span class="line">    ; &quot;1) 重启计算机&quot;</span><br><span class="line">    ; &quot;2) 启动系统&quot;</span><br><span class="line">    ; &quot;3) 时钟&quot;</span><br><span class="line">    ; &quot;4) 设置时钟&quot;</span><br></pre></td></tr></table></figure><p>主页面的文字，姑且在这里署个名。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">display:</span><br><span class="line">    ; 从软盘载入子程序</span><br><span class="line">    mov ax,0</span><br><span class="line">    mov es,ax</span><br><span class="line">    mov bx,7c00h+512    ; 扇区1 + 512B</span><br><span class="line"></span><br><span class="line">    mov ah,2    ; BIOS:读取扇区</span><br><span class="line">    mov al,1</span><br><span class="line">    mov ch,0</span><br><span class="line">    mov cl,2    ; 扇区2</span><br><span class="line">    mov dh,0</span><br><span class="line">    mov dl,0</span><br><span class="line"></span><br><span class="line">    int 13h</span><br><span class="line"></span><br><span class="line">    mov bx,7c00h+1024   ; 扇区2 + 1024B</span><br><span class="line">    mov ah,2</span><br><span class="line">    mov al,1</span><br><span class="line">    mov ch,0</span><br><span class="line">    mov cl,3</span><br><span class="line">    mov dh,0</span><br><span class="line">    mov dl,0</span><br><span class="line"></span><br><span class="line">    int 13h</span><br></pre></td></tr></table></figure><br>利用BIOS中断<code>int 13h</code>将软盘的其余两个分区读入内存；<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">call clear  ; 清屏</span><br><span class="line"></span><br><span class="line">; 展示菜单</span><br><span class="line">mov ax,0</span><br><span class="line">mov ds,ax</span><br><span class="line">mov si,0a0h  ; 屏幕位置 (换一行)</span><br><span class="line">mov di,7c02h ; 文本所在地址</span><br><span class="line">call printf</span><br></pre></td></tr></table></figure><br>清屏后展示主选单文本，这里的<code>clear</code>和<code>printf</code>子程序与之前的<a href="https://hiedanoajuu.github.io/2025/01/25/power-idea/">课程设计1</a>程序相差不大；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">call install_int ; 安装中断例程</span><br><span class="line">; 等待中断</span><br><span class="line">hold_m:</span><br><span class="line">    nop</span><br><span class="line">jmp short hold_m</span><br></pre></td></tr></table></figure><p>安装中断例程并等待中断<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org offset main + 510</span><br><span class="line">dw 0aa55h   ; 启动扇区标志</span><br></pre></td></tr></table></figure><br>用<code>org</code>空出剩余字节，实现分扇区；<br><strong>注意</strong>:结尾需要加<code>0aa55h</code>，不然BIOS才不会拿你当启动扇区呢。</p><p>主选单中<code>call</code>了几个子程序：<code>clear</code>和<code>printf</code>，与之前写的相差不大:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">; 子程序(扇区2)</span><br><span class="line">    sub_program:</span><br><span class="line">        db &quot;clear&quot;</span><br><span class="line">        ; 205</span><br><span class="line">        clear:</span><br><span class="line">            ; 名称:clear</span><br><span class="line">            ; 功能:清屏</span><br><span class="line">            push ax</span><br><span class="line">            push bx</span><br><span class="line">            push cx</span><br><span class="line">            push es</span><br><span class="line">            </span><br><span class="line">            mov ax,0b800h   ; 显存段</span><br><span class="line">            mov es,ax</span><br><span class="line">            mov cx,2000     ; 80x25字符</span><br><span class="line">            mov bx,0</span><br><span class="line">            c0:</span><br><span class="line">                mov byte ptr es:[bx],20h ; 空格</span><br><span class="line">                ; 一个小改动：删去属性字节，因为后面有设置颜色的功能</span><br><span class="line">                add bx,2</span><br><span class="line">            loop c0</span><br><span class="line"></span><br><span class="line">            pop es</span><br><span class="line">            pop cx</span><br><span class="line">            pop bx</span><br><span class="line">            pop ax</span><br><span class="line">            ret</span><br><span class="line">        db &quot;printf&quot;</span><br><span class="line">        ; 229</span><br><span class="line">        printf:</span><br><span class="line">            ; 名称:printf</span><br><span class="line">            ; 功能:在特定位置打印字符串,0A -&gt; \n,以0结尾</span><br><span class="line">            ; 参数: ds:di -&gt; 打印内容</span><br><span class="line">            ;            (si) -&gt; 位置</span><br><span class="line">            ; 返回: None</span><br><span class="line">            push cx</span><br><span class="line">            push si</span><br><span class="line">            push di</span><br><span class="line">            push ds</span><br><span class="line">            push es</span><br><span class="line"></span><br><span class="line">            push si</span><br><span class="line">            mov cx,0b800h</span><br><span class="line">            mov es,cx</span><br><span class="line">            ; 主打印循环</span><br><span class="line">            p0:</span><br><span class="line">                mov ch,0</span><br><span class="line">                mov cl,ds:[di]</span><br><span class="line">                jcxz printf_cmpd</span><br><span class="line">                cmp cx,0ah</span><br><span class="line">                je lineFeed</span><br><span class="line">                mov es:[si],cl</span><br><span class="line">                ; 还是不动属性字节</span><br><span class="line">                add si,2</span><br><span class="line">                p1:</span><br><span class="line">                    add di,1</span><br><span class="line">            jmp short p0</span><br><span class="line"></span><br><span class="line">            lineFeed:</span><br><span class="line">                ; 换行</span><br><span class="line">                pop si</span><br><span class="line">                add si,0a0h</span><br><span class="line">                push si</span><br><span class="line">                jmp short p1</span><br><span class="line">            printf_cmpd:</span><br><span class="line">                pop si</span><br><span class="line">                </span><br><span class="line">                pop es</span><br><span class="line">                pop ds</span><br><span class="line">                pop di</span><br><span class="line">                pop si</span><br><span class="line">                pop cx</span><br><span class="line">                ret</span><br></pre></td></tr></table></figure></p><p>完成这些之后应该就能显示这样一个超酷的主选单了:<br><img src="main_menu.png" alt="主选单" title="超酷的主选单"></p><h2 id="键盘中断"><a href="#键盘中断" class="headerlink" title="键盘中断"></a>键盘中断</h2><h3 id="中断安装"><a href="#中断安装" class="headerlink" title="中断安装"></a>中断安装</h3><p>安装没什么好说的，在中断向量表中将<code>int 9h</code>(键盘中断)对应的地址替换为下面自己写的<code>int 9</code>的地址，并将原<code>int 9h</code>对应的地址保存即可；<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">install:</span><br><span class="line">   push ax</span><br><span class="line">   push cx</span><br><span class="line">   push si</span><br><span class="line">   push di</span><br><span class="line">   push ds</span><br><span class="line">   push es</span><br><span class="line"></span><br><span class="line">   mov ax,cs</span><br><span class="line">   mov ds,ax</span><br><span class="line">   mov ax,0</span><br><span class="line">   mov es,ax</span><br><span class="line"></span><br><span class="line">   ; 保存原int 9h</span><br><span class="line">   mov ax,es:[9*4]</span><br><span class="line">   mov es:[200h],ax</span><br><span class="line">   mov ax,es:[9*4+2]</span><br><span class="line">   mov es:[202h],ax</span><br><span class="line"></span><br><span class="line">   ; 设置中断向量表</span><br><span class="line">   cli</span><br><span class="line">   mov word ptr es:[9*4],803fh</span><br><span class="line">   mov word ptr es:[9*4+2],0</span><br><span class="line">   sti</span><br><span class="line"></span><br><span class="line">   pop es</span><br><span class="line">   pop ds</span><br><span class="line">   pop di</span><br><span class="line">   pop si</span><br><span class="line">   pop cx</span><br><span class="line">   pop ax</span><br><span class="line">   ret</span><br></pre></td></tr></table></figure><br>这里存了这么多寄存器是因为一开始用了<code>movsb</code>，后来发现没必要；</p><h3 id="中断中转站"><a href="#中断中转站" class="headerlink" title="中断中转站"></a>中断中转站</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int9:</span><br><span class="line">    jmp short inte</span><br><span class="line">    dw 0,0ffffh ; BIOS地址</span><br><span class="line">    dw 7c00h,0  ; 引导地址</span><br><span class="line">    db &quot;yy/mm/dd hh:mm:ss&quot;,0 ; 输出(输出)</span><br><span class="line">    db &quot;000000000000&quot;,0      ; 时间(输入)</span><br></pre></td></tr></table></figure><p>两个段分别用来存储<code>func3</code>输出的时间和<code>func4</code>输入的时间；<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">inte:</span><br><span class="line">    push ax</span><br><span class="line">    push bx</span><br><span class="line">    push es</span><br><span class="line">check:</span><br><span class="line">    in al,60h ; 键盘扫描码</span><br><span class="line">    cmp al,2h ; 1: 重启计算机</span><br><span class="line">    je func1</span><br><span class="line">    cmp al,3h ; 2: 启动操作系统</span><br><span class="line">    je func2</span><br><span class="line">    cmp al,4h ; 3: 时钟</span><br><span class="line">    je func3</span><br><span class="line">    cmp al,1h ; ESC: 返回主选单</span><br><span class="line">    je func_esc</span><br><span class="line">    cmp al,84h ; 3: 时钟</span><br><span class="line">    ; 不设的话断码会打断那个循环</span><br><span class="line">    je func3</span><br><span class="line">    cmp al,5h ; 4: 设置时间</span><br><span class="line">    je func4</span><br><span class="line">    cmp al,3bh ; F1: 改变颜色</span><br><span class="line">    je func_color</span><br><span class="line">    jmp short check</span><br></pre></td></tr></table></figure><br>也可以用直接定址表，但我实在是懒得对着十六进制编辑器去查地址了；</p><h2 id="1-重启计算机"><a href="#1-重启计算机" class="headerlink" title="1 重启计算机"></a>1 重启计算机</h2><p>这应该是最简单的一个功能了。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">func1:</span><br><span class="line">    ; 按键:1</span><br><span class="line">    ; 功能:重启计算机</span><br><span class="line"></span><br><span class="line">    mov bx,0</span><br><span class="line">    mov es,bx</span><br><span class="line">    jmp dword ptr es:[8041h]</span><br></pre></td></tr></table></figure><br>其中<code>es</code>:<code>[8041h]</code>即前面存的<code>0ffffh</code>:<code>0</code>；</p><h2 id="2-启动操作系统"><a href="#2-启动操作系统" class="headerlink" title="2 启动操作系统"></a>2 启动操作系统</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">func2:</span><br><span class="line">    ; 按键:2</span><br><span class="line">    ; 功能:启动操作系统</span><br><span class="line"></span><br><span class="line">    mov ax,0</span><br><span class="line">    mov es,ax</span><br><span class="line">    mov bx,7c00h </span><br><span class="line">    </span><br><span class="line">    ; 读取C盘</span><br><span class="line">    mov ah,2</span><br><span class="line">    mov al,1</span><br><span class="line">    mov ch,0</span><br><span class="line">    mov cl,1</span><br><span class="line">    mov dh,1</span><br><span class="line">    mov dl,80h</span><br><span class="line"></span><br><span class="line">    int 13h</span><br></pre></td></tr></table></figure><p>注意：这里如果真的读0道0面1扇区是会卡死的，用十六进制编辑器看看磁盘镜像就知道了；<br><img src="c_chs001.png" alt="扇区1" title="扇区1"><br>开头甚至不是<code>jmp</code>指令和OEM信息。</p><p>而是应该读取0道1面1扇区，那才是系统的引导扇区:<br><img src="oem.png" alt="OEM" title="OEM"><br>以<code>jmp</code>开头，带OEM的才是引导扇区嘛。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">; 重置中断向量表</span><br><span class="line">cli</span><br><span class="line">mov ax,es:[200h]</span><br><span class="line">mov es:[9*4],ax</span><br><span class="line">mov ax,es:[202h]</span><br><span class="line">mov es:[9*4+2],ax</span><br><span class="line">sti</span><br></pre></td></tr></table></figure><br>将中断向量表恢复为原来的地址，不然进DOS之后按键盘没反应；<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">; 跳转并载入系统</span><br><span class="line">jmp dword ptr es:[8045h]</span><br></pre></td></tr></table></figure><br>这里的<code>es</code>:<code>[8045h]</code>即前面存的<code>0</code>:<code>7c00h</code>；</p><p>接下来不出意外按<code>2</code>就可以进操作系统了:<br><img src="func2.png" alt="功能2" title="功能2"></p><h2 id="3-时钟"><a href="#3-时钟" class="headerlink" title="3 时钟"></a>3 时钟</h2><p>这个和之前写的<a href="https://hiedanoajuu.github.io/2025/02/01/time-exe/">time</a>比较像，但需要循环读取；</p><p>首先仿照<a href="https://hiedanoajuu.github.io/2025/02/01/time-exe/">time</a>写一个<code>read_cmos</code>子程序:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">read_cmos:</span><br><span class="line">    ; 名称:read_cmos</span><br><span class="line">    ; 功能:读取CMOS RAM的特定字节</span><br><span class="line">    ; 参数:(al)-&gt;地址(CMOS)</span><br><span class="line">    ; 返回:ds:bx(输入)</span><br><span class="line">    push cx</span><br><span class="line">    push ax</span><br><span class="line"></span><br><span class="line">    out 70h,al</span><br><span class="line">    in al,71h</span><br><span class="line">    </span><br><span class="line">    mov ah,al</span><br><span class="line">    mov cl,4</span><br><span class="line">    shr ah,cl</span><br><span class="line">    and al,00001111b</span><br><span class="line"></span><br><span class="line">    add ah,30h</span><br><span class="line">    add al,30h</span><br><span class="line"></span><br><span class="line">    mov ds:[bx],ah</span><br><span class="line">    mov ds:[bx+1],al</span><br><span class="line"></span><br><span class="line">    pop ax</span><br><span class="line">    pop cx</span><br><span class="line">    ret</span><br></pre></td></tr></table></figure></p><p>接着需要写的是<code>func3</code>的主程序，功能是将CMOS里的时间写入<code>0</code>:<code>8049h</code>那个输出时间的数据段，并打印在屏幕上<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">func3_main:</span><br><span class="line">    ; 按键:3</span><br><span class="line">    ; 功能:实时时钟</span><br><span class="line"></span><br><span class="line">    call clear</span><br><span class="line">    mov ax,0</span><br><span class="line">    mov ds,ax</span><br><span class="line">    mov al,20h</span><br><span class="line">    out 20h,al</span><br><span class="line">    sti</span><br></pre></td></tr></table></figure><br>发送EOI，不然接受不了键盘中断；<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">time:</span><br><span class="line">    cli</span><br><span class="line">    ; 防止在循环体未完整执行时触发中断</span><br><span class="line">    mov al,9</span><br><span class="line">    mov cx,3</span><br><span class="line">    mov bx,8049h</span><br><span class="line">    ; 前面的“输入时间”数据段</span><br><span class="line">    </span><br><span class="line">    ; 后面和time.asm差不多</span><br><span class="line">    l0:</span><br><span class="line">        call read_cmos</span><br><span class="line">        add bx,3</span><br><span class="line">        dec al</span><br><span class="line">    loop l0</span><br><span class="line">    </span><br><span class="line">    mov al,4</span><br><span class="line">    mov cx,3</span><br><span class="line">    l1:</span><br><span class="line">        call read_cmos</span><br><span class="line">        add bx,3</span><br><span class="line">        sub al,2</span><br><span class="line">    loop l1</span><br><span class="line"></span><br><span class="line">    mov di,8049h</span><br><span class="line">    mov si,0a0h</span><br><span class="line">    call printf</span><br><span class="line">    sti</span><br><span class="line">    ; 接收中断的窗口期</span><br><span class="line">    nop</span><br><span class="line">    jmp short time</span><br></pre></td></tr></table></figure><br>同时还有<code>ESC</code>键的退出功能:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">func_esc:</span><br><span class="line">    ; 按键:ESC</span><br><span class="line">    ; 功能:回到主页 </span><br><span class="line">    </span><br><span class="line">    cli</span><br><span class="line">    mov di,7c02h</span><br><span class="line">    mov si,0a0h</span><br><span class="line">    call printf</span><br><span class="line">    ; 显示主页</span><br><span class="line">    </span><br><span class="line">    mov al,20h</span><br><span class="line">    out 20h,al</span><br><span class="line">    pop es</span><br><span class="line">    pop bx</span><br><span class="line">    pop ax</span><br><span class="line">    sti</span><br><span class="line">    ; 发送EOI</span><br><span class="line">    hold:</span><br><span class="line">        nop</span><br><span class="line">        ; 等待中断</span><br><span class="line">    jmp short hold</span><br></pre></td></tr></table></figure><br>完成上述程序后，实时刷新的时钟应该就可用了:<br><img src="time.png" alt="时间" title="时间"></p><h2 id="4-设置时钟"><a href="#4-设置时钟" class="headerlink" title="4 设置时钟"></a>4 设置时钟</h2><p>因为扇区3的512字节非常紧张了，所以<code>func4</code>的主程序<code>charin</code>和<code>write_cmos</code>写在扇区2中;<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">func4:</span><br><span class="line">    ; 按键:4</span><br><span class="line">    ; 功能:设置时钟</span><br><span class="line"></span><br><span class="line">    cli</span><br><span class="line">    mov al,20h</span><br><span class="line">    out 20h,al</span><br><span class="line">    sti</span><br><span class="line">    call charin ; 获取用户输入</span><br><span class="line">    jmp short func_esc</span><br></pre></td></tr></table></figure></p><p><code>charin</code>子程序负责处理键盘的输入，非数字自动忽略；<code>Backspace</code>删除，输入和删除需要判断是否超界；<code>Enter</code>确认、写入CMOS并返回；<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">; 输入时间(功能 4)</span><br><span class="line">charin:</span><br><span class="line">    ; 名称:charin</span><br><span class="line">    ; 功能:通过int 16h接收键盘输入</span><br><span class="line">    push ax</span><br><span class="line">    push bx</span><br><span class="line">    push si</span><br><span class="line">    push di</span><br><span class="line"></span><br><span class="line">    ; 重置中断向量</span><br><span class="line">    cli</span><br><span class="line">        mov bx,es:[200h]</span><br><span class="line">        mov es:[9*4],bx</span><br><span class="line">        mov bx,es:[202h]</span><br><span class="line">        mov es:[9*4+2],bx</span><br><span class="line">    sti</span><br></pre></td></tr></table></figure><br>因为要用键盘输入，所以这里要恢复<code>int 9h</code>中断向量;<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">; 输入时间的保存位置</span><br><span class="line">mov bx,805bh</span><br><span class="line">input:</span><br><span class="line">    call clear</span><br><span class="line">    mov di,805bh</span><br><span class="line">    mov si,0a0h</span><br><span class="line">    call printf</span><br><span class="line">    ; 在屏幕上显示输入的时间</span><br><span class="line">    </span><br><span class="line">    mov ah,0</span><br><span class="line">    int 16h</span><br><span class="line">    ; 键盘输入</span><br><span class="line">    cmp al,30h</span><br><span class="line">    ; &quot;0&quot;的ASCII</span><br><span class="line">    jb nonumber</span><br><span class="line">    cmp al,39h</span><br><span class="line">    ; &quot;9&quot;的ASCII</span><br><span class="line">    ja nonumber</span><br><span class="line"></span><br><span class="line">    cmp bx,8066h</span><br><span class="line">    ; 判断不超上界</span><br><span class="line">    ja input</span><br><span class="line">    mov es:[bx],al</span><br><span class="line"></span><br><span class="line">    inc bx</span><br><span class="line">    jmp short input</span><br></pre></td></tr></table></figure><br>处理输入，忽略非数字输入，<code>Backspace</code>和<code>Enter</code>特殊处理;还需要判断输入不超上界;<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">nonumber:</span><br><span class="line">    cmp ah,0eh</span><br><span class="line">    ; Backspace的扫描码</span><br><span class="line">    je backspace</span><br><span class="line">    cmp ah,1ch</span><br><span class="line">    ; Enter的扫描码</span><br><span class="line">    je enter</span><br><span class="line">    jmp short input</span><br></pre></td></tr></table></figure><br>非数字输入的处理；<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">backspace:</span><br><span class="line">    cmp bx,805bh</span><br><span class="line">    jna input</span><br><span class="line">    dec bx</span><br><span class="line">    mov byte ptr es:[bx],30h</span><br><span class="line">    jmp short input</span><br></pre></td></tr></table></figure><br><code>Backspace</code>退格功能，需要判断退格不超下界；<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">enter:</span><br><span class="line">    call write_cmos</span><br><span class="line">    mov bx,805bh</span><br><span class="line">    mov cx,12</span><br><span class="line">    sn:</span><br><span class="line">        mov byte ptr es:[bx],30h</span><br><span class="line">        inc bx</span><br><span class="line">    loop sn</span><br><span class="line">    cli</span><br><span class="line">    mov word ptr es:[9*4],803fh</span><br><span class="line">    mov word ptr es:[9*4+2],0</span><br><span class="line">    sti</span><br><span class="line">pop di    </span><br><span class="line">pop si</span><br><span class="line">pop bx</span><br><span class="line">pop ax</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><br><code>Enter</code>功能:提交输入，写入CMOS，恢复<code>int 9h</code>中断，并返回主选单；</p><p>接下来需要仿照<code>read_cmos</code>写一个<code>write_cmos</code>程序。和<code>read_cmos</code>不同，循环写在<code>write_cmos</code>函数体内；<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">write_cmos:</span><br><span class="line">    ; 名称:write_cmos</span><br><span class="line">    ; 功能:向CMOS写入时间</span><br><span class="line">    push ax</span><br><span class="line">    push bx</span><br><span class="line">    push cx</span><br><span class="line">    push dx</span><br><span class="line">    push si</span><br><span class="line"></span><br><span class="line">    mov bx,805bh</span><br><span class="line">    ; 输入的时间的保存位置</span><br><span class="line">    mov cx,3</span><br><span class="line">    mov dl,9</span><br><span class="line">    write1:</span><br><span class="line">        push cx</span><br><span class="line">        push dx</span><br><span class="line"></span><br><span class="line">        ; 字符 -&gt; BCD</span><br><span class="line">        mov dx,es:[bx]</span><br><span class="line">        sub dh,30h</span><br><span class="line">        sub dl,30h</span><br><span class="line">        mov cl,4</span><br><span class="line">        shl dl,cl</span><br><span class="line">        add ch,dl</span><br><span class="line">        add ch,dh</span><br><span class="line">        pop dx</span><br><span class="line">        mov al,dl</span><br><span class="line">        out 70h,al</span><br><span class="line">        mov al,ch</span><br><span class="line">        out 71h,al</span><br><span class="line"></span><br><span class="line">        dec dx  ; 年/月/日 9/8/7</span><br><span class="line">        add bx,2 </span><br><span class="line">        pop cx</span><br><span class="line">    loop write1</span><br><span class="line">    </span><br><span class="line">    mov dl,4</span><br><span class="line">    mov cx,3</span><br><span class="line">    write2:</span><br><span class="line">        push cx</span><br><span class="line">        push dx</span><br><span class="line"></span><br><span class="line">        mov dx,es:[bx]</span><br><span class="line">        sub dh,30h</span><br><span class="line">        sub dl,30h</span><br><span class="line">        mov cl,4</span><br><span class="line">        shl dl,cl</span><br><span class="line">        add ch,dl</span><br><span class="line">        add ch,dh</span><br><span class="line">        pop dx</span><br><span class="line">        mov al,dl</span><br><span class="line">        out 70h,al</span><br><span class="line">        mov al,ch</span><br><span class="line">        out 71h,al</span><br><span class="line"></span><br><span class="line">        sub dx,2 ; 时:分:秒 4:2:0</span><br><span class="line">        add bx,2</span><br><span class="line">        pop cx</span><br><span class="line">    loop write2</span><br><span class="line">    </span><br><span class="line">    pop si</span><br><span class="line">    pop dx</span><br><span class="line">    pop cx</span><br><span class="line">    pop bx</span><br><span class="line">    pop ax</span><br><span class="line">    ret</span><br></pre></td></tr></table></figure><br>应该就可以随心所欲地调时间了:<br><img src="edit_time.png" alt="修改时间" title="修改时间"><br><img src="edited_time.png" alt="修改结果" title="修改结果"></p><h2 id="设置颜色"><a href="#设置颜色" class="headerlink" title="设置颜色"></a>设置颜色</h2><p>这个也算是比较简单的。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">func_color:</span><br><span class="line">    ; 按键:F1</span><br><span class="line">    ; 功能:改变前景/背景色</span><br><span class="line"></span><br><span class="line">    call color</span><br><span class="line">    call clear</span><br><span class="line">    mov di,7c02h</span><br><span class="line">    mov si,0a0h</span><br><span class="line">    call printf</span><br></pre></td></tr></table></figure><br>切换颜色，并跳转回主菜单；<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mov cx,500h</span><br><span class="line">delay:</span><br><span class="line">    push cx</span><br><span class="line">    mov cx,0ffffh</span><br><span class="line">    delay_1:</span><br><span class="line">        nop</span><br><span class="line">    loop delay_1</span><br><span class="line">    pop cx</span><br><span class="line">loop delay</span><br><span class="line">jmp short func_esc</span><br></pre></td></tr></table></figure><br>延时循环，避免短时间内触发多次<code>F1</code>出现跳过颜色的情况；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">color: </span><br><span class="line">    ; 名称:color</span><br><span class="line">    ; 功能:颜色调整 </span><br><span class="line">    push ax</span><br><span class="line">    push bx</span><br><span class="line">    push cx</span><br><span class="line">    push es</span><br><span class="line"></span><br><span class="line">    mov ax,0b800h</span><br><span class="line">    mov es,ax</span><br><span class="line">    mov cx,2000</span><br><span class="line">    mov bx,1    ; 属性字节</span><br><span class="line"></span><br><span class="line">    e0:</span><br><span class="line">        ; 属性字节+1</span><br><span class="line">        mov ah,es:[bx]</span><br><span class="line">        inc ah</span><br><span class="line">        mov es:[bx],ah</span><br><span class="line">        add bx,2</span><br><span class="line">    loop e0</span><br><span class="line"></span><br><span class="line">    pop es</span><br><span class="line">    pop cx</span><br><span class="line">    pop bx</span><br><span class="line">    pop ax</span><br><span class="line">    ret</span><br></pre></td></tr></table></figure><p>然后就可以调成喜欢的字体颜色了:<br><img src="hacker.png" alt="黑底绿字" title="黑底绿字"></p><h2 id="安装程序"><a href="#安装程序" class="headerlink" title="安装程序"></a>安装程序</h2><p>最后还需要写一个在DOS上运行的安装程序:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">write:</span><br><span class="line">    ; 写入软盘 A:</span><br><span class="line">    ; 1. 主引导程序 (扇区 1)</span><br><span class="line">    ; 2. 子程序 (扇区 2)</span><br><span class="line">    ; 3. 中断 (扇区 3)</span><br><span class="line"></span><br><span class="line">    ; 主引导程序 -&gt; 扇区 1</span><br><span class="line">    mov ax,cs</span><br><span class="line">    mov es,ax</span><br><span class="line">    mov bx,offset main</span><br><span class="line"></span><br><span class="line">    mov ah,3    ; BIOS:写入扇区</span><br><span class="line">    mov al,1    ; 1 扇区</span><br><span class="line">    mov ch,0    ; 道 0</span><br><span class="line">    mov cl,1    ; 扇区 1</span><br><span class="line">    mov dh,0    ; 面 0</span><br><span class="line">    mov dl,0    ; 软驱 A</span><br><span class="line">    int 13h</span><br><span class="line"></span><br><span class="line">    ; 子程序 -&gt; 扇区 2</span><br><span class="line">    mov bx,offset sub_program</span><br><span class="line"></span><br><span class="line">    mov ah,3</span><br><span class="line">    mov al,1</span><br><span class="line">    mov ch,0</span><br><span class="line">    mov cl,2    ; 扇区 2</span><br><span class="line">    mov dh,0   </span><br><span class="line">    mov dl,0    </span><br><span class="line">    int 13h</span><br><span class="line"></span><br><span class="line">    ; 中断 -&gt; 扇区 3</span><br><span class="line">    mov bx,offset install_int</span><br><span class="line"></span><br><span class="line">    mov ah,3</span><br><span class="line">    mov al,1</span><br><span class="line">    mov ch,0</span><br><span class="line">    mov cl,3    ; 扇区 3</span><br><span class="line">    mov dh,0</span><br><span class="line">    mov dl,0</span><br><span class="line">    int 13h</span><br><span class="line"></span><br><span class="line">    ; 退出安装程序</span><br><span class="line">    mov ax,4c00h</span><br><span class="line">    int 21h</span><br></pre></td></tr></table></figure><br>至此，就完成了这个程序开发的全部工作！</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>本程序的完整代码如下，共564行(含注释);<br>下载请见<a href="https://github.com/HiedanoAjuu/Ajuu-s-repository/tree/main/MASM/code/bootloader">我的仓库</a>:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br></pre></td><td class="code"><pre><span class="line">; os.asm</span><br><span class="line">; A bootloader with:</span><br><span class="line">; - Reset PC</span><br><span class="line">; - Start System</span><br><span class="line">; - Real-time clock</span><br><span class="line">; - Clock setting</span><br><span class="line">; - Color set</span><br><span class="line"></span><br><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">    write:</span><br><span class="line">        ; Write to the floppy A:</span><br><span class="line">        ; 1. Main bootloader (Sector 1)</span><br><span class="line">        ; 2. Subprograms (Sector 2)</span><br><span class="line">        ; 3. Interrupt (Sector 3)</span><br><span class="line"></span><br><span class="line">        ; Main -&gt; Sector 1</span><br><span class="line">        mov ax,cs</span><br><span class="line">        mov es,ax</span><br><span class="line">        mov bx,offset main</span><br><span class="line"></span><br><span class="line">        mov ah,3    ; BIOS:Write sectors</span><br><span class="line">        mov al,1    ; 1 Sector</span><br><span class="line">        mov ch,0    ; Cylinder 0</span><br><span class="line">        mov cl,1    ; Sector 1</span><br><span class="line">        mov dh,0    ; Head 0</span><br><span class="line">        mov dl,0    ; Drive A</span><br><span class="line">        int 13h</span><br><span class="line"></span><br><span class="line">        ; Subprogram -&gt; Sector 2</span><br><span class="line">        mov bx,offset sub_program</span><br><span class="line"></span><br><span class="line">        mov ah,3</span><br><span class="line">        mov al,1</span><br><span class="line">        mov ch,0</span><br><span class="line">        mov cl,2    ; Sector 2</span><br><span class="line">        mov dh,0   </span><br><span class="line">        mov dl,0    </span><br><span class="line">        int 13h</span><br><span class="line"></span><br><span class="line">        ; Interrupt -&gt; Sector 3</span><br><span class="line">        mov bx,offset install_int</span><br><span class="line"></span><br><span class="line">        mov ah,3</span><br><span class="line">        mov al,1</span><br><span class="line">        mov ch,0</span><br><span class="line">        mov cl,3    ; Sector 3</span><br><span class="line">        mov dh,0</span><br><span class="line">        mov dl,0</span><br><span class="line">        int 13h</span><br><span class="line"></span><br><span class="line">        ; Terminate writing program</span><br><span class="line">        mov ax,4c00h</span><br><span class="line">        int 21h</span><br><span class="line"></span><br><span class="line">    ; Main bootloader (Sector 1)</span><br><span class="line">    main:</span><br><span class="line">        ; 0</span><br><span class="line">        jmp short display</span><br><span class="line">        ; 2</span><br><span class="line"></span><br><span class="line">        ; Text of main page</span><br><span class="line">        text db &quot;BootLoader By Hiedano Ajuu&quot;,0ah,&quot;1) reset pc&quot;,0ah,&quot;2) start system&quot;,0ah,&quot;3) clock&quot;,0ah,&quot;4) set clock&quot;,0</span><br><span class="line">        display:</span><br><span class="line">            ; Load subprogram from floppy</span><br><span class="line">            mov ax,0</span><br><span class="line">            mov es,ax</span><br><span class="line">            mov bx,7c00h+512    ; Sector 1 + 512B</span><br><span class="line"></span><br><span class="line">            mov ah,2    ; BIOS:Read sectors</span><br><span class="line">            mov al,1</span><br><span class="line">            mov ch,0</span><br><span class="line">            mov cl,2    ; Sector 2</span><br><span class="line">            mov dh,0</span><br><span class="line">            mov dl,0</span><br><span class="line"></span><br><span class="line">            int 13h</span><br><span class="line"></span><br><span class="line">            mov bx,7c00h+1024   ; Sector 1 + 1024B</span><br><span class="line">            mov ah,2</span><br><span class="line">            mov al,1</span><br><span class="line">            mov ch,0</span><br><span class="line">            mov cl,3</span><br><span class="line">            mov dh,0</span><br><span class="line">            mov dl,0</span><br><span class="line"></span><br><span class="line">            int 13h</span><br><span class="line"></span><br><span class="line">            call clear  ; Clear screen</span><br><span class="line"></span><br><span class="line">            ; Display Menu</span><br><span class="line">            mov ax,0</span><br><span class="line">            mov ds,ax</span><br><span class="line">            mov si,0a0h  ; Screen position (1 line)</span><br><span class="line">            mov di,7c02h ; Text address</span><br><span class="line">            call printf</span><br><span class="line"></span><br><span class="line">            call install_int ; Install interrupt</span><br><span class="line"></span><br><span class="line">            ; Wait for interrupt</span><br><span class="line">            hold_m:</span><br><span class="line">                nop</span><br><span class="line">            jmp short hold_m</span><br><span class="line"></span><br><span class="line">            org offset main + 510</span><br><span class="line">            dw 0aa55h   ; Boot signature</span><br><span class="line"></span><br><span class="line">    ; Subgrogram (Sector 2)</span><br><span class="line">    sub_program:</span><br><span class="line">        db &quot;clear&quot;</span><br><span class="line">        ; 205</span><br><span class="line">        clear:</span><br><span class="line">            ; Name:clear</span><br><span class="line">            ; Function:Clear the sreen</span><br><span class="line">            push ax</span><br><span class="line">            push bx</span><br><span class="line">            push cx</span><br><span class="line">            push es</span><br><span class="line">            </span><br><span class="line">            mov ax,0b800h   ; Video memory segment</span><br><span class="line">            mov es,ax</span><br><span class="line">            mov cx,2000     ; 80x25 characters</span><br><span class="line">            mov bx,0</span><br><span class="line">            c0:</span><br><span class="line">                mov byte ptr es:[bx],20h ; Space</span><br><span class="line">                add bx,2</span><br><span class="line">            loop c0</span><br><span class="line"></span><br><span class="line">            pop es</span><br><span class="line">            pop cx</span><br><span class="line">            pop bx</span><br><span class="line">            pop ax</span><br><span class="line">            ret</span><br><span class="line">        color: </span><br><span class="line">            ; Name:color</span><br><span class="line">            ; Function:Color rotation </span><br><span class="line">            push ax</span><br><span class="line">            push bx</span><br><span class="line">            push cx</span><br><span class="line">            push es</span><br><span class="line"></span><br><span class="line">            mov ax,0b800h</span><br><span class="line">            mov es,ax</span><br><span class="line">            mov cx,2000</span><br><span class="line">            mov bx,1    ; Color attribute byte</span><br><span class="line"></span><br><span class="line">            e0:</span><br><span class="line">                ; Increment color values</span><br><span class="line">                mov ah,es:[bx]</span><br><span class="line">                inc ah</span><br><span class="line">                mov es:[bx],ah</span><br><span class="line">                add bx,2</span><br><span class="line">            loop e0</span><br><span class="line"></span><br><span class="line">            pop es</span><br><span class="line">            pop cx</span><br><span class="line">            pop bx</span><br><span class="line">            pop ax</span><br><span class="line">            ret</span><br><span class="line"></span><br><span class="line">        db &quot;printf&quot;</span><br><span class="line">        ; 229</span><br><span class="line">        printf:</span><br><span class="line">            ; Name:printf</span><br><span class="line">            ; Function:Print the strings at the specified position,0A -&gt; \n,ending in 0</span><br><span class="line">            ; Parameter: ds:di -&gt; content to be printed</span><br><span class="line">            ;            (si) -&gt; position</span><br><span class="line">            ; Return: None</span><br><span class="line">            push cx</span><br><span class="line">            push si</span><br><span class="line">            push di</span><br><span class="line">            push ds</span><br><span class="line">            push es</span><br><span class="line"></span><br><span class="line">            push si</span><br><span class="line">            mov cx,0b800h</span><br><span class="line">            mov es,cx</span><br><span class="line">            ; Main print loop</span><br><span class="line">            p0:</span><br><span class="line">                mov ch,0</span><br><span class="line">                mov cl,ds:[di]</span><br><span class="line">                jcxz printf_cmpd</span><br><span class="line">                cmp cx,0ah</span><br><span class="line">                je lineFeed</span><br><span class="line">                mov es:[si],cl</span><br><span class="line">                add si,2</span><br><span class="line">                p1:</span><br><span class="line">                    add di,1</span><br><span class="line">            jmp short p0</span><br><span class="line"></span><br><span class="line">            lineFeed:</span><br><span class="line">                ; Handle newline</span><br><span class="line">                pop si</span><br><span class="line">                add si,0a0h</span><br><span class="line">                push si</span><br><span class="line">                jmp short p1</span><br><span class="line">            printf_cmpd:</span><br><span class="line">                pop si</span><br><span class="line">                </span><br><span class="line">                pop es</span><br><span class="line">                pop ds</span><br><span class="line">                pop di</span><br><span class="line">                pop si</span><br><span class="line">                pop cx</span><br><span class="line">                ret</span><br><span class="line"></span><br><span class="line">        ; CMOS RAM functions</span><br><span class="line"></span><br><span class="line">        read_cmos:</span><br><span class="line">            ; Name:read_cmos</span><br><span class="line">            ; Function:Read designated byte of CMOS RAM</span><br><span class="line">            ; Parameter:(al)-&gt;address(CMOS)</span><br><span class="line">            ; Return:ds:bx(in)</span><br><span class="line">            push cx</span><br><span class="line">            push ax</span><br><span class="line"></span><br><span class="line">            out 70h,al</span><br><span class="line">            in al,71h</span><br><span class="line">            </span><br><span class="line">            mov ah,al</span><br><span class="line">            mov cl,4</span><br><span class="line">            shr ah,cl</span><br><span class="line">            and al,00001111b</span><br><span class="line"></span><br><span class="line">            add ah,30h</span><br><span class="line">            add al,30h</span><br><span class="line"></span><br><span class="line">            mov ds:[bx],ah</span><br><span class="line">            mov ds:[bx+1],al</span><br><span class="line"></span><br><span class="line">            pop ax</span><br><span class="line">            pop cx</span><br><span class="line">            ret</span><br><span class="line"></span><br><span class="line">        ; Time input (Function 4)</span><br><span class="line">        charin:</span><br><span class="line">            ; Name:charin</span><br><span class="line">            ; Function:Receive keyboard input through int 16h</span><br><span class="line">            push ax</span><br><span class="line">            push bx</span><br><span class="line">            push si</span><br><span class="line">            push di</span><br><span class="line"></span><br><span class="line">            ; Reset IVT</span><br><span class="line">            cli</span><br><span class="line">                mov bx,es:[200h]</span><br><span class="line">                mov es:[9*4],bx</span><br><span class="line">                mov bx,es:[202h]</span><br><span class="line">                mov es:[9*4+2],bx</span><br><span class="line">            sti</span><br><span class="line">            mov bx,805bh</span><br><span class="line">            input:</span><br><span class="line">                call clear</span><br><span class="line">                mov di,805bh</span><br><span class="line">                mov si,0a0h</span><br><span class="line">                call printf</span><br><span class="line"></span><br><span class="line">                mov ah,0</span><br><span class="line">                int 16h</span><br><span class="line">                ; Keyboard input</span><br><span class="line">                cmp al,30h</span><br><span class="line">                jb nonumber</span><br><span class="line">                cmp al,39h</span><br><span class="line">                ja nonumber</span><br><span class="line"></span><br><span class="line">                cmp bx,8066h</span><br><span class="line">                ja input</span><br><span class="line">                mov es:[bx],al</span><br><span class="line"></span><br><span class="line">                inc bx</span><br><span class="line">                jmp short input</span><br><span class="line">            nonumber:</span><br><span class="line">                cmp ah,0eh</span><br><span class="line">                je backspace</span><br><span class="line">                cmp ah,1ch</span><br><span class="line">                je enter</span><br><span class="line">                jmp short input</span><br><span class="line">            backspace:</span><br><span class="line">                cmp bx,805bh</span><br><span class="line">                jna input</span><br><span class="line">                dec bx</span><br><span class="line">                mov byte ptr es:[bx],30h</span><br><span class="line">                jmp short input</span><br><span class="line">            enter:</span><br><span class="line">                call write_cmos</span><br><span class="line">                mov bx,805bh</span><br><span class="line">                mov cx,12</span><br><span class="line">                sn:</span><br><span class="line">                    mov byte ptr es:[bx],30h</span><br><span class="line">                    inc bx</span><br><span class="line">                loop sn</span><br><span class="line">                cli</span><br><span class="line">                mov word ptr es:[9*4],803fh</span><br><span class="line">                mov word ptr es:[9*4+2],0</span><br><span class="line">                sti</span><br><span class="line">            pop di    </span><br><span class="line">            pop si</span><br><span class="line">            pop bx</span><br><span class="line">            pop ax</span><br><span class="line">            ret</span><br><span class="line"></span><br><span class="line">        write_cmos:</span><br><span class="line">            ; Name:write_cmos</span><br><span class="line">            ; Function:Write time to CMOS</span><br><span class="line">            push ax</span><br><span class="line">            push bx</span><br><span class="line">            push cx</span><br><span class="line">            push dx</span><br><span class="line">            push si</span><br><span class="line"></span><br><span class="line">            mov bx,805bh</span><br><span class="line">            mov cx,3</span><br><span class="line">            mov dl,9</span><br><span class="line">            write1:</span><br><span class="line">                push cx</span><br><span class="line">                push dx</span><br><span class="line"></span><br><span class="line">                ; char -&gt; BCD</span><br><span class="line">                mov dx,es:[bx]</span><br><span class="line">                sub dh,30h</span><br><span class="line">                sub dl,30h</span><br><span class="line">                mov cl,4</span><br><span class="line">                shl dl,cl</span><br><span class="line">                add ch,dl</span><br><span class="line">                add ch,dh</span><br><span class="line">                pop dx</span><br><span class="line">                mov al,dl</span><br><span class="line">                out 70h,al</span><br><span class="line">                mov al,ch</span><br><span class="line">                out 71h,al</span><br><span class="line"></span><br><span class="line">                dec dx  ; Y/M/D 9/8/7</span><br><span class="line">                add bx,2 </span><br><span class="line">                pop cx</span><br><span class="line">            loop write1</span><br><span class="line">            </span><br><span class="line">            mov dl,4</span><br><span class="line">            mov cx,3</span><br><span class="line">            write2:</span><br><span class="line">                push cx</span><br><span class="line">                push dx</span><br><span class="line"></span><br><span class="line">                mov dx,es:[bx]</span><br><span class="line">                sub dh,30h</span><br><span class="line">                sub dl,30h</span><br><span class="line">                mov cl,4</span><br><span class="line">                shl dl,cl</span><br><span class="line">                add ch,dl</span><br><span class="line">                add ch,dh</span><br><span class="line">                pop dx</span><br><span class="line">                mov al,dl</span><br><span class="line">                out 70h,al</span><br><span class="line">                mov al,ch</span><br><span class="line">                out 71h,al</span><br><span class="line"></span><br><span class="line">                sub dx,2 ; H:M:S 4:2:0</span><br><span class="line">                add bx,2</span><br><span class="line">                pop cx</span><br><span class="line">            loop write2</span><br><span class="line">            </span><br><span class="line">            pop si</span><br><span class="line">            pop dx</span><br><span class="line">            pop cx</span><br><span class="line">            pop bx</span><br><span class="line">            pop ax</span><br><span class="line">            ret</span><br><span class="line"></span><br><span class="line">        org offset sub_program +512</span><br><span class="line"></span><br><span class="line">        ; Sector 3</span><br><span class="line">        install_int:</span><br><span class="line">           jmp short install</span><br><span class="line">           db &quot;int&quot;</span><br><span class="line">        install:</span><br><span class="line">           push ax</span><br><span class="line">           push cx</span><br><span class="line">           push si</span><br><span class="line">           push di</span><br><span class="line">           push ds</span><br><span class="line">           push es</span><br><span class="line"></span><br><span class="line">           mov ax,cs</span><br><span class="line">           mov ds,ax</span><br><span class="line">           mov ax,0</span><br><span class="line">           mov es,ax</span><br><span class="line"></span><br><span class="line">           ; Save original int 9h</span><br><span class="line">           mov ax,es:[9*4]</span><br><span class="line">           mov es:[200h],ax</span><br><span class="line">           mov ax,es:[9*4+2]</span><br><span class="line">           mov es:[202h],ax</span><br><span class="line"></span><br><span class="line">           ; Set IVT</span><br><span class="line">           cli</span><br><span class="line">           mov word ptr es:[9*4],803fh</span><br><span class="line">           mov word ptr es:[9*4+2],0</span><br><span class="line">           sti</span><br><span class="line"></span><br><span class="line">           pop es</span><br><span class="line">           pop ds</span><br><span class="line">           pop di</span><br><span class="line">           pop si</span><br><span class="line">           pop cx</span><br><span class="line">           pop ax</span><br><span class="line">           ret</span><br><span class="line">        db &quot;int9&quot;</span><br><span class="line">        int9:</span><br><span class="line">            jmp short inte</span><br><span class="line">            dw 0,0ffffh ; BIOS</span><br><span class="line">            dw 7c00h,0  ; Floppy</span><br><span class="line">            db &quot;yy/mm/dd hh:mm:ss&quot;,0 ; Time(Out)</span><br><span class="line">            db &quot;000000000000&quot;,0      ; Time(In)</span><br><span class="line">        inte:</span><br><span class="line">            push ax</span><br><span class="line">            push bx</span><br><span class="line">            push es</span><br><span class="line">        check:</span><br><span class="line">            in al,60h ; Keyboard scan code</span><br><span class="line">            cmp al,2h ; 1: Reset PC</span><br><span class="line">            je func1</span><br><span class="line">            cmp al,3h ; 2: Start system</span><br><span class="line">            je func2</span><br><span class="line">            cmp al,4h ; 3: Clock</span><br><span class="line">            je func3</span><br><span class="line">            cmp al,1h ; ESC</span><br><span class="line">            je func_esc</span><br><span class="line">            cmp al,84h ; 3: Clock</span><br><span class="line">            je func3</span><br><span class="line">            cmp al,5h ; 4: Set clock</span><br><span class="line">            je func4</span><br><span class="line">            cmp al,3bh ; F1: Change color</span><br><span class="line">            je func_color</span><br><span class="line">            jmp short check</span><br><span class="line">        func_esc:</span><br><span class="line">            ; Key:ESC</span><br><span class="line">            ; Function:Jump to main page </span><br><span class="line">            </span><br><span class="line">            cli</span><br><span class="line">            mov di,7c02h</span><br><span class="line">            mov si,0a0h</span><br><span class="line">            call printf</span><br><span class="line">            mov al,20h</span><br><span class="line">            out 20h,al</span><br><span class="line">            pop es</span><br><span class="line">            pop bx</span><br><span class="line">            pop ax</span><br><span class="line">            sti</span><br><span class="line">            hold:</span><br><span class="line">                nop</span><br><span class="line">            jmp short hold</span><br><span class="line">        func4:</span><br><span class="line">            ; Key:4</span><br><span class="line">            ; Function:Set clock</span><br><span class="line"></span><br><span class="line">            cli</span><br><span class="line">            mov al,20h</span><br><span class="line">            out 20h,al</span><br><span class="line">            sti</span><br><span class="line">            call charin ; Get user&#x27;s input</span><br><span class="line">            jmp short func_esc</span><br><span class="line">        func1:</span><br><span class="line">            ; Key:1</span><br><span class="line">            ; Function:Reset pc</span><br><span class="line"></span><br><span class="line">            mov bx,0</span><br><span class="line">            mov es,bx</span><br><span class="line">            jmp dword ptr es:[8041h]</span><br><span class="line"></span><br><span class="line">        func2:</span><br><span class="line">            ; Key:2</span><br><span class="line">            ; Function:Start system</span><br><span class="line"></span><br><span class="line">            mov ax,0</span><br><span class="line">            mov es,ax</span><br><span class="line">            mov bx,7c00h </span><br><span class="line">            </span><br><span class="line">            ; Read Disk C</span><br><span class="line">            mov ah,2</span><br><span class="line">            mov al,1</span><br><span class="line">            mov ch,0</span><br><span class="line">            mov cl,1</span><br><span class="line">            mov dh,1</span><br><span class="line">            mov dl,80h</span><br><span class="line"></span><br><span class="line">            int 13h</span><br><span class="line"></span><br><span class="line">            ; Reset IVT</span><br><span class="line">            cli</span><br><span class="line">            mov ax,es:[200h]</span><br><span class="line">            mov es:[9*4],ax</span><br><span class="line">            mov ax,es:[202h]</span><br><span class="line">            mov es:[9*4+2],ax</span><br><span class="line">            sti</span><br><span class="line"></span><br><span class="line">            ; Jmp to load OS</span><br><span class="line">            jmp dword ptr es:[8045h]</span><br><span class="line"></span><br><span class="line">        func3:</span><br><span class="line">            ; Wrap to func3(jmp short limit)</span><br><span class="line">            jmp short func3_main</span><br><span class="line"></span><br><span class="line">        func_color:</span><br><span class="line">            ; Key:F1</span><br><span class="line">            ; Function: Change fg/bg color</span><br><span class="line"></span><br><span class="line">            call color</span><br><span class="line">            call clear</span><br><span class="line">            mov di,7c02h</span><br><span class="line">            mov si,0a0h</span><br><span class="line">            call printf</span><br><span class="line">            mov cx,500h</span><br><span class="line">            delay:</span><br><span class="line">                push cx</span><br><span class="line">                mov cx,0ffffh</span><br><span class="line">                delay_1:</span><br><span class="line">                    nop</span><br><span class="line">                loop delay_1</span><br><span class="line">                pop cx</span><br><span class="line">            loop delay</span><br><span class="line">            jmp short func_esc</span><br><span class="line"></span><br><span class="line">        func3_main:</span><br><span class="line">            ; Key:3</span><br><span class="line">            ; Function:Real-time clock</span><br><span class="line"></span><br><span class="line">            call clear</span><br><span class="line">            mov ax,0</span><br><span class="line">            mov ds,ax</span><br><span class="line">            mov al,20h</span><br><span class="line">            out 20h,al</span><br><span class="line">            sti</span><br><span class="line">        time:</span><br><span class="line">            cli</span><br><span class="line">            mov al,9</span><br><span class="line">            mov cx,3</span><br><span class="line">            mov bx,8049h</span><br><span class="line">            l0:</span><br><span class="line">                call read_cmos</span><br><span class="line">                add bx,3</span><br><span class="line">                dec al</span><br><span class="line">            loop l0</span><br><span class="line">            </span><br><span class="line">            mov al,4</span><br><span class="line">            mov cx,3</span><br><span class="line">            l1:</span><br><span class="line">                call read_cmos</span><br><span class="line">                add bx,3</span><br><span class="line">                sub al,2</span><br><span class="line">            loop l1</span><br><span class="line"></span><br><span class="line">            mov di,8049h</span><br><span class="line">            mov si,0a0h</span><br><span class="line">            call printf</span><br><span class="line">            sti</span><br><span class="line">            nop</span><br><span class="line">            jmp short time</span><br><span class="line">        int_end:</span><br><span class="line">            nop</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end write</span><br></pre></td></tr></table></figure><br>从嘲笑屎山到堆起屎山，这段代码写得虽然毫无美感，但好歹算是能实现功能。</p><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p>在QEMU虚拟机上编译、链接，生成<code>os.exe</code>；<br><img src="assemble.png" alt="编译" title="编译"><br>运行<code>os.exe</code>，写入软盘；<br><img src="install.png" alt="安装" title="安装"></p><p>在命令行中输入以下命令，启动QEMU虚拟机，并将A盘设置为启动盘。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-i386 -m 32M -hda c.img -fda a.img -boot a -smp 1,sockets=1,cores=1</span><br></pre></td></tr></table></figure><br>运行结果如视频所示:</p><p><iframe src="run.mp4"></iframe><br>可以看到，实现了我们预期的所有功能。</p><p><strong>项目完成</strong></p>]]></content>
    
    
    <summary type="html">计算机BIOS引导程序设计及编写，屎山代码警告。</summary>
    
    
    
    <category term="zh-CN" scheme="https://hiedanoajuu.github.io/categories/zh-CN/"/>
    
    <category term="计算机" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="汇编语言" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Masm" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/Masm/"/>
    
    
    <category term="计算机" scheme="https://hiedanoajuu.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="编程语言" scheme="https://hiedanoajuu.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="操作系统" scheme="https://hiedanoajuu.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>东方莳时绽 ～ Fractured Bloom</title>
    <link href="https://hiedanoajuu.github.io/2025/04/05/th-sst/"/>
    <id>https://hiedanoajuu.github.io/2025/04/05/th-sst/</id>
    <published>2025-04-04T17:53:36.000Z</published>
    <updated>2025-07-30T05:28:27.693Z</updated>
    
    <content type="html"><![CDATA[<h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><h2 id="创作声明"><a href="#创作声明" class="headerlink" title="创作声明"></a>创作声明</h2><ul><li>本作品为《东方Project》二次创作同人小说，原作版权归属上海爱丽丝幻乐团及博丽神主ZUN先生,遵照<a href="https://www.bilibili.com/opus/400555526272745308">东方Project使用规定案</a>发布；</li><li>本作品原创内容(原创角色、情节及世界观扩展)采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en">CC BY-NC-SA 4.0</a>协议； </li><li>禁止AI训练/NFT化/未授权盈利性使用；</li><li>转载须标注原作者笔名：<strong>稗田阿柔</strong>；</li><li>目前插图由AI绘制；</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>日语文本目前为机翻润色，准确度不保证；</li><li>古假名、变体假名显示异常请下载<a href="http://cheonhyeong.com/Simplified/download.html">TH-Times</a>字体；</li><li>若无特殊说明，本作中所有日期、历法为农历（旧历），计量单位为日本传统单位，日元汇率遵照故事发生当年；</li><li>若无特殊说明，在旧作中出场过的角色（幽香、灵梦、魔梨沙等）人设遵照旧作；</li><li>若无特殊说明，魔梨沙与魔理沙为同一人的不同称呼；</li><li>若无特殊说明，靈梦与霊梦为同一人物同一名称的不同写法，且在本作中统一写作灵梦；</li><li>目前角色插图统一画成新作着装；</li><li>幻想乡与外界物种交流情况遵照1885年；</li><li>幻想乡平均寿命45-55岁；</li><li>文中使用的日语汉字词，请依据日语的含义进行理解；</li><li>假设幻想乡位于关西，亚热带季风气候；</li><li>莳人请读作まくと，不是しじん啦（打算让幽香这样叫他，中文版作“逝人”）；</li></ul><h1 id="献词"><a href="#献词" class="headerlink" title="献词"></a>献词</h1><p><strong>献给永远的鲜花之主。 ——您最卑微的肥料候补 风见莳人</strong></p><h1 id="序幕-新"><a href="#序幕-新" class="headerlink" title="序幕(新)"></a>序幕(新)</h1><p>我是平成八年开始成为幻想乡的巫女的，至今已有三十多年了，但这样奇怪的事情还是第一次见。</p><p>竹帚擦过阶台的沙沙声在拂晓时分还空荡荡的山门前回荡，我漫不经心地扫着飘落的樱花。带着清香的风灌入巫女的衣袖。<br>这时，一道人影切过那寂寞的鸟居。那是一位少年，粗布衣上还带着晨露与泥土的气息。<br>「巫女大人！求您……」<br>他的膝盖突然哐当一声砸在正殿前的石阶上。<br>我蹙眉看着他，等着他接着说下去。<br>「我是来给父亲祈祷的！我……我……」<br>他的声音中带着喘息。</p><p>「神社的规矩不知道吗？」<br>扫帚尖敲在赛钱箱上。<br>他慌乱地去够自己的衣袋，揉出两张一千円的钞票。油墨的气息非常浓郁，也许到他手上还没有多久。</p><p>「这是两千円，巫女大人。请您一定要……」<br>「名字？」我打断他。<br>「人里南郊，风见莳人，求您……」<br>「博丽神社受理了，请回吧。」<br>少年咬着嘴唇，再看了一眼神社的正殿，转身走下石阶。</p><p>扫帚扫过每一处砖石的缝隙。<br>真是个奇怪的家伙。<br>毕竟，神明什么的可是连作为巫女的我都不信的。</p><p><img src="reimu.png" alt="序章" title="序章"></p><center>原画:比良坂真琴，东方三月精～Visionary Fairies in Shrine 第〇话</center><h1 id="第一卷-垂死夜雀的哀鸣"><a href="#第一卷-垂死夜雀的哀鸣" class="headerlink" title="第一卷 垂死夜雀的哀鸣"></a>第一卷 垂死夜雀的哀鸣</h1><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>我干过最蠢的事情，就是在一个夜晚孤身一人踏出人间之里，然后到那条河边吹口琴。</p><p>那是一个仲夏之夜，日历虽刚翻进六月，但夜晚蚱蝉的歌声已清晰可闻，雾之湖的莲花也已在闰五月开了一轮，如墨晕染而成的天空，若是能穿过云层，定能看到那朔月的微弱光芒。<br>大概是想要闻闻六月的花香吧。总之，那天夜晚，我带上母亲留给我的口琴，走出了家门。</p><p>我一直都是很爱花的。<br>我们风见家世代务农，但水稻花显然不是我父亲的最爱。如果他能够选择，一定会在自己的田地里种满向日葵。他从未有机会埋下任何一粒花种，却在书架上摆满了各种园艺书籍，尽管我知道他并不识得几个汉字。他甚至给他的女儿，也就是我的姐姐，取名为「葵」，然而还需要他在铃奈庵的那位店长朋友帮他在纸上写下来。<br>可能是父亲的缘故吧，我也从小就很喜欢花。</p><p>我在人里的街头漫步。人间之里曾经有非常热闹的夜市，但近几年突然就销声匿迹了。往年的这个时候，我的父亲总是会在某个卖花小贩的摊子上买两朵向日葵，带给母亲，母亲每次都会骂父亲不懂事，浪费钱，但脸上却总是挂着笑容。</p><p>我的母亲是一位仆人。她们家世代都归村里的一个大户使唤。以前只需要在忙碌之余到那家去简单打理打理，但四年前一位很不得了的大人物降生后，就到那家去照顾那位转世的小姐了。小姐年龄尚小，一步也离不开身，新年也不见母亲回来看我们，只能收到从那家送来的一张张永远写着「再等一年」的短笺。</p><p>而此刻挂在我胸前的口琴，算是我母亲离别前留给我的唯一的东西了。</p><p>走过运河上的河童桥，就到了西岸。我的姐姐葵在五年前嫁到了这里的盐家大院，从此杳无音讯。盐家大院的院门常年紧闭，如今只能隔着院子的高墙想象她的生活。</p><p>人间之里说大倒也没多大，过了桥后每几步就到了碎石小道的尽头。那里有一片十分繁茂的森林，因为有一位魔法使住在那里，因此通称「魔法森林」。<br>那位魔法使本来是人间之里的雾雨店的，不知道为什么和雾雨老爹闹掰了，搬到魔法森林来住。她是个有点自负的家伙，但确实有足够的实力。魔法主要是星系的，也许是因为香霖堂举办的流星祈愿会吧。<br>我还记得我当时许的愿望是希望父亲的病能好。</p><p>沿着运河继续前进，今天运气挺好的。我松了口气，然后眺望那运河运河与三途川交汇处的无名之丘。</p><p>「那里一定有花朵在绽放。」<br>我心想着。</p><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>一派荒凉。<br>河岸的泥土与岩石还裸露着，寸草未生。<br>我跪下身来，抚摸着残存的野草。看到上面有烧焦的痕迹，我顿时明白这里刚才发生过什么。</p><p>我抬起头，六月，却未有哪怕一朵花绽放。满目尽是苍白的绿色，不见哪怕一点别的颜色。<br>我双手捧起挂在胸前的那只口琴，用嘴唇轻轻包裹了琴格。簧片在气流下微微振动，我尽我所能吹准每一个音符，汇成婉转而悠扬的旋律。</p><p>完成演奏后，我再次跪了下来。<br>「求求你了，让这里再次绽放出鲜花吧，哪怕一朵也好。」<br>我轻声祈祷着。</p><p>此时，一个我未曾预料，却又未敢遗忘的声音，仿佛是命运一般作出了答复。</p><p>「天哪，除了第四小节整个走了调以外，不过也就比夜雀垂死时的哀鸣要好一点罢了。」<br>闻声，我站起身来，拍拍身上的泥土，没有回头看那声音的主人。</p><p>「人类，你是要污染我的流放地吗？」<br>冷笑着，脚步声越来越近。<br>我抬起头来，对上她猩红的目光。<br>我知道，我算是逃不掉了。</p><p>「此处，必须根除一切怯懦。」<br>「此处，一切怯懦都无济于事。」<br>我在心中一遍遍地默念着上白泽老师教我的话，但膝盖一软，不受控制地再次跪倒在地上。</p><p>「人类真是胆小呢，怎么？怕我了？」<br>苦艾绿的头发，血红的双眼，除了嘲弄，更多的是令人不安的危险气息。</p><p>我闭上双眼，深吸一口气。父亲病榻前煎药的苦味，母亲从稗田邸送回的短笺，姐姐出嫁那日盖头下模糊的侧脸。<br>我猜，我是了无牵挂的。</p><p>没有绝望，没有不甘，只是脖子上有坚硬的触感。<br>或许是一把阳伞指向了脖颈，喉结在伞尖上微微颤动。</p><p>「妖怪小姐，这里就是终点了吗？」<br>我苍白地笑了一下，像是舞台剧演员退场的台词，</p><p>风吹起焦土中的灰烬，阳伞轻轻挑起我的下巴。<br>「不过啊，我听说，你还有一个心愿没有了却。」<br>我又听到了她的笑声。<br>「不如，就由你亲手栽种如何？」<br>说着，她将一包什么东西抛到我的脸上，落在我的膝盖边。是一包种子。</p><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><p>身后的那位妖怪小姐不像是在跟着我，倒像是在把我向我家的方向驱赶。<br>拿着那包种子，妖怪小姐理直气壮地赶着我回了家。</p><p>「向日葵。」<br>父亲曾经最爱的花朵，将由他的儿子栽种。</p><p>「要想让鲜花开满河岸，你这人类要干的事情还多着呢。<br>得先育种才行。要足够健壮，足够耐寒、耐热，才能栽过去。」<br>这是她让我带她回家的理由。<br>「在你培育出完美的品种前，我可是哪里都不会去的。」<br>她的嘴角又一次勾起一丝玩味的笑，似乎想看看我听到她这句话会有什么反应。</p><p>「妖怪小姐可是妖怪啊，要是被人类们发现可就惨了。」<br>虚张声势从来都不是我擅长的。<br>「哟，人类，你在威胁我吗？<br>你们人类在我的魔炮面前不还是和那田里的杂草一样？」<br>父亲的稻田在眼前坍缩为灰烬，视野中只剩下惨白。风把烧焦的气息吹入我的鼻腔，这下又轮到我的膝盖发软了。</p><p>「哼，正好拿来种花。」<br>没关系的，父亲大概也希望有朝一日在自己的稻田中随风摇曳的能是向日葵的枝桠吧。</p><p>推开积灰的纸门，妖怪小姐倚着门框，伞尖不耐烦地敲打着地板。<br>我简单地掸去了屋内的灰尘，为妖怪小姐铺好床单，叠好被子。<br>「真小，你姐姐是鸽子吗？」<br>简要地作了评价后，妖怪小姐躺在葵的旧榻上，苦艾绿的发丝散在枕边，像是未被驯服的荆棘。</p><p>她哪里知道，鸽子好歹知道回家。</p><p>当隔壁家的院子传来一声鸡啼，妖怪小姐已在我床前等候多时了。</p><p>「说吧，人类，你还要多久才能起来？」<br>她用伞尖狠狠地捅了一下我的腰部，我瞬间弓起了身子。<br>「嗷……妖怪小姐，真是没个轻重。」<br>我发出了一声介于呻吟与痛呼之间的惨叫声后，不情不愿地爬出了被窝。</p><p>给这位客人做完早餐后，我坐在她的对面，顺势开启了闲聊。</p><p>「话说，妖怪，小姐，你有名字吗？」<br>「幽香。」<br>她像是很不耐烦地说道，用空前残忍的方式击碎了碟中的那个鸡蛋，蛋壳横飞到我的脸上。</p><p>「幽香？和花有关的名字呢。」<br>「哼，你呢，人类？」<br>幽香把蛋白与蛋黄掰开来后，把蛋白撂在一边。</p><p>「风见莳人，你叫我风见就好。」<br>「我还是叫你人类吧，这名字还真是有够愚蠢的。」<br>「怎么会呢，这是我父亲给我取的名字。」<br>「你父亲？哼，真是有创意。」</p><p>幽香冷哼了一声，把蛋黄一口吞了下去，拎起阳伞转身而去。</p><p>「真是浪费粮食。」<br>我不平地嘟囔着，被幽香撂在一边的蛋白，白得像是那夜若隐若现的朔月。</p><h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><p>我的名字很愚蠢吗？我大概从来没有这么想过。<br>「莳人」的意思就是园丁（或者是庭师什么的）。他说，「莳人」种下的绝不只是花种，更是生命与希望。</p><p>一辈子待在稻田中的父亲，将自己的梦想寄托在我的名字上。<br>他不希望我像他一样一辈子被困在稻田中，无法追逐自己真正热爱的事物。他未曾教过我如何耕种，而是早早就把我送入了上白泽老师的寺子屋。父亲两年前因肺病去世后，那片凝结着父亲心血的稻田因无人照料而渐渐就荒废了。如今与其说是「稻田」，不如说是「稗田」。<br>当然，现在更是连稗草都没有了。</p><p>「喂，人类，你在发什么呆呢。」<br>我从思绪中抬起头来，幽香在阳光下冲我大喊道。</p><p>苦艾绿的头发在太阳下泛着些许金光；血红的眼眸却像是海那样澄澈；红格子短裙，鲜艳却并不妖艳。</p><p>我不由自主地向她走近了几步。</p><p>「喂，人类？」<br>「嗯？」<br>「你以前种过花没有？」<br>「呃，没有。」<br>「哼，真是没用呢，你这人类。」<br>她举起阳伞，敲敲我的大臂——这次倒算不得很重——然后飘飘地打开。</p><p>「那我们接下来要干什么，我最亲爱的幽香小姐？」<br>我捂着大臂，嘟囔道。</p><p>幽香弯下腰来，掬了一抔土，凑在鼻前。<br>「嗡嗡，酸碱度刚好。」<br>「你们妖怪也懂这些？」<br>「怎么，就你们人类了不起啊？」</p><p>说到酸碱度，就要想起朝仓老师了。为父亲服满四十九日后，铃奈庵的常客朝仓小姐叫我跟着她学了一段时间科学，所以这些东西我还算是略通一二。</p><p>「你又在发呆，人类。<br>不是你要种花的吗？怎么现在又这么没精神？」<br>幽香把一把铁锹扔给我。<br>「最佳的播种深度是一寸，给我记住了，偏一分我都要剥了你的皮。」<br>幽香的死亡威胁，令我握着铁锹的手不觉紧了几分。</p><p>「坑坑洼洼，参差不齐，你还真是不想活了。」<br>幽香一把夺过我手中的铁锹，照着我的小腿肚敲了一下。</p><p>「行了，接下来开始播种吧。间距一尺，这次给你的误差是百分之三。」<br>我战战兢兢地接过种子，小腿上的肌肉还在作痛。我半跪在地上，用皮尺和粉笔在土地上隔一尺标一个点，接着在各个点位上放上种子。</p><p>「你自己看看你播的什么东西。」<br>幽香挥舞着手中的皮尺，狠狠抽在我的身上，发出皮鞭一般的声音。<br>我倒在田垄上，想要舔舐自己的伤口，却已起不了身。<br>她的身影越来越模糊，目光在阳伞的阴影之下也许闪了闪，我也不确定了。</p><p><strong>幽香的培养日记</strong><br>编号：一<br>日期：第百一十三季水无月初二</p><ul><li>清空田地，焚草肥田；</li><li>土壤弱碱，适宜种植；</li><li>播种深度：平均一寸三分，误差<font color="red">十分之三</font>；</li><li>播种间距：平均一尺零六分，误差<font color="red">百分之六</font>；</li></ul><p>备注：<br><strong>人类真是脆弱的生物啊，不过拿来当肥料也算是不浪费。</strong></p><h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><p>「半夏、陈皮、茯苓、甘草，配二陈汤。」<br>我郑重地从八意大夫手中接过处方笺，紧紧地攥在手中。</p><p>照着铃奈庵的医书，我将这几味药材煎成一锅。那种带着辛酸的苦味是永远也忘不掉的。<br>「父亲，药好了，父亲。」<br>我把药端到病榻前，轻轻为他吹了口热气。</p><p>「风见，你醒了？」<br>煎药的苦味令我再次睁开眼睛，不过，这次躺在床上的并不是父亲。<br>幽香坐在我的床边。那曾令我毛骨悚然的猩红的双眸，此刻荡漾其中的竟是温柔。</p><p>「幽香？」<br>听到了我的声音之后，她瞳孔骤缩，再次变回了往常的样子。<br>「哼，人类真是好脆弱啊。」<br>她的嘴角再次勾起了与那一晚别无二致的冷笑。</p><p>「且不论这个，我昏了多久了？」<br>我伸手去够床头柜上的台历。</p><p>「水无月初三，你昏了一整天呢，风见。」<br>水无月？好像很久没有听到过这种叫法了，不过妖怪小姐会用也不奇怪。</p><p>「等你伤养好了还得接着种花。」<br>幽香竖起食指，用很严厉的语气说道。不过在见识过她眼中的温柔后，就再也不会被她吓到了。</p><p>「不过，风见，你可别以为你这几天能偷懒。」<br>幽香把一叠书堆在床头柜上，晃晃悠悠，看上去随时要倒。</p><p>「你书架上的《幻想乡花卉图鉴》、《园艺入门大全》、《植物学经典编译》……这几本在你伤养好之前都得看完，还要让我考你。」</p><p>幽香抄起那本最厚的《幻想乡花卉图鉴》，对着我的额头，但还是放下了。<br>「幽香，你差点又要害我添新伤了。」<br>我捂着被她放过的额顶。</p><p>接下来一个星期大体上是平静的。每天早上被幽香戳起来做饭，背诵父亲留下来的植物学和园艺学书籍。</p><p>那本《幻想乡花卉图鉴》每页都有父亲用片假名做的批注，尤以菊科的向日葵和马齿苋科的太阳花为最。<br>在我翻到向日葵那两页的时候，还有一张纸条从其中抖落出来。<br><br/></p><font face="TH-Times">ヒマワリノタネ　　ヨンセン𛄡ン<br/>テグワ　　　　　　ハッピャク𛄡ン<br/>イショクゴテ　　　ロッピャク𛄡ン<br/>センテイハサミ　　イチセンゴヒャク𛄡ン<br/>ジョウロ　　　　　ゴヒャク𛄡ン<br/>クマデ　　　　　　ゴヒャク𛄡ン<br/>テオケ　　　　　　ヨンヒャク𛄡ン<br/>アブラシボリキ　　ゴマン𛄡ン<br/>ゴウケイ　　　　　ゴマンハチセンサンビャク𛄡ン<br/>シキン　　　　　　イチマン𛄡ン<br/><br/>カハゴメシニナリマセン<br/>ショウワロクジュサントシ　ロクガツイツカ<br/><br/></font><p>父亲的片假名写得歪歪斜斜，要想拼出来还真是不容易。</p><p>向日葵种子   4000円<br>手锄         800円<br>小铲         600円<br>剪刀         1500円<br>如雨露       500円<br>耙子         500円<br>手桶         400円<br>榨油机       50000円<br>合计         58,300円</p><p>资金         10000円</p><p>「花哪能当饭吃啊。」<br>昭和六十三年  六月初四</p><p>「求求你了，让这里再次绽放出鲜花吧，哪怕一朵也好。」<br>也许，在某个夜深人静的时候，四下无人的地方，他也许下过这样的愿望。</p><p><strong>幻想乡花卉图鉴(节选)</strong><br><strong>菊科·向日葵</strong></p><p>「残阳绽放时，<br>   微风动纱衣。」</p><p><strong>形态</strong><br>一年生草本，茎直立。叶互生。头状花序，径<font face="TH-Times">(ケイ)</font>不盈<font face="TH-Times">(エイ)</font>尺，高近丈。</p><p><strong>习性</strong><br>倾叶向日。</p><p><strong>乡内观赏地</strong><br>梦幻馆花园（不对公众开放）。</p><h2 id="6"><a href="#6" class="headerlink" title="6"></a>6</h2><p><strong>背诵检查记录</strong><br>第百一十三季水无月初九</p><ul><li>园艺学基础及工具使用； <font color="red">风见这小子连如雨露都反着拿。</font><br></li><li>光合作用与呼吸作用；</li><li>孟德尔遗传定律；<font color="red">他说豌豆花的花语是九三三一。</font><br></li><li>向日葵的针对性知识；<font color="red">毕竟他的父亲已经熏陶过一轮了。</font><br></li></ul><p>「看来伤势已经好得差不多了呢。」<br>幽香揭开我身上缠的绷带，触碰着伤痕处长出来的息肉。</p><p>「别乱碰，幽香，疼。」<br>我的脸想必已经涨得通红了，一定是因为疼痛。</p><p>「看来你从今天开始又可以和我一起种花了啊。」<br>幽香的双臂抱在胸前。</p><p>离我们一起播种的日子已经过去了将近一周，田地中的种子尚未有发芽的迹象。</p><p>「怎么会，不发芽呢？」<br>我跪在田垄之间，指甲缝中塞满了泥土。<br>「为什么连杂草都不肯长！明明都按你说的做了！」</p><p>幽香掏出一粒种子，指尖燃起火焰。<br>烧焦的气味弥漫之中，她将烧得碳化的种壳弹进他的衣领。<br>「你瞧，这才是大多数生命——发芽的资格也没有。」</p><p>「也许再过几天就会破土了吧。」<br>我叹了口气。</p><p>十日破晓。<br>早上我再去看时，就有不少已经破土了。嫩绿的幼苗，绝对比幽香的头发令人愉快。</p><p>「还是不理想啊，发芽率。」<br>幽香握着自己右手的手腕，摇着头，冷笑了两声。</p><p>「二十多株总共发了五株，真是，有趣的生命。」<br>幽香的皮靴在田间来回踱步，不知为何，皮靴的声音不如往日踏实。</p><p>风见·<strong>幽香的培育日记</strong><br>编号：2<br>日期：第百一十三季水无月初十（平成十年六月十日）</p><ul><li>测试效果不理想，能量消耗超出预期<font color="red">百分之三十</font>；</li><li>发芽率仅<font color="red">四分之一</font>；</li></ul><h2 id="7"><a href="#7" class="headerlink" title="7"></a>7</h2><p>「行啦，风见。从到你家来我还没出过门呢，真是无趣得很，不如……」<br>幽香双眼微眯，真是不知道又在打什么主意。<br>「好不容易来人间之里，总得看看有什么好玩的地方吧。」</p><p>「你是在我家里憋坏了吗？」<br>我捂嘴偷笑。</p><p>铃铛在微风中摇动，能令金属的声音清脆悦耳的或许只有清风中夹杂的书香。<br>「哈啊？你带我来这里？」<br>幽香瞪大双眼，诧异地看向四周。<br>「风见，你小子真是……够有情趣的。」</p><p>铃奈庵还是一如既往地宁静。大清早并没有多少人来看书，书籍都整齐地摆在书架上。</p><p>「早啊，风见。」<br>本居先生是铃奈庵的庵主，也是我父亲的故交。</p><p>「早啊，本居先生。对啦，小铃呢？」<br>小铃是本居先生的女儿，年仅四岁，却已能说会道，张口就是李白杜甫。以前每次到铃奈庵的时候都能看到她抱着一本唐诗坐在靠近门口的位置。</p><p>「小铃她啊，去寺子屋上课了。可能要下午才回来。」<br>本居先生的脸上挂着温和的微笑。</p><p>幽香不耐烦地在书架间跺脚，本居先生顺着声音无意瞥了一眼，脸色顿时变得阴沉了。<br>「幽香？你这妖怪，有何贵干？」<br>本居先生的语气中怀着人类对妖怪天然的敌意。</p><p>「这你得问那个人类。」<br>幽香用阳伞的曲把把我勾到她的身边。</p><p>「这个嘛……」<br>我嗔了幽香一下，接着说道，<br>「本居先生，幽香小姐要我带她……在人里玩，只能想到铃奈庵了。」</p><p>本居先生上下打量幽香，又看了看我，叹了口气。<br>「莳人，你这孩子还真是和你父亲一样不让人省心。」</p><p>本居先生忽然又板起脸来，用很严厉的语气对幽香说道：<br>「不要想着毁坏书籍，也不要影响铃奈庵的其他人读书，听到了吗？」</p><p>「你们人类都把我当什么了？」<br>幽香把我拉到书架一边，双手叉腰，气鼓鼓地看着我。</p><p>为父亲服满四十九日后，我在铃奈庵打过一段时间工。本居先生人算是很和气的，整理图书什么的一般也都是亲自来干，很少需要我来帮忙。所以虽说是打工，也不过就是每天到铃奈庵来读书罢了。</p><p>铃奈庵有几位常客：科学家朝仓理香子小姐，还有雾雨家的那个魔法使也经常来，名字好像是魔梨沙。两个人分立于铃奈庵的魔法类与科学类两个角落，不相往来。听说他们几个月前为了争夺什么东西大打出手。</p><p>「朝仓小姐在看什么呢？」<br>朝仓小姐的白大褂上还带着松香的味道。<br>「五年级科学，外界的孩子们看的东西真是深奥啊。」<br>朝仓小姐叹了口气，随即眉头恢复紧锁，像是在思索什么。<br>这本《五年级科学》是几个月前一位外界来的冈崎小姐给她的。听她说，冈崎小姐是比她还要厉害的科学家。</p><p>「魔梨沙呢？」<br>这个是幽香问的。作为妖怪，她大概也很擅长魔法吧。她这几天总是到三更半夜还在研究一些和操纵植物有关的魔法。<br>「她啊，她嫌铃奈庵书少，到新来的那个斯卡雷特家去看书了。」<br>朝仓小姐很冷淡地回答道。</p><p>斯卡雷特家是最近才搬到幻想乡来的，一整座岛连同岛上的洋馆一起飞到了雾之湖的中央，一时间引发了人里居民的好奇。听说那里还有一座很大的图书馆，如果有机会一定要去看看。</p><p>「别怪我没提醒你，那家的主人可是吸血鬼呢。」<br>朝仓小姐语气冰冷。</p><p>「幽香，你也挑一本自己想看的吧。」<br>我拉着她到了园艺区。</p><p>「这些不是你该看的吗，莳人？」<br>幽香冷哼了一声。</p><p>「那我想看这本。」<br>我努力伸长自己的手臂，中指离书架顶端的那本书尚三指有余。而幽香踮起脚尖，如探囊取物一般就把这本《向日葵品种一览》拿了下来，像是在嘲讽我比她矮一寸有余的身高。</p><h2 id="8"><a href="#8" class="headerlink" title="8"></a>8</h2><p>大概临近中午了，如果不是幽香强烈抗议，我大概还能再多记住几个向日葵品种吧。</p><p>「风见，你这可恶的人类，看看现在都几点了。」<br>幽香双臂抱胸，不满地嘟囔着。<br>「午时二刻。」</p><p>顺着运河望去，那座少有的双层建筑便是人间之里生意最兴隆的酒家，鲵吞亭。鲵吞亭的掌柜兼看板娘奥野田小姐热情而又不失精明，在顾客之间广受欢迎。最重要的是，价格非常实惠。二十円就能温一碗酒，再加五円就可以上一碟小菜，如果加到五十円就可以开荤了。</p><p>「呀呀，风见家的儿子，真是稀客。还带着……这不是幽香大人嘛。」<br>奥野田小姐轻笑了两下，带着难以言说的意味。<br>「风见幽香大人想要点什么？」</p><p>我的脸颊顿时发烫，不由自主地埋了下去。<br>「不要把这家伙愚蠢的姓加在我头上。」<br>幽香说这话的时候有点咬牙切齿了。<br>「行了，你俩真是开不了玩笑。」<br>奥野田小姐自顾自地笑了笑，拿出便条。</p><p>幽香拍了一下我的手臂，我才抬起头来。<br>「奥野田小姐，先温两碗酒，要一碟豌豆。」</p><p>鲵吞亭的清酒口感柔和，味道甘甜，比父亲在家里常喝的那些要好太多了。<br>「幽香，你还记不记得豌豆的花语？」<br>我夹起一颗豌豆，放在幽香的碗里。<br>「你这家伙，真是，就不应该让你背那些东西。」<br>幽香一脸无语地看着我。</p><p>「你看，那不是魔梨沙吗？」<br>魔梨沙一到店，所有喝酒的人便都看着他笑，有的叫道，<br>「魔理沙，你脸上又添上新伤疤了！」<br>她不回答，对柜里的奥野田小姐说，<br>「温两碗酒，要一碟茴香豆。」<br>便排出九枚十円硬币，青铜制的硬币带着淡淡的金属光泽。</p><p>「你一定又偷了人家的东西了！」<br>他们又故意高声嚷道。<br>「你怎么这样凭空污人清白……」<br>魔梨沙睁大眼睛说。<br>「什么清白？我今天上午还看到你到斯卡雷特家去偷书，吊着打。」<br>魔理沙便涨红了脸，额上的青筋条条绽出，争辩道，「借书不能算偷……暂时借走！……魔法使的事情，能算偷吗？」<br>引得众人都哄笑起来；店内外都充满了快活的空气。</p><p>魔梨沙一直都是个非常有趣的人，之前在铃奈庵的时候，我也很乐意和她一起讨论，从魔法到日常琐事。<br>「这家伙现在已经沦落到这个地步了吗？」<br>幽香看着魔梨沙狼狈的样子，叹了口气。</p><p>我的酒量一向是不好的。哪怕是在葵的婚礼上，我也是喝了不到两杯就倒了。<br>「风见，你这没出息的，怎么才喝这么点就不行了。」<br>幽香一脸鄙夷地看着我。</p><p>「喂，醒醒，醒醒。」<br>幽香拍了拍桌子，声音中或许也夹着一丝不易察觉的醉意。</p><p>那天晚上葵的声音也是这样的。她给盐家的五桌亲戚每一桌都敬了两杯，还带着泪痕的脸颊泛着红晕。</p><h2 id="9"><a href="#9" class="headerlink" title="9"></a>9</h2><p>「风见，你过来看看这是什么。」<br>幽香从指尖弹出三粒花种，正中我的胸口。</p><p>「嗷——幽香，有什么？」<br>我揉揉被她当作靶心的地方，我的心脏右侧一寸左右的位置。</p><p>刚刚长出花苞的幼苗旁，不知名的野草已比幼苗还要高出一头。而地面上，每一块空地都被杂草挤占。<br>「打点除草剂不就是了。」<br>我打了个哈欠，漫不经心地答道。</p><p>「除草剂！风见！你！为什么要提那么可怕的东西！」<br>幽香的双眼突然瞪得很大，充斥其中的既有愤怒，又有一种我从未觉得会从她眼中看到的情感——恐惧。</p><p>「幽香，你这样强大的妖怪也会有害怕的东西吗？」<br>我看着她的表情，忍俊不禁道。</p><p>「除草剂！除草剂！你们人类为了对付我们总是无所不用其极！」<br>「除草剂是对付杂草的，才不是对付你这种妖怪的。」<br>我强忍住笑意，转身走向库房，拎来两个金属罐，罐内装着的就是父亲一直藏着的禾本科专用除草剂。<br>「我不管！我不许你在我的花田里用除草剂！」<br>幽香展开阳伞，把花田护在身后。</p><p>「那你说吧，要我怎么除杂草。」<br>我放下两罐除草剂，双手叉腰，看着这位妖怪小姐。</p><p>「哈啊？」<br>她把一支手锄交在我的手中，漆黑的金属上散发着淡淡的光泽。<br>「斩草要除根，记住了。一会儿我还要来检查。」<br>她瞪了我一眼，小心翼翼地拎着两罐除草剂回到库房。留下我一个人在原地，用一把小手锄同肆虐的杂草殊死搏斗。</p><p>风见·<strong>幽香的培育日记</strong><br>编号：5<br>日期：第百一十三季水无月二十三（平成十年六月二十三）</p><ul><li>无害化清理杂草，<font color="red">除草剂绝对禁止</font>； </li><li>杂草种类统计：马齿苋、蒲公英、狗尾草、稗草、酢浆草等；<br>备注：<br><strong>风见这家伙除得真是够干净的，才除的杂草第二天又发出来不少。</strong><br><strong>第百一十三季水无月二十四。</strong></li></ul><h2 id="10-新"><a href="#10-新" class="headerlink" title="10(新)"></a>10(新)</h2><p>今夜的人里灯火阑珊。酉时左右，人里中心的人群还未散去，打扮得花枝招展的小町们表演着的大概是某种传统的歌舞吧。<br>「幽香，来得有点晚了呢。」<br>我瞄了一眼河童摊上摆放的手表。<br>「再早半刻钟还能听到幺乐团的幻奏呢。」<br>「那有什么好听的，不过是老掉牙的音色。」<br>幽香白了我一眼。</p><p>「幽香，这个想不想要？」<br>我从河童摊上随手拿了一个护身符，放在幽香手上。<br>「这是什么？又是你们这些人类弄的无聊的小玩意儿？」<br>幽香抬起手，仔细端详着。</p><p>「这是护身符，可以保你平安的。」<br>「切，我才不需要这东西来保护我。」<br>幽香把护身符摔到地上。到我捡起来时，护身符上已被敲掉了一个小角了。<br>「不要就不要，至于摔地上吗？」<br>我叹了口气，嘟囔道，拍拍护身符上沾上的尘土，然后收进衣袋。</p><p>「哼，你们人类总是那么愚蠢，居然妄想能与死人对话。」<br>「是真的！巫女大人不会骗我的。神社的御手洗川直通三途川，只要在盂兰盆节的夜晚到御手洗川送灯，给逝者的话语就能随着纸灯一路飘到三途川的彼岸。」<br>幽香听了这话后陷入沉默，也许是被我说服了，又或许是对人类的愚蠢彻底无语了。</p><p>我拿出一张《文文。新闻》，简单几步，一个纸灯笼便叠了出来。<br>「那还得有根蜡烛呢，蜡烛，是你买得起的吗？」<br>幽香的声音中带着些许兴趣。</p><p>「人里只有大户人家用得起蜡烛，但是……他们却并不会总是等蜡烛燃尽再扔掉。」<br>盐家大院后门的垃圾桶，还未燃到一半就被随手丢弃的蜡烛比比皆是。</p><p>「莳人，你……」<br>幽香和垃圾桶之间保持着距离。<br>「幽香，人类的愚蠢与智慧都体现在这里。」<br>我笑了笑。</p><p>解决了纸灯的问题，我带着幽香走出人间之里，走上那条我曾经无数次走过的参拜道。<br>酉正时分，太阳依偎在西边的妖怪之山旁将天空晕染成橘色。幻想乡的妖怪们大概也要开始躁动了。</p><p>「远处那是夜雀与山彦的歌声吧，真是的。」<br>夜雀和山彦对人类来说也许都可以归入妖怪一类。夜雀会在夜晚用歌声使人夜盲；而山彦会正直地回应朝空荡的山谷大喊的人类，不过也有人说，那不过是回声罢了。</p><p>每到夜幕降临之时，一只夜雀与一只山彦就会结伴出来唱歌。<br>「他们的组合名叫鸟兽伎乐，她们的噪音也和组合的名字一样愚蠢。这附近的妖怪早就要受不了他们了。」<br>幽香撇撇嘴，脸上露出很不屑的表情。</p><p>「喂，所以你才说我的口琴是垂死夜雀的哀鸣！」<br>「怎么啦？找到组织啦。」幽香看着我，饶有兴味地笑了笑。</p><p>口琴在胸前闪着淡淡的光芒，是此时已升起的满月。</p><h2 id="11-新"><a href="#11-新" class="headerlink" title="11(新)"></a>11(新)</h2><p>人里流传着许多关于夜雀的传说。<br><strong>待续</strong></p><h1 id="第二卷"><a href="#第二卷" class="headerlink" title="第二卷"></a>第二卷</h1><h2 id="1-1"><a href="#1-1" class="headerlink" title="1"></a>1</h2><p><strong>待续。</strong></p><h1 id="第三卷"><a href="#第三卷" class="headerlink" title="第三卷"></a>第三卷</h1><h2 id="1-2"><a href="#1-2" class="headerlink" title="1"></a>1</h2><p><strong>待续。</strong></p>]]></content>
    
    
    <summary type="html">东方Project二次创作轻小说，更新时间令和七年(第百四十季)早苗月初六</summary>
    
    
    
    <category term="zh-CN" scheme="https://hiedanoajuu.github.io/categories/zh-CN/"/>
    
    <category term="东方Project" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E4%B8%9C%E6%96%B9Project/"/>
    
    
    <category term="东方Project" scheme="https://hiedanoajuu.github.io/tags/%E4%B8%9C%E6%96%B9Project/"/>
    
    <category term="二次创作" scheme="https://hiedanoajuu.github.io/tags/%E4%BA%8C%E6%AC%A1%E5%88%9B%E4%BD%9C/"/>
    
    <category term="风见幽香" scheme="https://hiedanoajuu.github.io/tags/%E9%A3%8E%E8%A7%81%E5%B9%BD%E9%A6%99/"/>
    
    <category term="寿命论" scheme="https://hiedanoajuu.github.io/tags/%E5%AF%BF%E5%91%BD%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>QEMU MS-DOS环境配置</title>
    <link href="https://hiedanoajuu.github.io/2025/02/09/qemu-ms-dos/"/>
    <id>https://hiedanoajuu.github.io/2025/02/09/qemu-ms-dos/</id>
    <published>2025-02-09T14:44:34.000Z</published>
    <updated>2025-07-30T05:26:57.102Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>也是学到了Masm中运用<code>int 13h</code>对软盘进行读写这一部分了。不过，DOSBox虽然支持挂载虚拟软驱，但并不支持软盘启动。对此，还是决定把Masm开发环境迁移到<strong>QEMU</strong>虚拟机上。</p><h1 id="安装QEMU"><a href="#安装QEMU" class="headerlink" title="安装QEMU"></a>安装QEMU</h1><p>在笔者使用的Arch Linux上使用<code>pacman</code>安装<code>qemu</code>尤为方便，只需要:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S qemu-full</span><br></pre></td></tr></table></figure></p><p>接下来，我们为虚拟机创建一个硬盘镜像，<code>500MB</code>的应该就足够了:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">qemu-img create -f qcow2 /path/to/c.img 500M</span><br><span class="line"><span class="comment"># /path/to/* 替换成自己的路径，下同</span></span><br></pre></td></tr></table></figure></p><p>随后，到这个这个网站<a href="https://winworldpc.com/product/ms-dos/50">https://winworldpc.com/product/ms-dos/50</a>下载MS-DOS 5.0的镜像，这里我选择的是单软盘的版本。</p><p>用QEMU载入前面创建的硬盘镜像和下载的软盘镜像:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-i386 -m 32M -hda c.img -fda ms-dos-floppy.img -boot a</span><br></pre></td></tr></table></figure><br>这里我们指定内存为<code>32MB</code>，前面创建的硬盘镜像<code>c.img</code>为C盘，下载的MS-DOS软盘镜像<code>ms-dos-floppy.img</code>为A盘，并以A盘作为启动盘，各参数可以根据实际自行调整。</p><p><img src="dos-floppy.png" alt="MS-DOS安装" title="MS-DOS安装"><br>于是我们就进入了安装MS-DOS的界面了，过程没什么好说的，提供的英文指示也非常通俗易懂。</p><p><img src="dos-shell.png" alt="MS-DOS Shell" title="MS-DOS Shell"><br>安装完成后重启，如果进入了这个<code>MS-DOS Shell</code>就说明安装成功了。</p><h1 id="配置开发环境"><a href="#配置开发环境" class="headerlink" title="配置开发环境"></a>配置开发环境</h1><p>首先这个<code>MS-DOS Shell</code>没什么大用。先退出，然后到根目录下的自启动脚本<code>autoexec.bat</code>把它拿掉即可。<br>接下来，我们把Masm的开发环境全部迁移过来。<br>先回到<code>DOSBox</code>，在其中新建一个<code>a.img</code>的软盘镜像:<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imgmake a.img -t floppy</span><br></pre></td></tr></table></figure><br>接着，挂载这个镜像到A盘:<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imgmount A a.img -t floppy</span><br></pre></td></tr></table></figure><br>随后把开发环境的文件全都<code>copy</code>到A盘。<br>然后启动QEMU，并把<code>a.img</code>挂载为QEMU的A盘:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-i386 -m 32M -hda c.img -fda a.img -boot c</span><br></pre></td></tr></table></figure><br>再把A盘里的文件<code>copy</code>到C盘，并在<code>autoexec.bat</code>配置一下环境变量，即可。</p><h1 id="DOSBox"><a href="#DOSBox" class="headerlink" title="DOSBox"></a>DOSBox</h1><p>至此，我们已经正式完成了开发环境由DOSBox到QEMU的转移。不过，也没必要把物理机上的DOSBox删掉。我们可以利用DOSBox在物理机上读写<code>a.img</code>，从而实现物理机与QEMU虚拟机的交互与文件传递。具体的操作上面也已经演示过了，不再赘述。</p>]]></content>
    
    
    <summary type="html">QEMU MS-DOS系统安装及Masm开发环境配置</summary>
    
    
    
    <category term="zh-CN" scheme="https://hiedanoajuu.github.io/categories/zh-CN/"/>
    
    <category term="计算机" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="汇编语言" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Masm" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/Masm/"/>
    
    
    <category term="计算机" scheme="https://hiedanoajuu.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="操作系统" scheme="https://hiedanoajuu.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="开发工具" scheme="https://hiedanoajuu.github.io/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>编写int 9中断例程</title>
    <link href="https://hiedanoajuu.github.io/2025/02/04/int9/"/>
    <id>https://hiedanoajuu.github.io/2025/02/04/int9/</id>
    <published>2025-02-04T08:53:48.000Z</published>
    <updated>2025-07-30T05:25:53.880Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目情景"><a href="#项目情景" class="headerlink" title="项目情景"></a>项目情景</h1><p>安装一个新的int 9中断例程，功能:在DOS下，按下“A”键后，除非不再松开，如果松开，就显示满屏幕的“A”，其他的键照常处理。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>题目的要求如下：</p><ul><li>释放“A”键，显示满屏幕的“A”；</li><li>正常处理其他的键；<br>有个很奇怪的点是，对于按下“A”键后“A”需不需要正常处理，原题的说明并不清楚。<br>在这里，我认为“A”并不属于“其他的键”的范畴，因此不需要正常处理，也不需要让DOS将其输出在屏幕上。</li></ul><p>下面的程序中，我们要在内存中写入新的<code>int 9</code>中断例程，为了防止<code>int 9</code>中断例程被操作系统和其他应用程序改写和覆盖，我们可以将其写入中断向量表的空白部分，也即<code>0:200</code>-<code>0:2FF</code>。同时，我们需要在程序中预留开头的<strong>2个字</strong>来保存原来的<code>int 9</code>例程的地址，以便调用BIOS提供的<code>int 9</code>对输入进行正常处理。</p><p>并且，我们需要改写中断向量表中<code>int 9</code>所指向的中断例程位置，将保存<code>int 9</code>例程位置的<code>0:(4*9)</code>和<code>0:(4*9+2)</code>两个字中存储的地址存入<code>0:200</code>和<code>0:202</code>两个字，并将原位置的地址改写为新的<code>int 9</code>中断例程的地址:<code>0:204</code>。</p><h1 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h1><h2 id="int-9中断例程"><a href="#int-9中断例程" class="headerlink" title="int 9中断例程"></a>int 9中断例程</h2><p>先来编写本程序的核心，<code>int 9</code>中断例程：</p><p>首先判断按下的是否是<code>A</code>键，如果是<code>A</code>键，进行循环判断，直到另一个键被按下(或者<code>A</code>键被松开)触发新的中断例程，跳出循环：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int9:</span><br><span class="line">check:</span><br><span class="line">    in al,60h</span><br><span class="line">cmp al,1eh ; 按下&quot;A&quot;键</span><br><span class="line">je check ; 不处理</span><br></pre></td></tr></table></figure><br>(感觉这里的处理方式非常危险，但除此以外并没有更好的方法)</p><p>调用<code>BIOS</code>提供的<code>int 9</code>例程，对其他键进行正常处理:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pushf</span><br><span class="line">call dword ptr cs:[200h] ; CS=0,0:200为先前的int 9例程位置的保存处</span><br><span class="line">; 调用先前的int 9例程</span><br></pre></td></tr></table></figure></p><p>判断是否是<code>A</code>键被松开，如果不是，跳过下面显示满屏幕的<code>A</code>的程序，直接返回:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cmp al,9eh ; 释放&quot;A&quot;</span><br><span class="line">jne int9_iret</span><br><span class="line">......</span><br><span class="line">int9_iret:</span><br><span class="line">    ......</span><br><span class="line">    iret</span><br></pre></td></tr></table></figure></p><p>如果是，显示满屏幕的“A”，再返回:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cmp al,9eh ; 释放&quot;A&quot;</span><br><span class="line">jne int9_iret</span><br><span class="line"></span><br><span class="line">; 打印&quot;A&quot;</span><br><span class="line">mov cx,2000</span><br><span class="line">mov ax,0b800h</span><br><span class="line">mov es,ax</span><br><span class="line">mov bx,0</span><br><span class="line">s0:</span><br><span class="line">    mov byte ptr es:[bx],41h</span><br><span class="line">    add bx,2</span><br><span class="line">loop s0</span><br><span class="line"></span><br><span class="line">int9_iret:</span><br><span class="line">    ......</span><br><span class="line">    iret</span><br></pre></td></tr></table></figure><br>保存在例程中需要被改写的寄存器的值:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int9:</span><br><span class="line">    push ax</span><br><span class="line">    push bx</span><br><span class="line">    push cx</span><br><span class="line">    push es</span><br><span class="line">    ......</span><br><span class="line">int9_iret:</span><br><span class="line">    pop es</span><br><span class="line">    pop cx</span><br><span class="line">    pop bx</span><br><span class="line">    pop ax</span><br><span class="line">    iret</span><br></pre></td></tr></table></figure><br>定义一个<code>int9_end</code>占位标号，便于在安装时计算<code>int 9</code>例程的长度:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int9_end:</span><br><span class="line">    nop</span><br></pre></td></tr></table></figure></p><h2 id="安装程序"><a href="#安装程序" class="headerlink" title="安装程序"></a>安装程序</h2><p>指定段寄存器:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code,ss:stack</span><br></pre></td></tr></table></figure><br>定义栈段<code>stack</code>，用于保存寄存器的值:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stack segment</span><br><span class="line">    db 128 dup (0)</span><br><span class="line">stack ends</span><br></pre></td></tr></table></figure><br>定义代码段<code>code</code>，用于存放安装程序和<code>int 9</code>例程:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">code segment</span><br><span class="line">......</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><br>初始化栈:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov ax,stack</span><br><span class="line">mov ss,ax</span><br><span class="line">mov sp,128</span><br></pre></td></tr></table></figure><br>利用串传输指令<code>movsb</code>安装<code>int 9</code>例程，<code>ds:si</code>指向起始位置，<code>es:di</code>指向终点，<code>cx</code>存放长度，<code>cld</code>指定方向为正:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mov ax,cs</span><br><span class="line">mov ds,ax</span><br><span class="line">mov ax,0</span><br><span class="line">mov es,ax</span><br><span class="line"></span><br><span class="line">mov si,offset int9</span><br><span class="line">mov di,204h</span><br><span class="line">mov cx,offset int9_end - offset int9 ; Length of int9</span><br><span class="line">cld</span><br><span class="line">rep movsb</span><br></pre></td></tr></table></figure><br>将原先的<code>int 9</code>中断例程位置保存在<code>0:200</code>和<code>0:202</code>:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov ax,es:[9*4]</span><br><span class="line">mov es:[200h],ax</span><br><span class="line">mov ax,es:[9*4+2]</span><br><span class="line">mov es:[202h],ax</span><br></pre></td></tr></table></figure><br>将新<code>int 9</code>的地址写入中断向量表，同时用<code>cli</code>和<code>sti</code>防止在改写中断向量表时触发中断:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cli</span><br><span class="line">mov word ptr es:[9*4],204h</span><br><span class="line">mov word ptr es:[9*4+2],0</span><br><span class="line">sti</span><br></pre></td></tr></table></figure><br>完成安装，最后返回:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br></pre></td></tr></table></figure><br>完整的程序如下:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code,ss:stack</span><br><span class="line"></span><br><span class="line">stack segment</span><br><span class="line">    db 128 dup (0)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">    start:</span><br><span class="line">        ; Stack init</span><br><span class="line">        mov ax,stack</span><br><span class="line">        mov ss,ax</span><br><span class="line">        mov sp,128</span><br><span class="line"></span><br><span class="line">        ; Install new int9</span><br><span class="line">        mov ax,cs</span><br><span class="line">        mov ds,ax</span><br><span class="line">        mov ax,0</span><br><span class="line">        mov es,ax</span><br><span class="line"></span><br><span class="line">        mov si,offset int9</span><br><span class="line">        mov di,204h</span><br><span class="line">        mov cx,offset int9_end - offset int9 ; Length of int9</span><br><span class="line">        cld</span><br><span class="line">        rep movsb</span><br><span class="line"></span><br><span class="line">        ; Save the address of former int9</span><br><span class="line">        mov ax,es:[9*4]</span><br><span class="line">        mov es:[200h],ax</span><br><span class="line">        mov ax,es:[9*4+2]</span><br><span class="line">        mov es:[202h],ax</span><br><span class="line"></span><br><span class="line">        ; Write IVT</span><br><span class="line">        cli</span><br><span class="line">        mov word ptr es:[9*4],204h</span><br><span class="line">        mov word ptr es:[9*4+2],0</span><br><span class="line">        sti</span><br><span class="line"></span><br><span class="line">; Terminate</span><br><span class="line">        mov ax,4c00h</span><br><span class="line">        int 21h</span><br><span class="line"></span><br><span class="line">    ; New int9</span><br><span class="line">    int9:</span><br><span class="line">        push ax</span><br><span class="line">        push bx</span><br><span class="line">        push cx</span><br><span class="line">        push es</span><br><span class="line"></span><br><span class="line">check:</span><br><span class="line">    in al,60h</span><br><span class="line">cmp al,1eh ; Press &quot;A&quot;</span><br><span class="line">je check ; Not to treat</span><br><span class="line"></span><br><span class="line">        pushf</span><br><span class="line">        call dword ptr cs:[200h]</span><br><span class="line">        ; Call former int_9</span><br><span class="line"></span><br><span class="line">        cmp al,9eh ; Release &quot;A&quot;</span><br><span class="line">        jne int9_iret</span><br><span class="line"></span><br><span class="line">; Print &quot;A&quot;</span><br><span class="line">        mov cx,2000</span><br><span class="line">        mov ax,0b800h</span><br><span class="line">        mov es,ax</span><br><span class="line">        mov bx,0</span><br><span class="line">        s0:</span><br><span class="line">            mov byte ptr es:[bx],41h</span><br><span class="line">            add bx,2</span><br><span class="line">        loop s0</span><br><span class="line">        int9_iret:</span><br><span class="line">            pop es</span><br><span class="line">            pop cx</span><br><span class="line">            pop bx</span><br><span class="line">            pop ax</span><br><span class="line">            iret</span><br><span class="line">        int9_end:</span><br><span class="line">            nop</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><br>有点抽象，但考虑到题目的要求本来就不太清晰……</p><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p>编译、链接，生成<code>int9.exe</code>:<br><img src="assemble.png" alt="编译"><br>运行结果如视频所示:</p><iframe src="show.mp4"></iframe><p>可以看到，实现了我们预想的功能。<br><strong>项目完成</strong></p>]]></content>
    
    
    <summary type="html">题目要求好奇怪啊（</summary>
    
    
    
    <category term="zh-CN" scheme="https://hiedanoajuu.github.io/categories/zh-CN/"/>
    
    <category term="计算机" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="汇编语言" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Masm" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/Masm/"/>
    
    
    <category term="计算机" scheme="https://hiedanoajuu.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="编程语言" scheme="https://hiedanoajuu.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="操作系统" scheme="https://hiedanoajuu.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>访问CMOS中的系统时间</title>
    <link href="https://hiedanoajuu.github.io/2025/02/01/time-exe/"/>
    <id>https://hiedanoajuu.github.io/2025/02/01/time-exe/</id>
    <published>2025-02-01T13:27:59.000Z</published>
    <updated>2025-07-30T05:30:01.220Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目情景"><a href="#项目情景" class="headerlink" title="项目情景"></a>项目情景</h1><p>编程，以“年/月/日 时:分:秒”的格式，显示当前的日期、时间。</p><p>注意：CMOS RAM中存储着系统的配置信息，除了保存时间信息的单元外，不要向其他的单元中写入内容，否则将引起一些系统错误。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>在Linux系统上对应的命令<code>date</code>的效果如图所示:<br><img src="date.png" alt="date" title="date"><br>而我们需要实现的就是和上图差不多的效果。</p><p>PC机中存在一个被称为<strong>CMOS RAM</strong>(下简称CMOS)的部件，包含一个实时钟与一个128字节的RAM，我们所需要的系统时间就存储在其中。CMOS有两个端口，端口地址为<code>70h</code>和<code>71h</code>。CPU通过这两个端口读写CMOS。<br><code>70h</code>是地址端口，<code>71h</code>是数据端口。CPU需要先将需要进行读写操作的CMOS单元地址送入<code>70h</code>，再对<code>71h</code>端口进行读写。<br>在CMOS中存放着<strong>年</strong>、<strong>月</strong>、<strong>日</strong>、<strong>时</strong>、<strong>分</strong>、<strong>秒</strong>的时间信息，长度都为1字节，存放的单元依次为:<br>秒:0    分:2    时:4    日:7    月:8    年:9<br>可以将其分为两组，一组<strong>年月日</strong>步长为<strong>1</strong>，一组<strong>时分秒</strong>步长为<strong>2</strong>。</p><p>时间信息以<strong>BCD码</strong>形式存放，即将各位数字分别以二进制形式保存。1字节可保存两位，高4位保存十位，低4位保存个位，显示时需要将二者分离。</p><h1 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h1><p>指定各段的段寄存器:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code,ds:text,ss:stack</span><br></pre></td></tr></table></figure><br>定义数据段<code>text</code>，用于存放需要打印的格式化时间字符串:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text segment</span><br><span class="line">    db &quot;yy/mm/dd hh:mm:ss&quot;,&quot;$&quot;</span><br><span class="line">    ; 格式化:年/月/日 时:分:秒</span><br><span class="line">text ends</span><br></pre></td></tr></table></figure><br>定义栈段<code>stack</code>，用于暂存寄存器:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stack segment</span><br><span class="line">    db 16 dup (0)</span><br><span class="line">stack ends</span><br></pre></td></tr></table></figure><br>定义代码段<code>code</code>和程序起始点<code>start</code>:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">......</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><br>初始化段寄存器，<code>ds</code>指向<code>text</code>段:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov ax,text</span><br><span class="line">mov ds,ax</span><br></pre></td></tr></table></figure><br>清屏:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mov ax,0b800h</span><br><span class="line">mov es,ax</span><br><span class="line">mov si,0</span><br><span class="line">mov cx,2000</span><br><span class="line">s2:</span><br><span class="line">    mov word ptr es:[si],0720h</span><br><span class="line">    add si,2</span><br><span class="line">loop s2</span><br></pre></td></tr></table></figure><br>接下来定义子程序<code>read_cmos</code>，读取CMOS的指定单元(<code>al</code>存放)，转化为字符串，并写入<code>text</code>段指定地址(<code>bx</code>给出):<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">read_cmos:</span><br><span class="line">        ; 名称:read_cmos</span><br><span class="line">        ; 功能:读取CMOS RAM指定单元</span><br><span class="line">        ; 参数:(al)-&gt;地址(CMOS)</span><br><span class="line">        ; 返回:ds:bx(in)</span><br><span class="line">        push cx</span><br><span class="line">        push ax</span><br><span class="line"></span><br><span class="line">        ; 读取CMOS</span><br><span class="line">        out 70h,al</span><br><span class="line">        in al,71h</span><br><span class="line"></span><br><span class="line">        ; 分离个位与十位</span><br><span class="line">        mov ah,al</span><br><span class="line">        mov cl,4</span><br><span class="line">        shr ah,cl</span><br><span class="line">        and al,00001111b</span><br><span class="line"></span><br><span class="line">        ; BCD -&gt; Ascii</span><br><span class="line">        add ah,30h</span><br><span class="line">        add al,30h</span><br><span class="line">        </span><br><span class="line">        ; 写入</span><br><span class="line">        mov ds:[bx],ah</span><br><span class="line">        mov ds:[bx+1],al</span><br><span class="line"></span><br><span class="line">        pop ax</span><br><span class="line">        pop cx</span><br><span class="line">        ret</span><br></pre></td></tr></table></figure><br>调用<code>read_cmos</code>子程序，分两组<strong>年月日</strong>和<strong>时分秒</strong>写入:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">; 年月日</span><br><span class="line">mov al,9</span><br><span class="line">mov cx,3</span><br><span class="line">mov bx,0</span><br><span class="line">s0:</span><br><span class="line">    call read_cmos</span><br><span class="line">    add bx,3</span><br><span class="line">    dec al ; 年:9,月:8,日:7</span><br><span class="line">loop s0</span><br><span class="line"></span><br><span class="line">; 时分秒</span><br><span class="line">mov al,4</span><br><span class="line">mov cx,3</span><br><span class="line">mov bx,9</span><br><span class="line">s1:</span><br><span class="line">    call read_cmos</span><br><span class="line">    add bx,3</span><br><span class="line">    sub al,2 ; 时:4,分:2,秒:0</span><br><span class="line">loop s1</span><br></pre></td></tr></table></figure><br>利用<code>int 10h</code>和<code>int 21h</code>提供的中断例程打印字符串:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mov ah,2   ; 设置光标</span><br><span class="line">mov bh,0   ; 页</span><br><span class="line">mov dh,12  ; 行</span><br><span class="line">mov dl,20h ; 列</span><br><span class="line">int 10h</span><br><span class="line"></span><br><span class="line">mov ah,9   ; 打印</span><br><span class="line">mov dx,0   ; 文本地址</span><br><span class="line">int 21h</span><br></pre></td></tr></table></figure><br>将光标设置在最后一行，显示提示符:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mov ah,2   ; 设置光标</span><br><span class="line">mov bh,0   ; 页</span><br><span class="line">mov dh,24  ; 行</span><br><span class="line">mov dl,0   ; 列</span><br><span class="line">int 10h</span><br></pre></td></tr></table></figure><br>最后返回:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br></pre></td></tr></table></figure></p><p>完整的程序如下:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code,ds:text,ss:stack</span><br><span class="line"></span><br><span class="line">text segment</span><br><span class="line">    db &quot;yy/mm/dd hh:mm:ss&quot;,&quot;$&quot;</span><br><span class="line">    ; Format</span><br><span class="line">text ends</span><br><span class="line"></span><br><span class="line">stack segment</span><br><span class="line">    db 16 dup (0)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">    start:</span><br><span class="line">        mov ax,text</span><br><span class="line">        mov ds,ax</span><br><span class="line"></span><br><span class="line">        ; Clear</span><br><span class="line">        mov ax,0b800h</span><br><span class="line">        mov es,ax</span><br><span class="line">        mov si,0</span><br><span class="line">        mov cx,2000</span><br><span class="line">        s2:</span><br><span class="line">            mov word ptr es:[si],0720h</span><br><span class="line">            add si,2</span><br><span class="line">        loop s2</span><br><span class="line"></span><br><span class="line">        mov al,9</span><br><span class="line">        mov cx,3</span><br><span class="line">        mov bx,0</span><br><span class="line">        s0:</span><br><span class="line">            call read_cmos</span><br><span class="line">            add bx,3</span><br><span class="line">            dec al ; y:9,m:8,d:7</span><br><span class="line">        loop s0</span><br><span class="line"></span><br><span class="line">        mov al,4</span><br><span class="line">        mov cx,3</span><br><span class="line">        mov bx,9</span><br><span class="line">        s1:</span><br><span class="line">            call read_cmos</span><br><span class="line">            add bx,3</span><br><span class="line">            sub al,2 ; h:4,m:2,s:0</span><br><span class="line">        loop s1</span><br><span class="line"></span><br><span class="line">        mov ah,2   ; Set Cursor</span><br><span class="line">        mov bh,0   ; Page</span><br><span class="line">        mov dh,12  ; Line</span><br><span class="line">        mov dl,20h ; Column</span><br><span class="line">        int 10h</span><br><span class="line"></span><br><span class="line">        mov ah,9   ; Print</span><br><span class="line">        mov dx,0   ; text</span><br><span class="line">        int 21h</span><br><span class="line"></span><br><span class="line">        mov ah,2   ; Set Cursor</span><br><span class="line">        mov bh,0   ; Page</span><br><span class="line">        mov dh,24  ; Line</span><br><span class="line">        mov dl,0   ; Column</span><br><span class="line">        int 10h</span><br><span class="line"></span><br><span class="line">        ; Terminate</span><br><span class="line">        mov ax,4c00h</span><br><span class="line">        int 21h</span><br><span class="line"></span><br><span class="line">        read_cmos:</span><br><span class="line">            ; Name:read_cmos</span><br><span class="line">            ; Function:Read designated byte of CMOS RAM</span><br><span class="line">            ; Parameter:(al)-&gt;address(CMOS)</span><br><span class="line">            ; Return:ds:bx(in)</span><br><span class="line">            push cx</span><br><span class="line">            push ax</span><br><span class="line"></span><br><span class="line">            ; Read CMOS</span><br><span class="line">            out 70h,al</span><br><span class="line">            in al,71h</span><br><span class="line"></span><br><span class="line">            ; Isolate</span><br><span class="line">            mov ah,al</span><br><span class="line">            mov cl,4</span><br><span class="line">            shr ah,cl</span><br><span class="line">            and al,00001111b</span><br><span class="line"></span><br><span class="line">            ; BCD -&gt; Ascii</span><br><span class="line">            add ah,30h</span><br><span class="line">            add al,30h</span><br><span class="line"></span><br><span class="line">            mov ds:[bx],ah</span><br><span class="line">            mov ds:[bx+1],al</span><br><span class="line"></span><br><span class="line">            pop ax</span><br><span class="line">            pop cx</span><br><span class="line">            ret</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><br>体量不大，逻辑也还是很清晰的。</p><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p>编译、链接，生成<code>time.exe</code>:<br><img src="assemble.png" alt="编译" title="编译"><br>运行结果如图所示:<br><img src="time.png" alt="运行结果" title="运行结果"><br>可以看到，完美地实现了我们预想的功能，已经达到了系统工具级水准(<br><strong>项目完成</strong></p>]]></content>
    
    
    <summary type="html">达到了系统工具级水准(</summary>
    
    
    
    <category term="zh-CN" scheme="https://hiedanoajuu.github.io/categories/zh-CN/"/>
    
    <category term="计算机" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="汇编语言" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Masm" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/Masm/"/>
    
    
    <category term="计算机" scheme="https://hiedanoajuu.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="编程语言" scheme="https://hiedanoajuu.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="操作系统" scheme="https://hiedanoajuu.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Project 1 Display The Data From Power Idea</title>
    <link href="https://hiedanoajuu.github.io/2025/01/25/power-idea-en/"/>
    <id>https://hiedanoajuu.github.io/2025/01/25/power-idea-en/</id>
    <published>2025-01-25T14:03:15.000Z</published>
    <updated>2025-08-06T11:57:51.333Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Project-Context"><a href="#Project-Context" class="headerlink" title="Project Context"></a>Project Context</h1><p>Mission: Display the data From Power Idea in Experiment 7 in the format shown below.<br><img src="demo.jpg" alt="Format" title="Format"></p><center>The data of Power idea</center><h1 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h1><p>Since this project requires the data from <a href="https://hiedanoajuu.github.io/2025/01/19/expt-7-en">Exp. 7</a>, I wrote the code based directly on <code>source.asm</code> to save time.<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">; source.asm</span><br><span class="line">assume cs:codesg</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">    db &#x27;1975&#x27;,&#x27;1976&#x27;,&#x27;1977&#x27;,&#x27;1978&#x27;,&#x27;1979&#x27;,&#x27;1980&#x27;,&#x27;1981&#x27;,&#x27;1982&#x27;,&#x27;1983&#x27;</span><br><span class="line">    db &#x27;1984&#x27;,&#x27;1985&#x27;,&#x27;1986&#x27;,&#x27;1987&#x27;,&#x27;1988&#x27;,&#x27;1989&#x27;,&#x27;1990&#x27;,&#x27;1991&#x27;,&#x27;1992&#x27;</span><br><span class="line">    db &#x27;1993&#x27;,&#x27;1994&#x27;,&#x27;1995&#x27;</span><br><span class="line">    ;The above 21 strings represent 21 years.</span><br><span class="line"></span><br><span class="line">    dd 16,22,382,1356,2390,8000,16000,24486,50065,97479,140417,197514</span><br><span class="line">    dd 345980,590827,803530,1183000,1843000,2759000,3753000,4649000,5937000</span><br><span class="line">    ;The 21 dwords represent the yearly incomes over 21 years. </span><br><span class="line"></span><br><span class="line">    dw 3,7,9,13,28,38,130,220,476,778,1001,1442,2258,2793,4037,5635,8226</span><br><span class="line">    dw 11542,14430,15257,17800</span><br><span class="line">    ;The above 21 words represent the yearly number of employees over 21 years.</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">table segment</span><br><span class="line">    db 21 dup (&#x27;year summ ne ?? &#x27;)</span><br><span class="line">table ends</span><br></pre></td></tr></table></figure></p><p>Rename the Segment <code>table</code> <code>text</code>, to save the string required to be print.<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text segment</span><br><span class="line">    db 160 dup (0)</span><br><span class="line">    ; A huge segment made up of 160 bytes</span><br><span class="line">text ends</span><br></pre></td></tr></table></figure><br>Process the data types in the sequence of <strong>Years</strong>, <strong>Incomes</strong>, <strong>Employees</strong>, <strong>Per Capita Income</strong>(PCI) and print the results to the screen in four installments to improve efficiency.<br>When storing in Segment <code>text</code>, define <code>0</code> as the end marker for printable text, <code>0ah</code>(i.e. <code>LF</code>) as Line Feed, in order to control formatting.</p><h1 id="Program-Implementation"><a href="#Program-Implementation" class="headerlink" title="Program Implementation"></a>Program Implementation</h1><h2 id="Subprogram-printf"><a href="#Subprogram-printf" class="headerlink" title="Subprogram printf"></a>Subprogram printf</h2><p>The string-printing functionality is implemented via subprogram <code>printf</code>:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">printf:</span><br><span class="line">    ; Name:printf;</span><br><span class="line">    ; Function:Print a string to a specific position of the screen, interpreting 0Ah as newline(\n) and 0 as end marker;</span><br><span class="line">    ; Parameters:Segment text -&gt; printable string;</span><br><span class="line">    ;     (si) -&gt; position to print at;</span><br><span class="line">    push di</span><br><span class="line">    push cx</span><br><span class="line">    push es</span><br><span class="line">    push ds</span><br><span class="line">    push si</span><br><span class="line">    push si</span><br><span class="line">    ; Save the register contents; same applies to the subprograms below.</span><br><span class="line">    </span><br><span class="line">    mov di,0</span><br><span class="line">    mov cx,text</span><br><span class="line">    mov ds,cx</span><br><span class="line">    mov cx,0b800h</span><br><span class="line">    mov es,cx</span><br><span class="line">    s0:</span><br><span class="line">        mov ch,0</span><br><span class="line">        mov cl,ds:[di]</span><br><span class="line">        jcxz printf_cmpd ; 0 as end marker</span><br><span class="line">        sub cx,0ah</span><br><span class="line">        jcxz lineFeed ; LF as newline</span><br><span class="line">        add cx,0ah</span><br><span class="line">        mov ch,7h ; white fg with black bg</span><br><span class="line">        mov es:[si],cx</span><br><span class="line">        add si,2</span><br><span class="line">        s1:</span><br><span class="line">            add di,1</span><br><span class="line">            jmp short s0</span><br><span class="line">        lineFeed:</span><br><span class="line">            ; newline</span><br><span class="line">            pop si</span><br><span class="line">            add si,0a0h</span><br><span class="line">            push si</span><br><span class="line">            jmp short s1</span><br><span class="line">    printf_cmpd:</span><br><span class="line">        pop si</span><br><span class="line">        pop si</span><br><span class="line">        pop ds</span><br><span class="line">        pop es</span><br><span class="line">        pop cx</span><br><span class="line">        pop di</span><br><span class="line">        ret</span><br></pre></td></tr></table></figure></p><h2 id="Subprogram-wtoc"><a href="#Subprogram-wtoc" class="headerlink" title="Subprogram wtoc"></a>Subprogram wtoc</h2><p>Data of type word(Employees, PCI) needs to be converted to string, which can be done using the subprogram <code>wtoc</code> as shown below:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">wtoc:</span><br><span class="line">        ; Name:wtoc</span><br><span class="line">        ; Function:word -&gt; string;</span><br><span class="line">        ; Parameters:(ax) -&gt; word;</span><br><span class="line">        ; ds:si -&gt; Beginning address of string;</span><br><span class="line">        ; Return:(si) -&gt; Ending address of string;</span><br><span class="line">        push ax</span><br><span class="line">        push bx</span><br><span class="line">        push cx</span><br><span class="line">        push dx</span><br><span class="line">        push di</span><br><span class="line"></span><br><span class="line">        mov di,0</span><br><span class="line">        divide_w:</span><br><span class="line">            mov dx,0</span><br><span class="line">            mov bx,10</span><br><span class="line">            div bx</span><br><span class="line">            ; Principle:The value is repeatedly dividing by 10 to obtain each digit, and then 30h is added to get its ASCII representation, the dtoc below is the same.</span><br><span class="line">            add dx,30h</span><br><span class="line">            mov dh,0</span><br><span class="line">            push dx</span><br><span class="line">            inc di</span><br><span class="line">            mov cx,ax</span><br><span class="line">            jcxz wtoc_cmpd ; Break if 0.</span><br><span class="line">            jmp short divide_w</span><br><span class="line">        wtoc_cmpd:</span><br><span class="line">            ; Arrange the characters obtained from the previous steps in reverse order.</span><br><span class="line">            mov cx,di</span><br><span class="line">            s7:</span><br><span class="line">                pop ax</span><br><span class="line">                mov es:[si],al</span><br><span class="line">                inc si</span><br><span class="line">            loop s7</span><br><span class="line">            mov byte ptr es:[si],0ah</span><br><span class="line">            ; Add LF to its ending.</span><br><span class="line">            inc si</span><br><span class="line"></span><br><span class="line">            pop di</span><br><span class="line">            pop dx</span><br><span class="line">            pop cx</span><br><span class="line">            pop bx</span><br><span class="line">            pop ax</span><br><span class="line">            ret</span><br></pre></td></tr></table></figure></p><h2 id="Subprogram-divdw"><a href="#Subprogram-divdw" class="headerlink" title="Subprogram divdw"></a>Subprogram divdw</h2><p>Data of type dword (Incomes) requires a subprogram similar to <code>wtoc</code>. However, it may cause overflow to perform <code>div</code> on dword data. So a division subprogram that avoids overflow needs to be implemented.<br>The principle formula is as follows:</p><script type="math/tex; mode=display">X \in [0,FFFFFFFF];X=H \cdot 65536+L;H,L \in [0,FFFF]</script><script type="math/tex; mode=display">N \in (0,FFFF]</script><script type="math/tex; mode=display">X \div N = \lfloor H \div N \rfloor \cdot 65536 + [H \pmod N \cdot 65536+L] \div N</script><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">divdw:</span><br><span class="line">    ; Name:divdw</span><br><span class="line">    ; Function:Division subprogram that avoids overflow.</span><br><span class="line">;          c=a/b, a:dword, b:word, c:dword;</span><br><span class="line">; Parameters:(ax) - Lower 16 bits of a;</span><br><span class="line">;      (dx) - Higher 16 bits of a;</span><br><span class="line">;      (cx)=b;</span><br><span class="line">; Return:(ax) - Lower 16 bits of c;</span><br><span class="line">;        (dx) - Higher 16 bits of c;</span><br><span class="line">;        (cx)=Remainder;</span><br><span class="line">; Principle:(H//N)*65536+[(H%N)*65536+L]/N</span><br><span class="line">push bx</span><br><span class="line"></span><br><span class="line">mov bx,ax</span><br><span class="line">mov ax,dx</span><br><span class="line">mov dx,0</span><br><span class="line">div cx</span><br><span class="line">push ax</span><br><span class="line">push bx</span><br><span class="line">pop ax</span><br><span class="line">pop bx</span><br><span class="line">; Exchange the content of ax and bx using stack;</span><br><span class="line">div cx</span><br><span class="line">mov cx,dx</span><br><span class="line">mov dx,bx</span><br><span class="line"></span><br><span class="line">pop bx</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><h2 id="Subprogram-dtoc"><a href="#Subprogram-dtoc" class="headerlink" title="Subprogram dtoc"></a>Subprogram dtoc</h2><p>Using subprogram <code>dvidw</code>, convert data of type dword(Incomes) to string, following the same principle as <code>wtoc</code>:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">dtoc:</span><br><span class="line">    ; Name:dtoc</span><br><span class="line">    ; Function:dword -&gt; string;</span><br><span class="line">    ; Parameters:(ax)=dword(Lower 16 bits);</span><br><span class="line">    ;    (dx)=dword(Higher 16 bits);</span><br><span class="line">    ; ds:si -&gt; Beginning address of the string;</span><br><span class="line">    ; Return:(si) -&gt; Ending address of the string;</span><br><span class="line">    push ax</span><br><span class="line">    push bx</span><br><span class="line">    push cx</span><br><span class="line">    push dx</span><br><span class="line">    push di</span><br><span class="line">    push bp</span><br><span class="line"></span><br><span class="line">    mov di,0</span><br><span class="line">    divide:</span><br><span class="line">        mov cx,10</span><br><span class="line">        call divdw ; Replace div with divdw</span><br><span class="line">        mov bp,ax</span><br><span class="line">        add cx,30h</span><br><span class="line">        mov ch,0</span><br><span class="line">        push cx</span><br><span class="line">        inc di</span><br><span class="line">        or ax,dx</span><br><span class="line">        mov cx,ax</span><br><span class="line">        mov ax,bp</span><br><span class="line">        jcxz dtoc_cmpd</span><br><span class="line">        jmp short divide</span><br><span class="line">    dtoc_cmpd:</span><br><span class="line">        mov cx,di</span><br><span class="line">        s4:</span><br><span class="line">            pop ax</span><br><span class="line">            mov es:[si],al</span><br><span class="line">            inc si</span><br><span class="line">        loop s4</span><br><span class="line">        mov byte ptr es:[si],0ah</span><br><span class="line">        inc si</span><br><span class="line"></span><br><span class="line">        pop bp</span><br><span class="line">        pop di</span><br><span class="line">        pop dx</span><br><span class="line">        pop cx</span><br><span class="line">        pop bx</span><br><span class="line">        pop ax</span><br><span class="line">        ret</span><br></pre></td></tr></table></figure></p><h2 id="Main-Program"><a href="#Main-Program" class="headerlink" title="Main Program"></a>Main Program</h2><p>Next, proceed to the main program.<br>Assume segment registers:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code,ds:data,ss:stack</span><br></pre></td></tr></table></figure><br>Define Segment <code>stack</code>:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">stack segment</span><br><span class="line">    db 64 dup (0)</span><br><span class="line">    ; A huge stack segment made up of 64 bytes</span><br><span class="line">stack ends</span><br></pre></td></tr></table></figure><br>Define Segment <code>code</code>:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">code segment</span><br><span class="line">    start:</span><br><span class="line">...</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><br>Initialize segment registers:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mov ax,data</span><br><span class="line">mov ds,ax</span><br><span class="line">mov ax,stack</span><br><span class="line">mov ss,ax</span><br><span class="line">mov sp,32</span><br><span class="line">mov ax,text</span><br><span class="line">mov es,ax</span><br></pre></td></tr></table></figure><br>To clear the screen, fill the video memory with <code>0720h</code>(White fg with black bg, Space):<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mov ax,0b800h</span><br><span class="line">mov es,ax</span><br><span class="line">mov cx,2000</span><br><span class="line">mov bx,0</span><br><span class="line">clear:</span><br><span class="line">    mov word ptr es:[bx],0720h</span><br><span class="line">    add bx,2</span><br><span class="line">loop clear</span><br></pre></td></tr></table></figure><br>Print the Years. Since the data of Years is already in string format. Write to Segment <code>text</code> and then print directly using <code>printf</code>, without any additional process:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mov ax,text</span><br><span class="line">mov es,ax</span><br><span class="line">mov di,0</span><br><span class="line">mov cx,21</span><br><span class="line">mov si,0</span><br><span class="line">s2:</span><br><span class="line">    push cx</span><br><span class="line">    mov cx,4</span><br><span class="line">    s3:</span><br><span class="line">        mov al,ds:[di]</span><br><span class="line">        mov es:[si],al</span><br><span class="line">        inc di</span><br><span class="line">        inc si</span><br><span class="line">    loop s3</span><br><span class="line">    mov byte ptr es:[si],0ah ; Each Year a newline</span><br><span class="line">    inc si</span><br><span class="line">    pop cx</span><br><span class="line">loop s2</span><br><span class="line">mov byte ptr es:[si],0 ; Add 0 to the ending</span><br><span class="line">mov si,0a0h ; Position:(0,1)</span><br><span class="line">call printf</span><br></pre></td></tr></table></figure><br>Next, print the Incomes. Convert them to strings through <code>dtoc</code> and then print them using <code>printf</code>:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mov ax,data</span><br><span class="line">mov ds,ax</span><br><span class="line">mov ax,text</span><br><span class="line">mov es,ax</span><br><span class="line"></span><br><span class="line">mov di,0</span><br><span class="line">mov cx,21</span><br><span class="line">mov si,0</span><br><span class="line">s5:</span><br><span class="line">    mov ax,ds:[di+54h] ; ax -&gt; The lower 16 bits</span><br><span class="line">    mov dx,ds:[di+56h] ; dx -&gt; The higher 16 bits</span><br><span class="line">    call dtoc</span><br><span class="line">    add di,4</span><br><span class="line">loop s5</span><br><span class="line">mov byte ptr es:[si],0</span><br><span class="line">mov si,0a0h</span><br><span class="line">add si,40  ; Position(20,1)</span><br><span class="line">call printf</span><br></pre></td></tr></table></figure><br>Employees are converted to strings using <code>wtoc</code> so that they can be printed using <code>printf</code>:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mov di,0</span><br><span class="line">mov cx,21</span><br><span class="line">mov si,0</span><br><span class="line">s6:</span><br><span class="line">    mov ax,ds:[di+0a8h]</span><br><span class="line">    call wtoc</span><br><span class="line">    add di,2</span><br><span class="line">loop s6</span><br><span class="line">mov byte ptr es:[si],0</span><br><span class="line">mov si,0a0h</span><br><span class="line">add si,80 ; Position(40,1)</span><br><span class="line">call printf</span><br></pre></td></tr></table></figure><br>The step sizes <code>+54h</code>、<code>+56h</code>、<code>+0a8h</code> have been discussed in <a href="https://hiedanoajuu.github.io/2025/01/19/expt-7-en/#Analysis">Exp. 7</a>, no more detailed description.</p><p>PCI can be calculated using <code>div</code>, and then converted to strings using<code>wtoc</code>. Finally, print the results using <code>printf</code>:<br>(Since the PCI in <a href="https://hiedanoajuu.github.io/2025/01/19/expt-7-en/#Project-Context">Exp. 7</a> are of type dword, we can safely use <code>div</code> without concern for overflow.)<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mov di,0</span><br><span class="line">mov cx,21</span><br><span class="line">mov bx,0</span><br><span class="line">mov si,0</span><br><span class="line">s8:</span><br><span class="line">    mov ax,ds:[bx+54h]</span><br><span class="line">    mov dx,ds:[bx+56h]</span><br><span class="line">    div word ptr ds:[di+0a8h]</span><br><span class="line">    call wtoc</span><br><span class="line">    add di,2</span><br><span class="line">    add bx,4</span><br><span class="line">loop s8</span><br><span class="line">mov byte ptr es:[si],0</span><br><span class="line">mov si,0a0h</span><br><span class="line">add si,120 ; Position(60,1)</span><br><span class="line">call printf</span><br></pre></td></tr></table></figure><br>Finally, terminate:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br></pre></td></tr></table></figure><br>The full program is as shown below:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br></pre></td><td class="code"><pre><span class="line">; p1.asm</span><br><span class="line">assume cs:code,ds:data,ss:stack</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">    db &#x27;1975&#x27;,&#x27;1976&#x27;,&#x27;1977&#x27;,&#x27;1978&#x27;,&#x27;1979&#x27;,&#x27;1980&#x27;,&#x27;1981&#x27;,&#x27;1982&#x27;,&#x27;1983&#x27;</span><br><span class="line">    db &#x27;1984&#x27;,&#x27;1985&#x27;,&#x27;1986&#x27;,&#x27;1987&#x27;,&#x27;1988&#x27;,&#x27;1989&#x27;,&#x27;1990&#x27;,&#x27;1991&#x27;,&#x27;1992&#x27;</span><br><span class="line">    db &#x27;1993&#x27;,&#x27;1994&#x27;,&#x27;1995&#x27;</span><br><span class="line">    ;The above is 21 strings representing 21 years</span><br><span class="line"></span><br><span class="line">    dd 16,22,382,1356,2390,8000,16000,24486,50065,97479,140417,197514</span><br><span class="line">    dd 345980,590827,803530,1183000,1843000,2759000,3753000,4649000,5937000</span><br><span class="line">    ;The above is 21 dwords representing the incomes of 21 years</span><br><span class="line"></span><br><span class="line">    dw 3,7,9,13,28,38,130,220,476,778,1001,1442,2258,2793,4037,5635,8226</span><br><span class="line">    dw 11542,14430,15257,17800</span><br><span class="line">    ;The above is 21 words representing the numbers of employees</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">text segment</span><br><span class="line">    db 160 dup (0)</span><br><span class="line">text ends</span><br><span class="line"></span><br><span class="line">stack segment</span><br><span class="line">    db 64 dup (0)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">    start:</span><br><span class="line">        ; segReg init</span><br><span class="line">        mov ax,data</span><br><span class="line">        mov ds,ax</span><br><span class="line">        mov ax,stack</span><br><span class="line">        mov ss,ax</span><br><span class="line">        mov sp,32</span><br><span class="line">        mov ax,text</span><br><span class="line">        mov es,ax</span><br><span class="line"></span><br><span class="line">        ; Clear the screen</span><br><span class="line">        mov ax,0b800h</span><br><span class="line">        mov es,ax</span><br><span class="line">        mov cx,2000</span><br><span class="line">        mov bx,0</span><br><span class="line">        clear:</span><br><span class="line">            mov word ptr es:[bx],0720h</span><br><span class="line">            add bx,2</span><br><span class="line">        loop clear</span><br><span class="line"></span><br><span class="line">        ; Years</span><br><span class="line">        mov ax,text</span><br><span class="line">        mov es,ax</span><br><span class="line">        mov di,0</span><br><span class="line">        mov cx,21</span><br><span class="line">        mov si,0</span><br><span class="line">        s2:</span><br><span class="line">            push cx</span><br><span class="line">            mov cx,4</span><br><span class="line">            s3:</span><br><span class="line">                mov al,ds:[di]</span><br><span class="line">                mov es:[si],al</span><br><span class="line">                inc di</span><br><span class="line">                inc si</span><br><span class="line">            loop s3</span><br><span class="line">            mov byte ptr es:[si],0ah</span><br><span class="line">            inc si</span><br><span class="line">            pop cx</span><br><span class="line">        loop s2</span><br><span class="line">        mov byte ptr es:[si],0</span><br><span class="line">        mov si,0a0h ;(0,1)</span><br><span class="line">        call printf</span><br><span class="line"></span><br><span class="line">        ; Incomes</span><br><span class="line">        mov ax,data</span><br><span class="line">        mov ds,ax</span><br><span class="line">        mov ax,text</span><br><span class="line">        mov es,ax</span><br><span class="line">        </span><br><span class="line">        mov di,0</span><br><span class="line">        mov cx,21</span><br><span class="line">        mov si,0</span><br><span class="line">        s5:</span><br><span class="line">            mov ax,ds:[di+54h]</span><br><span class="line">            mov dx,ds:[di+56h]</span><br><span class="line">            call dtoc</span><br><span class="line">            add di,4</span><br><span class="line">        loop s5</span><br><span class="line">        mov byte ptr es:[si],0</span><br><span class="line">        mov si,0a0h</span><br><span class="line">        add si,40  ;(20,1)</span><br><span class="line">        call printf</span><br><span class="line"></span><br><span class="line">        ; Employees</span><br><span class="line">        mov di,0</span><br><span class="line">        mov cx,21</span><br><span class="line">        mov si,0</span><br><span class="line">        s6:</span><br><span class="line">            mov ax,ds:[di+0a8h]</span><br><span class="line">            call wtoc</span><br><span class="line">            add di,2</span><br><span class="line">        loop s6</span><br><span class="line">        mov byte ptr es:[si],0</span><br><span class="line">        mov si,0a0h</span><br><span class="line">        add si,80 ; (40,1)</span><br><span class="line">        call printf</span><br><span class="line"></span><br><span class="line">        ; PCI</span><br><span class="line">        mov di,0</span><br><span class="line">        mov cx,21</span><br><span class="line">        mov bx,0</span><br><span class="line">        mov si,0</span><br><span class="line">        s8:</span><br><span class="line">            mov ax,ds:[bx+54h]</span><br><span class="line">            mov dx,ds:[bx+56h]</span><br><span class="line">            div word ptr ds:[di+0a8h]</span><br><span class="line">            call wtoc</span><br><span class="line">            add di,2</span><br><span class="line">            add bx,4</span><br><span class="line">        loop s8</span><br><span class="line">        mov byte ptr es:[si],0</span><br><span class="line">        mov si,0a0h</span><br><span class="line">        add si,120 ; (60,1)</span><br><span class="line">        call printf</span><br><span class="line"></span><br><span class="line">        ; Terminate</span><br><span class="line">        mov ax,4c00h</span><br><span class="line">        int 21h</span><br><span class="line"></span><br><span class="line">    printf:</span><br><span class="line">        ; Name:printf</span><br><span class="line">        ; Function:Print the strings at the specified position,0A -&gt; \n,ending in 0</span><br><span class="line">        ; Parameter:text seg -&gt; content to be printed</span><br><span class="line">        ;           (si) -&gt; position</span><br><span class="line">        push di</span><br><span class="line">        push cx</span><br><span class="line">        push es</span><br><span class="line">        push ds</span><br><span class="line">        push si</span><br><span class="line">        push si</span><br><span class="line"></span><br><span class="line">        mov di,0</span><br><span class="line">        mov cx,text</span><br><span class="line">        mov ds,cx</span><br><span class="line">        mov cx,0b800h</span><br><span class="line">        mov es,cx</span><br><span class="line">        s0:</span><br><span class="line">            mov ch,0</span><br><span class="line">            mov cl,ds:[di]</span><br><span class="line">            jcxz printf_cmpd</span><br><span class="line">            sub cx,0ah</span><br><span class="line">            jcxz lineFeed </span><br><span class="line">            add cx,0ah</span><br><span class="line">            mov ch,7h</span><br><span class="line">            mov es:[si],cx</span><br><span class="line">            add si,2</span><br><span class="line">            s1:</span><br><span class="line">                add di,1</span><br><span class="line">                jmp short s0</span><br><span class="line">            lineFeed:</span><br><span class="line">                pop si</span><br><span class="line">                add si,0a0h</span><br><span class="line">                push si</span><br><span class="line">                jmp short s1</span><br><span class="line">        printf_cmpd:</span><br><span class="line">            pop si</span><br><span class="line">            pop si</span><br><span class="line">            pop ds</span><br><span class="line">            pop es</span><br><span class="line">            pop cx</span><br><span class="line">            pop di</span><br><span class="line">            ret</span><br><span class="line">    divdw:</span><br><span class="line">        ; Name:divdw</span><br><span class="line">        ; Function:Dividing without overflow</span><br><span class="line">    ;          c=a/b, a:dword, b:word, c:dword</span><br><span class="line">    ; Parameter:(ax)=a low 16 bits</span><br><span class="line">    ;           (dx)=a high 16 bits</span><br><span class="line">    ;           (cx)=b</span><br><span class="line">    ; Return:(ax)=c low 16 bits</span><br><span class="line">    ;        (dx)=c high 16 bits</span><br><span class="line">    ;        (cx)=reminder</span><br><span class="line">    ; Principle: (H//N)*65536+[(H%N)*65536+L]/N</span><br><span class="line">    push bx</span><br><span class="line"></span><br><span class="line">    mov bx,ax</span><br><span class="line">    mov ax,dx</span><br><span class="line">    mov dx,0</span><br><span class="line">    div cx</span><br><span class="line">    push ax</span><br><span class="line">    push bx</span><br><span class="line">    pop ax</span><br><span class="line">    pop bx</span><br><span class="line">    div cx</span><br><span class="line">    mov cx,dx</span><br><span class="line">    mov dx,bx</span><br><span class="line"></span><br><span class="line">    pop bx</span><br><span class="line">    ret</span><br><span class="line">    dtoc:</span><br><span class="line">        ; Name:dtoc</span><br><span class="line">        ; Function: dword -&gt; char</span><br><span class="line">        ; Parameter: (ax)=dword(low 16bits)</span><br><span class="line">        ;      (dx)=dword(high 16bits)</span><br><span class="line">        ; ds:si(in) -&gt; Starting address of string</span><br><span class="line">        ; si(out) -&gt; Ending address of string</span><br><span class="line">        push ax</span><br><span class="line">        push bx</span><br><span class="line">        push cx</span><br><span class="line">        push dx</span><br><span class="line">        push di</span><br><span class="line">        push bp</span><br><span class="line"></span><br><span class="line">        mov di,0</span><br><span class="line">        divide:</span><br><span class="line">            mov cx,10</span><br><span class="line">            call divdw</span><br><span class="line">            mov bp,ax</span><br><span class="line">            add cx,30h</span><br><span class="line">            mov ch,0</span><br><span class="line">            push cx</span><br><span class="line">            inc di</span><br><span class="line">            or ax,dx</span><br><span class="line">            mov cx,ax</span><br><span class="line">            mov ax,bp</span><br><span class="line">            jcxz dtoc_cmpd</span><br><span class="line">            jmp short divide</span><br><span class="line">        dtoc_cmpd:</span><br><span class="line">            mov cx,di</span><br><span class="line">            s4:</span><br><span class="line">                pop ax</span><br><span class="line">                mov es:[si],al</span><br><span class="line">                inc si</span><br><span class="line">            loop s4</span><br><span class="line">            mov byte ptr es:[si],0ah</span><br><span class="line">            inc si</span><br><span class="line"></span><br><span class="line">            pop bp</span><br><span class="line">            pop di</span><br><span class="line">            pop dx</span><br><span class="line">            pop cx</span><br><span class="line">            pop bx</span><br><span class="line">            pop ax</span><br><span class="line">            ret</span><br><span class="line">    wtoc:</span><br><span class="line">        ; Name:wtoc</span><br><span class="line">        ; Function: number(word) -&gt; char</span><br><span class="line">        ; Parameter: (ax)=Word</span><br><span class="line">        ; ds:si -&gt; Starting address of string</span><br><span class="line">        ; si(out) -&gt; Ending address of string</span><br><span class="line">        push ax</span><br><span class="line">        push bx</span><br><span class="line">        push cx</span><br><span class="line">        push dx</span><br><span class="line">        push di</span><br><span class="line"></span><br><span class="line">        mov di,0</span><br><span class="line">        divide_w:</span><br><span class="line">            mov dx,0</span><br><span class="line">            mov bx,10</span><br><span class="line">            div bx</span><br><span class="line">            add dx,30h</span><br><span class="line">            mov dh,0</span><br><span class="line">            push dx</span><br><span class="line">            inc di</span><br><span class="line">            mov cx,ax</span><br><span class="line">            jcxz wtoc_cmpd</span><br><span class="line">            jmp short divide_w</span><br><span class="line">        wtoc_cmpd:</span><br><span class="line">            mov cx,di</span><br><span class="line">            s7:</span><br><span class="line">                pop ax</span><br><span class="line">                mov es:[si],al</span><br><span class="line">                inc si</span><br><span class="line">            loop s7</span><br><span class="line">            mov byte ptr es:[si],0ah</span><br><span class="line">            inc si</span><br><span class="line"></span><br><span class="line">            pop di</span><br><span class="line">            pop dx</span><br><span class="line">            pop cx</span><br><span class="line">            pop bx</span><br><span class="line">            pop ax</span><br><span class="line">            ret</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure></p><h1 id="Program-Behavior"><a href="#Program-Behavior" class="headerlink" title="Program Behavior"></a>Program Behavior</h1><p>Assemble, link, generate <code>p1.exe</code>;<br><img src="assemble.png" alt="Assemble" title="Assemble"><br>The program behavior is as shown below:<br><img src="table.png" alt="Program Behavior" title="Program Behavior"><br>It can be seen that it fully meets the requirements of the project.<br><strong>Project completed.</strong></p>]]></content>
    
    
    <summary type="html">A project that seems simplr ultimately contains approximately 282 lines of code.</summary>
    
    
    
    <category term="Computer Science" scheme="https://hiedanoajuu.github.io/categories/Computer-Science/"/>
    
    <category term="Assembly" scheme="https://hiedanoajuu.github.io/categories/Computer-Science/Assembly/"/>
    
    <category term="MASM" scheme="https://hiedanoajuu.github.io/categories/Computer-Science/Assembly/MASM/"/>
    
    
    <category term="Data Structures" scheme="https://hiedanoajuu.github.io/tags/Data-Structures/"/>
    
    <category term="Learning Notes" scheme="https://hiedanoajuu.github.io/tags/Learning-Notes/"/>
    
    <category term="Assembly Language" scheme="https://hiedanoajuu.github.io/tags/Assembly-Language/"/>
    
  </entry>
  
  <entry>
    <title>课程设计1 显示Power idea公司的数据</title>
    <link href="https://hiedanoajuu.github.io/2025/01/25/power-idea/"/>
    <id>https://hiedanoajuu.github.io/2025/01/25/power-idea/</id>
    <published>2025-01-25T14:03:15.000Z</published>
    <updated>2025-08-06T11:52:07.811Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目情景"><a href="#项目情景" class="headerlink" title="项目情景"></a>项目情景</h1><p>任务：将实验7中的Power idea公司的数据按照下图所示的格式在屏幕上显示出来。<br><img src="demo.jpg" alt="效果" title="效果"></p><center>Power idea公司的数据</center><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>需要用到<a href="https://hiedanoajuu.github.io/2025/01/19/expt-7">实验7</a>的数据，为了偷懒就直接在实验7的<code>source.asm</code>的基础上写了。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">; source.asm</span><br><span class="line">assume cs:codesg</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">    db &#x27;1975&#x27;,&#x27;1976&#x27;,&#x27;1977&#x27;,&#x27;1978&#x27;,&#x27;1979&#x27;,&#x27;1980&#x27;,&#x27;1981&#x27;,&#x27;1982&#x27;,&#x27;1983&#x27;</span><br><span class="line">    db &#x27;1984&#x27;,&#x27;1985&#x27;,&#x27;1986&#x27;,&#x27;1987&#x27;,&#x27;1988&#x27;,&#x27;1989&#x27;,&#x27;1990&#x27;,&#x27;1991&#x27;,&#x27;1992&#x27;</span><br><span class="line">    db &#x27;1993&#x27;,&#x27;1994&#x27;,&#x27;1995&#x27;</span><br><span class="line">    ;以上是表示21年的21个字符串</span><br><span class="line"></span><br><span class="line">    dd 16,22,382,1356,2390,8000,16000,24486,50065,97479,140417,197514</span><br><span class="line">    dd 345980,590827,803530,1183000,1843000,2759000,3753000,4649000,5937000</span><br><span class="line">    ;以上是表示21年公司收入的21个dword型数据</span><br><span class="line"></span><br><span class="line">    dw 3,7,9,13,28,38,130,220,476,778,1001,1442,2258,2793,4037,5635,8226</span><br><span class="line">    dw 11542,14430,15257,17800</span><br><span class="line">    ;以上是表示21年公司雇员人数的21个word型数据</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">table segment</span><br><span class="line">    db 21 dup (&#x27;year summ ne ?? &#x27;)</span><br><span class="line">table ends</span><br></pre></td></tr></table></figure><br>将实验7里的<code>table</code>段改为<code>text</code>段，用于存储需要打印的字符串。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text segment</span><br><span class="line">    db 160 dup (0)</span><br><span class="line">    ; 160字节的超大text段</span><br><span class="line">text ends</span><br></pre></td></tr></table></figure><br>可以按照<strong>年份</strong>、<strong>收入</strong>、<strong>雇员</strong>、<strong>人均收入</strong>的顺序依次处理不同类型的数据，并分四次打印到屏幕上，效率比较高。<br>在<code>text</code>段中存储时，可以定义以<code>0</code>结尾，以<code>0ah</code>(即<code>LF</code>)为换行符，便于在打印时对字符串进行操作。</p><h1 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h1><h2 id="printf子程序"><a href="#printf子程序" class="headerlink" title="printf子程序"></a>printf子程序</h2><p>在程序中需要实现在屏幕上打印字符串的功能，可以用<code>printf</code>子程序实现:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">printf:</span><br><span class="line">    ; 名称:printf</span><br><span class="line">    ; 功能:在屏幕指定位置打印字符串,0A解释为\n,以0结尾</span><br><span class="line">    ; 参数:text段存储需要打印的字符串</span><br><span class="line">    ;     (si)打印位置</span><br><span class="line">    push di</span><br><span class="line">    push cx</span><br><span class="line">    push es</span><br><span class="line">    push ds</span><br><span class="line">    push si</span><br><span class="line">    push si</span><br><span class="line">    ; 保护寄存器内容，下各子程序同</span><br><span class="line">    </span><br><span class="line">    mov di,0</span><br><span class="line">    mov cx,text</span><br><span class="line">    mov ds,cx</span><br><span class="line">    mov cx,0b800h</span><br><span class="line">    mov es,cx</span><br><span class="line">    s0:</span><br><span class="line">        mov ch,0</span><br><span class="line">        mov cl,ds:[di]</span><br><span class="line">        jcxz printf_cmpd ; 0标志结束</span><br><span class="line">        sub cx,0ah</span><br><span class="line">        jcxz lineFeed ; LF标志换行</span><br><span class="line">        add cx,0ah</span><br><span class="line">        mov ch,7h ; 白底黑字</span><br><span class="line">        mov es:[si],cx</span><br><span class="line">        add si,2</span><br><span class="line">        s1:</span><br><span class="line">            add di,1</span><br><span class="line">            jmp short s0</span><br><span class="line">        lineFeed:</span><br><span class="line">            ; 换行</span><br><span class="line">            pop si</span><br><span class="line">            add si,0a0h</span><br><span class="line">            push si</span><br><span class="line">            jmp short s1</span><br><span class="line">    printf_cmpd:</span><br><span class="line">        pop si</span><br><span class="line">        pop si</span><br><span class="line">        pop ds</span><br><span class="line">        pop es</span><br><span class="line">        pop cx</span><br><span class="line">        pop di</span><br><span class="line">        ret</span><br></pre></td></tr></table></figure></p><h2 id="wtoc子程序"><a href="#wtoc子程序" class="headerlink" title="wtoc子程序"></a>wtoc子程序</h2><p>需要将word类型的数据(雇员人数、人均收入)转化为字符串，可以用<code>wtoc</code>子程序实现:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">wtoc:</span><br><span class="line">        ; 名称:wtoc</span><br><span class="line">        ; 功能:数据(word) -&gt; 字符</span><br><span class="line">        ; 参数: (ax)=数据</span><br><span class="line">        ; ds:si -&gt; 字符串的开始地址</span><br><span class="line">        ; si(输出) -&gt; 字符串的结束地址</span><br><span class="line">        push ax</span><br><span class="line">        push bx</span><br><span class="line">        push cx</span><br><span class="line">        push dx</span><br><span class="line">        push di</span><br><span class="line"></span><br><span class="line">        mov di,0</span><br><span class="line">        divide_w:</span><br><span class="line">            mov dx,0</span><br><span class="line">            mov bx,10</span><br><span class="line">            div bx</span><br><span class="line">            ; 原理:通过反复除以10得到各位的数字，再+30h得到对应的ASCII编码，后面的dtoc同</span><br><span class="line">            add dx,30h</span><br><span class="line">            mov dh,0</span><br><span class="line">            push dx</span><br><span class="line">            inc di</span><br><span class="line">            mov cx,ax</span><br><span class="line">            jcxz wtoc_cmpd ; 商为0跳出循环</span><br><span class="line">            jmp short divide_w</span><br><span class="line">        wtoc_cmpd:</span><br><span class="line">            ; 将上述步骤得到的字符倒序排列</span><br><span class="line">            mov cx,di</span><br><span class="line">            s7:</span><br><span class="line">                pop ax</span><br><span class="line">                mov es:[si],al</span><br><span class="line">                inc si</span><br><span class="line">            loop s7</span><br><span class="line">            mov byte ptr es:[si],0ah</span><br><span class="line">            ; 结尾加上LF</span><br><span class="line">            inc si</span><br><span class="line"></span><br><span class="line">            pop di</span><br><span class="line">            pop dx</span><br><span class="line">            pop cx</span><br><span class="line">            pop bx</span><br><span class="line">            pop ax</span><br><span class="line">            ret</span><br></pre></td></tr></table></figure></p><h2 id="divdw子程序"><a href="#divdw子程序" class="headerlink" title="divdw子程序"></a>divdw子程序</h2><p>dword类型的数据(收入)也需要一个类似于<code>wtoc</code>的子程序，但是dword数据在进行<code>div</code>时容易溢出，所以编写一个不会溢出的除法子程序。<br>原理公式如下:</p><script type="math/tex; mode=display">X \in [0,FFFFFFFF];X=H \cdot 65536+L;H,L \in [0,FFFF]</script><script type="math/tex; mode=display">N \in (0,FFFF]</script><script type="math/tex; mode=display">X \div N = \lfloor H \div N \rfloor \cdot 65536 + [H \pmod N \cdot 65536+L] \div N</script><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">divdw:</span><br><span class="line">    ; 名称:divdw</span><br><span class="line">    ; 功能:不会溢出的除法</span><br><span class="line">;          c=a/b, a:dword, b:word, c:dword</span><br><span class="line">; 参数:(ax)=a的低16位</span><br><span class="line">;      (dx)=a的高16位</span><br><span class="line">;      (cx)=b</span><br><span class="line">; 返回:(ax)=c的低16位</span><br><span class="line">;        (dx)=c的高16位</span><br><span class="line">;        (cx)=余数</span><br><span class="line">; 原理: (H//N)*65536+[(H%N)*65536+L]/N</span><br><span class="line">push bx</span><br><span class="line"></span><br><span class="line">mov bx,ax</span><br><span class="line">mov ax,dx</span><br><span class="line">mov dx,0</span><br><span class="line">div cx</span><br><span class="line">push ax</span><br><span class="line">push bx</span><br><span class="line">pop ax</span><br><span class="line">pop bx</span><br><span class="line">; 利用栈实现ax、bx互换</span><br><span class="line">div cx</span><br><span class="line">mov cx,dx</span><br><span class="line">mov dx,bx</span><br><span class="line"></span><br><span class="line">pop bx</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><h2 id="dtoc子程序"><a href="#dtoc子程序" class="headerlink" title="dtoc子程序"></a>dtoc子程序</h2><p>利用前面编写的<code>dvidw</code>子程序，将dword类型的数据(总收入)转化为字符串，原理同<code>wtoc</code>:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">dtoc:</span><br><span class="line">    ; 名称:dtoc</span><br><span class="line">    ; 功能:dword转化为字符</span><br><span class="line">    ; 参数:(ax)=dword(低16位)</span><br><span class="line">    ;    (dx)=dword(高16位)</span><br><span class="line">    ; ds:si -&gt; 字符串的开始地址</span><br><span class="line">    ; si(输出) -&gt; 字符串的结束地址</span><br><span class="line">    push ax</span><br><span class="line">    push bx</span><br><span class="line">    push cx</span><br><span class="line">    push dx</span><br><span class="line">    push di</span><br><span class="line">    push bp</span><br><span class="line"></span><br><span class="line">    mov di,0</span><br><span class="line">    divide:</span><br><span class="line">        mov cx,10</span><br><span class="line">        call divdw ; 把div换成divdw</span><br><span class="line">        mov bp,ax</span><br><span class="line">        add cx,30h</span><br><span class="line">        mov ch,0</span><br><span class="line">        push cx</span><br><span class="line">        inc di</span><br><span class="line">        or ax,dx</span><br><span class="line">        mov cx,ax</span><br><span class="line">        mov ax,bp</span><br><span class="line">        jcxz dtoc_cmpd</span><br><span class="line">        jmp short divide</span><br><span class="line">    dtoc_cmpd:</span><br><span class="line">        mov cx,di</span><br><span class="line">        s4:</span><br><span class="line">            pop ax</span><br><span class="line">            mov es:[si],al</span><br><span class="line">            inc si</span><br><span class="line">        loop s4</span><br><span class="line">        mov byte ptr es:[si],0ah</span><br><span class="line">        inc si</span><br><span class="line"></span><br><span class="line">        pop bp</span><br><span class="line">        pop di</span><br><span class="line">        pop dx</span><br><span class="line">        pop cx</span><br><span class="line">        pop bx</span><br><span class="line">        pop ax</span><br><span class="line">        ret</span><br></pre></td></tr></table></figure></p><h2 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h2><p>好了，写了这么多子程序，终于可以开始主程序了。<br>指定各段段寄存器:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code,ds:data,ss:stack</span><br></pre></td></tr></table></figure><br>定义栈段<code>stack</code>:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">stack segment</span><br><span class="line">    db 64 dup (0)</span><br><span class="line">    ; 64字节的超大栈段</span><br><span class="line">stack ends</span><br></pre></td></tr></table></figure><br>定义代码段<code>code</code>:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">code segment</span><br><span class="line">    start:</span><br><span class="line">...</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><br>初始化段寄存器:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mov ax,data</span><br><span class="line">mov ds,ax</span><br><span class="line">mov ax,stack</span><br><span class="line">mov ss,ax</span><br><span class="line">mov sp,32</span><br><span class="line">mov ax,text</span><br><span class="line">mov es,ax</span><br></pre></td></tr></table></figure><br>接下来清个屏，把显存用<code>0720h</code>(即黑底白字的空格)填满:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mov ax,0b800h</span><br><span class="line">mov es,ax</span><br><span class="line">mov cx,2000</span><br><span class="line">mov bx,0</span><br><span class="line">clear:</span><br><span class="line">    mov word ptr es:[bx],0720h</span><br><span class="line">    add bx,2</span><br><span class="line">loop clear</span><br></pre></td></tr></table></figure><br>打印年份，本来就是字符串，写入<code>text</code>段后直接用<code>printf</code>打印，不需要做什么特殊的处理:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mov ax,text</span><br><span class="line">mov es,ax</span><br><span class="line">mov di,0</span><br><span class="line">mov cx,21</span><br><span class="line">mov si,0</span><br><span class="line">s2:</span><br><span class="line">    push cx</span><br><span class="line">    mov cx,4</span><br><span class="line">    s3:</span><br><span class="line">        mov al,ds:[di]</span><br><span class="line">        mov es:[si],al</span><br><span class="line">        inc di</span><br><span class="line">        inc si</span><br><span class="line">    loop s3</span><br><span class="line">    mov byte ptr es:[si],0ah ; 每一个年份换一次行</span><br><span class="line">    inc si</span><br><span class="line">    pop cx</span><br><span class="line">loop s2</span><br><span class="line">mov byte ptr es:[si],0 ; 结尾加个0，表示字符串结束</span><br><span class="line">mov si,0a0h ; 位置:(0,1)</span><br><span class="line">call printf</span><br></pre></td></tr></table></figure><br>接下来打印收入，通过<code>dtoc</code>先转化成字符再用<code>printf</code>打印:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mov ax,data</span><br><span class="line">mov ds,ax</span><br><span class="line">mov ax,text</span><br><span class="line">mov es,ax</span><br><span class="line"></span><br><span class="line">mov di,0</span><br><span class="line">mov cx,21</span><br><span class="line">mov si,0</span><br><span class="line">s5:</span><br><span class="line">    mov ax,ds:[di+54h] ; ax存储低16位</span><br><span class="line">    mov dx,ds:[di+56h] ; dx存储高16位</span><br><span class="line">    call dtoc</span><br><span class="line">    add di,4</span><br><span class="line">loop s5</span><br><span class="line">mov byte ptr es:[si],0</span><br><span class="line">mov si,0a0h</span><br><span class="line">add si,40  ; 位置(20,1)</span><br><span class="line">call printf</span><br></pre></td></tr></table></figure><br>雇员人数，使用<code>wtoc</code>转化成字符，再用<code>printf</code>打印:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mov di,0</span><br><span class="line">mov cx,21</span><br><span class="line">mov si,0</span><br><span class="line">s6:</span><br><span class="line">    mov ax,ds:[di+0a8h]</span><br><span class="line">    call wtoc</span><br><span class="line">    add di,2</span><br><span class="line">loop s6</span><br><span class="line">mov byte ptr es:[si],0</span><br><span class="line">mov si,0a0h</span><br><span class="line">add si,80 ; 位置(40,1)</span><br><span class="line">call printf</span><br></pre></td></tr></table></figure><br>关于为什么是<code>+54h</code>、<code>+56h</code>、<code>+0a8h</code>，<a href="https://hiedanoajuu.github.io/2025/01/19/expt-7/#%E5%88%86%E6%9E%90">实验7</a>已经分析过了，此处不再赘述。</p><p>人均收入，可以先通过除法算出人均收入，再用<code>wtoc</code>转化为字符，最后用<code>printf</code>输出:<br>(由于<a href="https://hiedanoajuu.github.io/2025/01/19/expt-7/#%E9%A1%B9%E7%9B%AE%E6%83%85%E6%99%AF">实验7</a>中人均收入是2字节，所以这里我们不必担心溢出问题，可以直接用<code>div</code>计算)<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mov di,0</span><br><span class="line">mov cx,21</span><br><span class="line">mov bx,0</span><br><span class="line">mov si,0</span><br><span class="line">s8:</span><br><span class="line">    mov ax,ds:[bx+54h]</span><br><span class="line">    mov dx,ds:[bx+56h]</span><br><span class="line">    div word ptr ds:[di+0a8h]</span><br><span class="line">    call wtoc</span><br><span class="line">    add di,2</span><br><span class="line">    add bx,4</span><br><span class="line">loop s8</span><br><span class="line">mov byte ptr es:[si],0</span><br><span class="line">mov si,0a0h</span><br><span class="line">add si,120 ; 位置(60,1)</span><br><span class="line">call printf</span><br></pre></td></tr></table></figure><br>最后返回:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br></pre></td></tr></table></figure><br>完整的程序如下:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br></pre></td><td class="code"><pre><span class="line">; p1.asm</span><br><span class="line">assume cs:code,ds:data,ss:stack</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">    db &#x27;1975&#x27;,&#x27;1976&#x27;,&#x27;1977&#x27;,&#x27;1978&#x27;,&#x27;1979&#x27;,&#x27;1980&#x27;,&#x27;1981&#x27;,&#x27;1982&#x27;,&#x27;1983&#x27;</span><br><span class="line">    db &#x27;1984&#x27;,&#x27;1985&#x27;,&#x27;1986&#x27;,&#x27;1987&#x27;,&#x27;1988&#x27;,&#x27;1989&#x27;,&#x27;1990&#x27;,&#x27;1991&#x27;,&#x27;1992&#x27;</span><br><span class="line">    db &#x27;1993&#x27;,&#x27;1994&#x27;,&#x27;1995&#x27;</span><br><span class="line">    ;The above is 21 strings representing 21 years</span><br><span class="line"></span><br><span class="line">    dd 16,22,382,1356,2390,8000,16000,24486,50065,97479,140417,197514</span><br><span class="line">    dd 345980,590827,803530,1183000,1843000,2759000,3753000,4649000,5937000</span><br><span class="line">    ;The above is 21 dwords representing the incomes of 21 years</span><br><span class="line"></span><br><span class="line">    dw 3,7,9,13,28,38,130,220,476,778,1001,1442,2258,2793,4037,5635,8226</span><br><span class="line">    dw 11542,14430,15257,17800</span><br><span class="line">    ;The above is 21 words representing the numbers of employees</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">text segment</span><br><span class="line">    db 160 dup (0)</span><br><span class="line">text ends</span><br><span class="line"></span><br><span class="line">stack segment</span><br><span class="line">    db 64 dup (0)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">    start:</span><br><span class="line">        ; segReg init</span><br><span class="line">        mov ax,data</span><br><span class="line">        mov ds,ax</span><br><span class="line">        mov ax,stack</span><br><span class="line">        mov ss,ax</span><br><span class="line">        mov sp,32</span><br><span class="line">        mov ax,text</span><br><span class="line">        mov es,ax</span><br><span class="line"></span><br><span class="line">        ; Clear the screen</span><br><span class="line">        mov ax,0b800h</span><br><span class="line">        mov es,ax</span><br><span class="line">        mov cx,2000</span><br><span class="line">        mov bx,0</span><br><span class="line">        clear:</span><br><span class="line">            mov word ptr es:[bx],0720h</span><br><span class="line">            add bx,2</span><br><span class="line">        loop clear</span><br><span class="line"></span><br><span class="line">        ; Years</span><br><span class="line">        mov ax,text</span><br><span class="line">        mov es,ax</span><br><span class="line">        mov di,0</span><br><span class="line">        mov cx,21</span><br><span class="line">        mov si,0</span><br><span class="line">        s2:</span><br><span class="line">            push cx</span><br><span class="line">            mov cx,4</span><br><span class="line">            s3:</span><br><span class="line">                mov al,ds:[di]</span><br><span class="line">                mov es:[si],al</span><br><span class="line">                inc di</span><br><span class="line">                inc si</span><br><span class="line">            loop s3</span><br><span class="line">            mov byte ptr es:[si],0ah</span><br><span class="line">            inc si</span><br><span class="line">            pop cx</span><br><span class="line">        loop s2</span><br><span class="line">        mov byte ptr es:[si],0</span><br><span class="line">        mov si,0a0h ;(0,1)</span><br><span class="line">        call printf</span><br><span class="line"></span><br><span class="line">        ; Incomes</span><br><span class="line">        mov ax,data</span><br><span class="line">        mov ds,ax</span><br><span class="line">        mov ax,text</span><br><span class="line">        mov es,ax</span><br><span class="line">        </span><br><span class="line">        mov di,0</span><br><span class="line">        mov cx,21</span><br><span class="line">        mov si,0</span><br><span class="line">        s5:</span><br><span class="line">            mov ax,ds:[di+54h]</span><br><span class="line">            mov dx,ds:[di+56h]</span><br><span class="line">            call dtoc</span><br><span class="line">            add di,4</span><br><span class="line">        loop s5</span><br><span class="line">        mov byte ptr es:[si],0</span><br><span class="line">        mov si,0a0h</span><br><span class="line">        add si,40  ;(20,1)</span><br><span class="line">        call printf</span><br><span class="line"></span><br><span class="line">        ; Employees</span><br><span class="line">        mov di,0</span><br><span class="line">        mov cx,21</span><br><span class="line">        mov si,0</span><br><span class="line">        s6:</span><br><span class="line">            mov ax,ds:[di+0a8h]</span><br><span class="line">            call wtoc</span><br><span class="line">            add di,2</span><br><span class="line">        loop s6</span><br><span class="line">        mov byte ptr es:[si],0</span><br><span class="line">        mov si,0a0h</span><br><span class="line">        add si,80 ; (40,1)</span><br><span class="line">        call printf</span><br><span class="line"></span><br><span class="line">        ; PCI</span><br><span class="line">        mov di,0</span><br><span class="line">        mov cx,21</span><br><span class="line">        mov bx,0</span><br><span class="line">        mov si,0</span><br><span class="line">        s8:</span><br><span class="line">            mov ax,ds:[bx+54h]</span><br><span class="line">            mov dx,ds:[bx+56h]</span><br><span class="line">            div word ptr ds:[di+0a8h]</span><br><span class="line">            call wtoc</span><br><span class="line">            add di,2</span><br><span class="line">            add bx,4</span><br><span class="line">        loop s8</span><br><span class="line">        mov byte ptr es:[si],0</span><br><span class="line">        mov si,0a0h</span><br><span class="line">        add si,120 ; (60,1)</span><br><span class="line">        call printf</span><br><span class="line"></span><br><span class="line">        ; Teminate</span><br><span class="line">        mov ax,4c00h</span><br><span class="line">        int 21h</span><br><span class="line"></span><br><span class="line">    printf:</span><br><span class="line">        ; Name:printf</span><br><span class="line">        ; Function:Print the strings at the specified position,0A -&gt; \n,ending in 0</span><br><span class="line">        ; Parameter:text seg -&gt; content to be printed</span><br><span class="line">        ;           (si) -&gt; position</span><br><span class="line">        push di</span><br><span class="line">        push cx</span><br><span class="line">        push es</span><br><span class="line">        push ds</span><br><span class="line">        push si</span><br><span class="line">        push si</span><br><span class="line"></span><br><span class="line">        mov di,0</span><br><span class="line">        mov cx,text</span><br><span class="line">        mov ds,cx</span><br><span class="line">        mov cx,0b800h</span><br><span class="line">        mov es,cx</span><br><span class="line">        s0:</span><br><span class="line">            mov ch,0</span><br><span class="line">            mov cl,ds:[di]</span><br><span class="line">            jcxz printf_cmpd</span><br><span class="line">            sub cx,0ah</span><br><span class="line">            jcxz lineFeed </span><br><span class="line">            add cx,0ah</span><br><span class="line">            mov ch,7h</span><br><span class="line">            mov es:[si],cx</span><br><span class="line">            add si,2</span><br><span class="line">            s1:</span><br><span class="line">                add di,1</span><br><span class="line">                jmp short s0</span><br><span class="line">            lineFeed:</span><br><span class="line">                pop si</span><br><span class="line">                add si,0a0h</span><br><span class="line">                push si</span><br><span class="line">                jmp short s1</span><br><span class="line">        printf_cmpd:</span><br><span class="line">            pop si</span><br><span class="line">            pop si</span><br><span class="line">            pop ds</span><br><span class="line">            pop es</span><br><span class="line">            pop cx</span><br><span class="line">            pop di</span><br><span class="line">            ret</span><br><span class="line">    divdw:</span><br><span class="line">        ; Name:divdw</span><br><span class="line">        ; Function:Dividing without overflow</span><br><span class="line">    ;          c=a/b, a:dword, b:word, c:dword</span><br><span class="line">    ; Parameter:(ax)=a low 16 bits</span><br><span class="line">    ;           (dx)=a high 16 bits</span><br><span class="line">    ;           (cx)=b</span><br><span class="line">    ; Return:(ax)=c low 16 bits</span><br><span class="line">    ;        (dx)=c high 16 bits</span><br><span class="line">    ;        (cx)=change</span><br><span class="line">    ; Principle: (H//N)*65536+[(H%N)*65536+L]/N</span><br><span class="line">    push bx</span><br><span class="line"></span><br><span class="line">    mov bx,ax</span><br><span class="line">    mov ax,dx</span><br><span class="line">    mov dx,0</span><br><span class="line">    div cx</span><br><span class="line">    push ax</span><br><span class="line">    push bx</span><br><span class="line">    pop ax</span><br><span class="line">    pop bx</span><br><span class="line">    div cx</span><br><span class="line">    mov cx,dx</span><br><span class="line">    mov dx,bx</span><br><span class="line"></span><br><span class="line">    pop bx</span><br><span class="line">    ret</span><br><span class="line">    dtoc:</span><br><span class="line">        ; Name:dtoc</span><br><span class="line">        ; Function: dword -&gt; char</span><br><span class="line">        ; Parameter: (ax)=dword(low 16bits)</span><br><span class="line">        ;      (dx)=dword(high 16bits)</span><br><span class="line">        ; ds:si(in) -&gt; Starting adress of string</span><br><span class="line">        ; si(out) -&gt; Ending adress of string</span><br><span class="line">        push ax</span><br><span class="line">        push bx</span><br><span class="line">        push cx</span><br><span class="line">        push dx</span><br><span class="line">        push di</span><br><span class="line">        push bp</span><br><span class="line"></span><br><span class="line">        mov di,0</span><br><span class="line">        divide:</span><br><span class="line">            mov cx,10</span><br><span class="line">            call divdw</span><br><span class="line">            mov bp,ax</span><br><span class="line">            add cx,30h</span><br><span class="line">            mov ch,0</span><br><span class="line">            push cx</span><br><span class="line">            inc di</span><br><span class="line">            or ax,dx</span><br><span class="line">            mov cx,ax</span><br><span class="line">            mov ax,bp</span><br><span class="line">            jcxz dtoc_cmpd</span><br><span class="line">            jmp short divide</span><br><span class="line">        dtoc_cmpd:</span><br><span class="line">            mov cx,di</span><br><span class="line">            s4:</span><br><span class="line">                pop ax</span><br><span class="line">                mov es:[si],al</span><br><span class="line">                inc si</span><br><span class="line">            loop s4</span><br><span class="line">            mov byte ptr es:[si],0ah</span><br><span class="line">            inc si</span><br><span class="line"></span><br><span class="line">            pop bp</span><br><span class="line">            pop di</span><br><span class="line">            pop dx</span><br><span class="line">            pop cx</span><br><span class="line">            pop bx</span><br><span class="line">            pop ax</span><br><span class="line">            ret</span><br><span class="line">    wtoc:</span><br><span class="line">        ; Name:wtoc</span><br><span class="line">        ; Function: number(word) -&gt; char</span><br><span class="line">        ; Parameter: (ax)=Word</span><br><span class="line">        ; ds:si -&gt; Starting adress of string</span><br><span class="line">        ; si(out) -&gt; Ending adress of string</span><br><span class="line">        push ax</span><br><span class="line">        push bx</span><br><span class="line">        push cx</span><br><span class="line">        push dx</span><br><span class="line">        push di</span><br><span class="line"></span><br><span class="line">        mov di,0</span><br><span class="line">        divide_w:</span><br><span class="line">            mov dx,0</span><br><span class="line">            mov bx,10</span><br><span class="line">            div bx</span><br><span class="line">            add dx,30h</span><br><span class="line">            mov dh,0</span><br><span class="line">            push dx</span><br><span class="line">            inc di</span><br><span class="line">            mov cx,ax</span><br><span class="line">            jcxz wtoc_cmpd</span><br><span class="line">            jmp short divide_w</span><br><span class="line">        wtoc_cmpd:</span><br><span class="line">            mov cx,di</span><br><span class="line">            s7:</span><br><span class="line">                pop ax</span><br><span class="line">                mov es:[si],al</span><br><span class="line">                inc si</span><br><span class="line">            loop s7</span><br><span class="line">            mov byte ptr es:[si],0ah</span><br><span class="line">            inc si</span><br><span class="line"></span><br><span class="line">            pop di</span><br><span class="line">            pop dx</span><br><span class="line">            pop cx</span><br><span class="line">            pop bx</span><br><span class="line">            pop ax</span><br><span class="line">            ret</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><br>想不到居然能写282行(</p><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p>编译、链接，生成<code>p1.exe</code>;<br><img src="assemble.png" alt="编译" title="编译"><br>运行结果如图所示:<br><img src="table.png" alt="运行结果" title="运行结果"><br>可以看到，与题目的要求完全一致。<br><strong>项目完成</strong></p>]]></content>
    
    
    <summary type="html">看似简单的小项目写了足足282行代码(</summary>
    
    
    
    <category term="zh-CN" scheme="https://hiedanoajuu.github.io/categories/zh-CN/"/>
    
    <category term="计算机" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="汇编语言" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
    <category term="MASM" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/MASM/"/>
    
    
    <category term="数据结构" scheme="https://hiedanoajuu.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="计算机" scheme="https://hiedanoajuu.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="编程语言" scheme="https://hiedanoajuu.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Implementing &quot;Hello World&quot; in MASM</title>
    <link href="https://hiedanoajuu.github.io/2025/01/21/hello-world-masm-en/"/>
    <id>https://hiedanoajuu.github.io/2025/01/21/hello-world-masm-en/</id>
    <published>2025-01-21T12:43:45.000Z</published>
    <updated>2025-08-06T13:21:18.485Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Project-Context"><a href="#Project-Context" class="headerlink" title="Project Context"></a>Project Context</h1><p>Mission: Display the string <code>&quot;welcome to masm!&quot;</code> centered on the screen in the following formats:</p><ul><li>Green foreground;</li><li>Red foreground, green background;</li><li>Blue foreground, white background respectively;</li></ul><h1 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h1><p>The requirements in <strong>Project Context</strong> seem simple, but here are a few key points to consider:</p><ol><li>The string<code>&quot;welcome to masm!&quot;</code> can be converted to ASCII codes by lookup, but it can also be written directly to Segment <code>data</code> for recalling,  letting the assembler handle encoding. When displaying, write the ASCII code into the lower bytes of the word representing the character on screen.</li><li><strong>“Centered”</strong> means the text is displayed at the exact center of the screen. The string length is 16 bytes, repeated three times.<br>On 80x25 DOS text screen:<ul><li>The first line should be printed on row 12 (offset <code>780H</code>);</li><li>The first character on each line should start at column 32 (offset <code>40H</code>).<br>To move to the next line, add <code>0A0H</code> (which equals 80 characters * 2 bytes per character) to the offset.</li></ul></li><li><strong>Green FG</strong>, <strong>Red FG with green BG</strong>, <strong>Blue FG with white BG</strong> can be set by modifying the attribute byte. The format of attribute byte is as below:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">7  6 5 4 3 2 1 0</span><br><span class="line">BL R G B I R G B</span><br><span class="line">0-2-&gt;FG, 3-&gt;Highlight, 4-6-&gt;BG, 7-&gt;Blink.</span><br></pre></td></tr></table></figure><ul><li>The attribute byte of <strong>Green FG</strong> is <code>0000 0010B</code>, i.e. <code>02H</code>;</li><li>The attribute byte of <strong>Red FG with green BG</strong> is <code>0010 0100B</code>, i.e. <code>24H</code>;</li><li>The attribute byte of <strong>Blue FG with white BG</strong> is <code>0111 0001B</code>, i.e. <code>71H</code>;<br>When displaying, write the attribute byte into the higher byte of the word representing the character on screen.</li></ul></li></ol><h1 id="Program-Implementation"><a href="#Program-Implementation" class="headerlink" title="Program Implementation"></a>Program Implementation</h1><p>Assume segment registers:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code,ds:data</span><br></pre></td></tr></table></figure><br>Define the Segment <code>data</code> and place the string in it <code>welcome to masm!</code> for printing:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data segment</span><br><span class="line">    db &quot;w e l c o m e   t o   m a s m ! &quot;</span><br><span class="line">    ; The string for printing.</span><br><span class="line">data ends</span><br></pre></td></tr></table></figure><br>A space is added after each character to write the string in the form of word, ensuring that it has the same offset address as its position in the video memory.</p><p>Define the Segment <code>code</code> and the entry point <code>start</code>:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">......</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><br>Since there is no need to store temporary data (e.g. a loop counter), this program does not require a stack segment.</p><p>Initialize segment registers: set <code>ds</code> to point to <code>data</code>, <code>es</code> to point to the video memory:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mov ax,data</span><br><span class="line">mov ds,ax</span><br><span class="line"></span><br><span class="line">mov ax,0b800h</span><br><span class="line">mov es,ax</span><br></pre></td></tr></table></figure></p><p>Let’s take the first line as an example and look at the code that prints the string:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">; Line 1</span><br><span class="line">; BG:Black</span><br><span class="line">; FG:Green</span><br><span class="line">mov bx,0</span><br><span class="line">mov si,780h ; Set the offset of Line 1</span><br><span class="line">mov cx,16   ; 16 times for 16 characters</span><br><span class="line"></span><br><span class="line">s:</span><br><span class="line">    mov al,ds:[bx]</span><br><span class="line">    mov ah,02h  ; Concatenate the ASCII code with the attribute byte 02H to form a word in the video memory</span><br><span class="line">    mov es:[bx+si+40h],ax ; Write to the corresponding position in video memory. Since the first character of each line starts at column 32, add 40H to the offset.</span><br><span class="line">    add bx,2</span><br><span class="line">    inc di</span><br><span class="line">loop s</span><br></pre></td></tr></table></figure><br>Move to the next line via <code>si+0A0H</code>:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add si,0a0h</span><br></pre></td></tr></table></figure><br>The other two lines follow the same logic, so there’s no need to go into detail here.</p><p>(I originally wanted to implement it with a loop, but since the attribute bytes differ for each line, I had to abandon the idea.)<br>(Note: I hadn’t learned about static arrays in MASM at that time.)</p><p>Finally, terminate:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br></pre></td></tr></table></figure></p><p>The full program is as shown below:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">; hello.asm</span><br><span class="line">assume cs:code,ds:data</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">    db &quot;w e l c o m e   t o   m a s m ! &quot;</span><br><span class="line">    ; The strings to be printed</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">    start:</span><br><span class="line">        ; segReg init</span><br><span class="line">        mov ax,data</span><br><span class="line">        mov ds,ax</span><br><span class="line"></span><br><span class="line">        mov ax,0b800h</span><br><span class="line">        mov es,ax</span><br><span class="line"></span><br><span class="line">        ; 1st line</span><br><span class="line">        ; bg:black</span><br><span class="line">        ; fg:green</span><br><span class="line">        mov bx,0</span><br><span class="line">        mov si,780h</span><br><span class="line">        mov cx,16</span><br><span class="line">        s:</span><br><span class="line">            mov al,ds:[bx]</span><br><span class="line">            mov ah,02h</span><br><span class="line">            mov es:[bx+si+40h],ax</span><br><span class="line">            add bx,2</span><br><span class="line">            inc di</span><br><span class="line">        loop s</span><br><span class="line"></span><br><span class="line">        ; 2nd line</span><br><span class="line">        ; bg:green</span><br><span class="line">        ; fg:red</span><br><span class="line">        mov bx,0</span><br><span class="line">        add si,0a0h</span><br><span class="line">        mov cx,16</span><br><span class="line">        s1:</span><br><span class="line">            mov al,ds:[bx]</span><br><span class="line">            mov ah,24h</span><br><span class="line">            mov es:[bx+si+40h],ax</span><br><span class="line">            add bx,2</span><br><span class="line">            inc di</span><br><span class="line">        loop s1</span><br><span class="line"></span><br><span class="line">        ; 3rd line</span><br><span class="line">        ; bg:white</span><br><span class="line">        ; fg:blue</span><br><span class="line">        mov bx,0</span><br><span class="line">        add si,0a0h</span><br><span class="line">        mov cx,16</span><br><span class="line">        s2:</span><br><span class="line">            mov al,ds:[bx]</span><br><span class="line">            mov ah,71h</span><br><span class="line">            mov es:[bx+si+40h],ax</span><br><span class="line">            add bx,2</span><br><span class="line">            inc di</span><br><span class="line">        loop s2</span><br><span class="line"></span><br><span class="line">        ; Termination</span><br><span class="line">        mov ax,4c00h</span><br><span class="line">        int 21h</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure></p><h1 id="Program-Behavior"><a href="#Program-Behavior" class="headerlink" title="Program Behavior"></a>Program Behavior</h1><p>Assemble, link, generate <code>hello.exe</code><br><img src="assemble.png" alt="Assemble" title="Assemble"><br>The program behavior is as shown below:<br><img src="hello.png" alt="welcome to masm!" title="welcome to masm!"><br>It can be seen that it fully meets the project requirements, displaying <code>welcome to masm!</code> centered on the screen.<br><strong>Experiment completed.</strong></p>]]></content>
    
    
    <summary type="html">It took me way longer than I expected just to get to &quot;Hello World&quot; in MASM.</summary>
    
    
    
    <category term="Computer Science" scheme="https://hiedanoajuu.github.io/categories/Computer-Science/"/>
    
    <category term="Assembly" scheme="https://hiedanoajuu.github.io/categories/Computer-Science/Assembly/"/>
    
    <category term="MASM" scheme="https://hiedanoajuu.github.io/categories/Computer-Science/Assembly/MASM/"/>
    
    
    <category term="Learning Notes" scheme="https://hiedanoajuu.github.io/tags/Learning-Notes/"/>
    
    <category term="Assembly Language" scheme="https://hiedanoajuu.github.io/tags/Assembly-Language/"/>
    
    <category term="Hello World" scheme="https://hiedanoajuu.github.io/tags/Hello-World/"/>
    
  </entry>
  
  <entry>
    <title>&quot;Hello World&quot;在Masm上的实现</title>
    <link href="https://hiedanoajuu.github.io/2025/01/21/hello-world-masm/"/>
    <id>https://hiedanoajuu.github.io/2025/01/21/hello-world-masm/</id>
    <published>2025-01-21T12:43:45.000Z</published>
    <updated>2025-07-30T05:25:24.671Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目情景"><a href="#项目情景" class="headerlink" title="项目情景"></a>项目情景</h1><p>编程:在屏幕中间分别显示绿色、绿底红色、白底蓝色的字符串”welcome to masm!”</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>情景要求以及需要实现的功能非常简单，这里分析一下其中的几个要点:</p><ol><li>字符串<code>&quot;welcome to masm!&quot;</code>，查表可得其ASCII编码，不过也可以直接写到<code>data</code>段里，打印时再取用，将ASCII编码写入显示的字符所在字的低位字节即可；</li><li><strong>中间</strong>，也即屏幕正中间，我们要打印的字符串长度为16，共打印3次，对于80x25(字符)的DOS屏幕，如果要显示在正中间，第1行应显示在第12行(偏移地址为<code>780H</code>)处，每行第1个字符应显示在该行的第32列处(偏移地址为<code>40H</code>)，换行可以通过偏移地址<code>+0A0H</code>实现，因为每行显示80个字符，每个字符占2字节；</li><li><strong>绿色</strong>、<strong>绿底红色</strong>、<strong>白底蓝色</strong>，可以通过调节属性字节实现更改，属性字节的格式如下:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">7  6 5 4 3 2 1 0</span><br><span class="line">BL R G B I R G B</span><br><span class="line">0-2为前景色，3为高亮，4-6为背景色，7为闪烁</span><br></pre></td></tr></table></figure><strong>绿色</strong>的属性字节为:<code>0000 0010B</code>，即<code>02H</code>；<br><strong>绿底红色</strong>的属性字节为:<code>0010 0100B</code>，即<code>24H</code>；<br><strong>白底蓝色</strong>的属性字节为:<code>0111 0001B</code>，即<code>71H</code>；<br>将对应的属性字节写入显示的字符所在字的高位字节即可；</li></ol><h1 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h1><p>指定各段的段寄存器:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code,ds:data</span><br></pre></td></tr></table></figure><br>定义数据段<code>data</code>，向其中写入需要打印的字符串<code>welcome to masm!</code>:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data segment</span><br><span class="line">    db &quot;w e l c o m e   t o   m a s m ! &quot;</span><br><span class="line">    ; 需要被打印的字符串</span><br><span class="line">data ends</span><br></pre></td></tr></table></figure><br>每个字符后面都加了一个空格，是为了以字的形式写入字符串，确保与显存中的位置拥有相同的偏移地址；</p><p>定义代码段<code>code</code>和程序起始点<code>start</code>:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">......</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><br>由于没有需要暂存的数据(比如循环变量)，所以这次的程序中不需要栈段；</p><p>初始化各段寄存器，使<code>ds</code>指向<code>data</code>，<code>es</code>指向显存:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mov ax,data</span><br><span class="line">mov ds,ax</span><br><span class="line"></span><br><span class="line">mov ax,0b800h</span><br><span class="line">mov es,ax</span><br></pre></td></tr></table></figure></p><p>以第一行为例，简单看看打印文本的代码:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">; 第1行</span><br><span class="line">; 背景:黑</span><br><span class="line">; 前景:绿</span><br><span class="line">mov bx,0</span><br><span class="line">mov si,780h ; 设置第1行的偏移地址</span><br><span class="line">mov cx,16   ; 16个字符，循环16次</span><br><span class="line">s:</span><br><span class="line">    mov al,ds:[bx]</span><br><span class="line">    mov ah,02h  ; 将ASCII码与属性字节02H拼接形成显存中的字</span><br><span class="line">    mov es:[bx+si+40h],ax ; 写入显存对应位置，因为每行第1个字符在第32列所以要+40H</span><br><span class="line">    add bx,2</span><br><span class="line">    inc di</span><br><span class="line">loop s</span><br></pre></td></tr></table></figure><br>换行就<code>si+0A0H</code>:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add si,0a0h</span><br></pre></td></tr></table></figure><br>其他两行也是同理，此处就不再赘述了；<br>(本来想用一个循环的，但是每行需要写入的属性字节不同，只得作罢)</p><p>最后返回:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br></pre></td></tr></table></figure></p><p>完整的程序如下:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">; hello.asm</span><br><span class="line">assume cs:code,ds:data</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">    db &quot;w e l c o m e   t o   m a s m ! &quot;</span><br><span class="line">    ; The strings to be printed</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">    start:</span><br><span class="line">        ; segReg init</span><br><span class="line">        mov ax,data</span><br><span class="line">        mov ds,ax</span><br><span class="line"></span><br><span class="line">        mov ax,0b800h</span><br><span class="line">        mov es,ax</span><br><span class="line"></span><br><span class="line">        ; 1st line</span><br><span class="line">        ; bg:black</span><br><span class="line">        ; fg:green</span><br><span class="line">        mov bx,0</span><br><span class="line">        mov si,780h</span><br><span class="line">        mov cx,16</span><br><span class="line">        s:</span><br><span class="line">            mov al,ds:[bx]</span><br><span class="line">            mov ah,02h</span><br><span class="line">            mov es:[bx+si+40h],ax</span><br><span class="line">            add bx,2</span><br><span class="line">            inc di</span><br><span class="line">        loop s</span><br><span class="line"></span><br><span class="line">        ; 2nd line</span><br><span class="line">        ; bg:green</span><br><span class="line">        ; fg:red</span><br><span class="line">        mov bx,0</span><br><span class="line">        add si,0a0h</span><br><span class="line">        mov cx,16</span><br><span class="line">        s1:</span><br><span class="line">            mov al,ds:[bx]</span><br><span class="line">            mov ah,24h</span><br><span class="line">            mov es:[bx+si+40h],ax</span><br><span class="line">            add bx,2</span><br><span class="line">            inc di</span><br><span class="line">        loop s1</span><br><span class="line"></span><br><span class="line">        ; 3rd line</span><br><span class="line">        ; bg:white</span><br><span class="line">        ; fg:blue</span><br><span class="line">        mov bx,0</span><br><span class="line">        add si,0a0h</span><br><span class="line">        mov cx,16</span><br><span class="line">        s2:</span><br><span class="line">            mov al,ds:[bx]</span><br><span class="line">            mov ah,71h</span><br><span class="line">            mov es:[bx+si+40h],ax</span><br><span class="line">            add bx,2</span><br><span class="line">            inc di</span><br><span class="line">        loop s2</span><br><span class="line"></span><br><span class="line">        ; Termination</span><br><span class="line">        mov ax,4c00h</span><br><span class="line">        int 21h</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><br>感觉写得很烂，但似乎也没有更好的实现方法了(</p><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p>编译、链接，生成<code>hello.exe</code><br><img src="assemble.png" alt="编译" title="编译"><br>运行结果如图所示:<br><img src="hello.png" alt="welcome to masm!" title="运行结果"><br>可以看到，程序以正确的格式在屏幕正中间显示了字符串<code>&quot;welcome to masm!&quot;</code>，完美地实现了功能；<br><strong>项目完成</strong></p>]]></content>
    
    
    <summary type="html">没想到要学这么久Masm才能把Hello world写出来（悲</summary>
    
    
    
    <category term="zh-CN" scheme="https://hiedanoajuu.github.io/categories/zh-CN/"/>
    
    <category term="计算机" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="汇编语言" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Masm" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/Masm/"/>
    
    
    <category term="计算机" scheme="https://hiedanoajuu.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="编程语言" scheme="https://hiedanoajuu.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Experiment 7 Applying Addressing Modes to Access Structured Data</title>
    <link href="https://hiedanoajuu.github.io/2025/01/19/expt-7-en/"/>
    <id>https://hiedanoajuu.github.io/2025/01/19/expt-7-en/</id>
    <published>2025-01-19T11:54:16.000Z</published>
    <updated>2025-08-06T12:40:16.524Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Project-Context"><a href="#Project-Context" class="headerlink" title="Project Context"></a>Project Context</h1><p>The following table presents an overview of Power Idea from its founding in 1975 to 1995.</p><div class="table-container"><table><thead><tr><th>Years</th><th style="text-align:right">Incomes</th><th style="text-align:right">Employees</th><th>Per Capita Incomes(PCI)</th></tr></thead><tbody><tr><td>1975</td><td style="text-align:right">16</td><td style="text-align:right">3</td><td>?</td></tr><tr><td>1976</td><td style="text-align:right">22</td><td style="text-align:right">7</td><td>?</td></tr><tr><td>1977</td><td style="text-align:right">382</td><td style="text-align:right">9</td><td>?</td></tr><tr><td>1978</td><td style="text-align:right">1356</td><td style="text-align:right">13</td><td>?</td></tr><tr><td>1979</td><td style="text-align:right">2390</td><td style="text-align:right">28</td><td>?</td></tr><tr><td>1980</td><td style="text-align:right">8000</td><td style="text-align:right">38</td><td>?</td></tr><tr><td>…</td><td style="text-align:right"></td><td style="text-align:right"></td><td></td></tr><tr><td>1995</td><td style="text-align:right">5,937,000</td><td style="text-align:right">17,800</td><td>?</td></tr></tbody></table></div><p>The data is defined in the following program:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">; source.asm</span><br><span class="line">assume cs:codesg</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">    db &#x27;1975&#x27;,&#x27;1976&#x27;,&#x27;1977&#x27;,&#x27;1978&#x27;,&#x27;1979&#x27;,&#x27;1980&#x27;,&#x27;1981&#x27;,&#x27;1982&#x27;,&#x27;1983&#x27;</span><br><span class="line">    db &#x27;1984&#x27;,&#x27;1985&#x27;,&#x27;1986&#x27;,&#x27;1987&#x27;,&#x27;1988&#x27;,&#x27;1989&#x27;,&#x27;1990&#x27;,&#x27;1991&#x27;,&#x27;1992&#x27;</span><br><span class="line">    db &#x27;1993&#x27;,&#x27;1994&#x27;,&#x27;1995&#x27;</span><br><span class="line">    ;The above 21 strings represent 21 years.</span><br><span class="line"></span><br><span class="line">    dd 16,22,382,1356,2390,8000,16000,24486,50065,97479,140417,197514</span><br><span class="line">    dd 345980,590827,803530,1183000,1843000,2759000,3753000,4649000,5937000</span><br><span class="line">    ;The 21 dwords represent the yearly incomes over 21 years.</span><br><span class="line"></span><br><span class="line">    dw 3,7,9,13,28,38,130,220,476,778,1001,1442,2258,2793,4037,5635,8226</span><br><span class="line">    dw 11542,14430,15257,17800</span><br><span class="line">    ;The above 21 words represent the yearly number of employees over 21 years.</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">table segment</span><br><span class="line">    db 21 dup (&#x27;year summ ne ?? &#x27;)</span><br><span class="line">table ends</span><br></pre></td></tr></table></figure></p><p>Mission: Write the data in Segment <code>data</code> to Segment <code>table</code> in the format shown below. Then calculate the PCIs over the 21 years and store the result in Segment <code>table</code> as well.</p><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">Years (4B)</th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center">Space (1B)</th><th style="text-align:center">Incomes (4B)</th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center">Space (1B)</th><th style="text-align:center">Employees (2B)</th><th style="text-align:center"></th><th>Spaces (1B)</th><th>PCI (2B)</th><th></th><th>Space (1B)</th></tr></thead><tbody><tr><td style="text-align:center">table</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">4</td><td style="text-align:center">5</td><td style="text-align:center">6</td><td style="text-align:center">7</td><td style="text-align:center">8</td><td style="text-align:center">9</td><td style="text-align:center">A</td><td style="text-align:center">B</td><td>C</td><td>D</td><td>E</td><td>F</td></tr><tr><td style="text-align:center">0H</td><td style="text-align:center">1</td><td style="text-align:center">9</td><td style="text-align:center">7</td><td style="text-align:center">5</td><td style="text-align:center"></td><td style="text-align:center">16</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">3</td><td style="text-align:center"></td><td></td><td></td><td>??</td><td></td></tr><tr><td style="text-align:center">10H</td><td style="text-align:center">1</td><td style="text-align:center">9</td><td style="text-align:center">7</td><td style="text-align:center">6</td><td style="text-align:center"></td><td style="text-align:center">22</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">7</td><td style="text-align:center"></td><td></td><td></td><td>??</td><td></td></tr><tr><td style="text-align:center">…</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:center">140H</td><td style="text-align:center">1</td><td style="text-align:center">9</td><td style="text-align:center">9</td><td style="text-align:center">5</td><td style="text-align:center"></td><td style="text-align:center">5,937,000</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">17,800</td><td style="text-align:center"></td><td></td><td></td><td>??</td><td></td></tr></tbody></table></div><p>Tip: Think of Segment <code>data</code> as several arrays, and Segment <code>table</code> as an array of structures. Use <code>bx</code> to locate each structure, <code>imm</code>(Immediate value) as a field offset, and <code>si</code> to access individual bytes in dword fields. You can use addressing modes like <code>[bx + idata]</code> and <code>[bx + idata + si]</code> for access.</p><h1 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h1><p>In the source file <code>source.asm</code>, three segments are defined: <code>codesg</code> (hereafter referred to as <code>code</code> for convenience), <code>data</code>, and <code>table</code>.</p><ul><li>Segment <code>code</code> stores assembly instructions and corresponds to Register <code>cs</code>;</li><li>Segment <code>data</code> stores input data and corresponds to Register <code>ds</code>;</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">data segment</span><br><span class="line">    db &#x27;1975&#x27;,&#x27;1976&#x27;,&#x27;1977&#x27;,&#x27;1978&#x27;,&#x27;1979&#x27;,&#x27;1980&#x27;,&#x27;1981&#x27;,&#x27;1982&#x27;,&#x27;1983&#x27;</span><br><span class="line">    db &#x27;1984&#x27;,&#x27;1985&#x27;,&#x27;1986&#x27;,&#x27;1987&#x27;,&#x27;1988&#x27;,&#x27;1989&#x27;,&#x27;1990&#x27;,&#x27;1991&#x27;,&#x27;1992&#x27;</span><br><span class="line">    db &#x27;1993&#x27;,&#x27;1994&#x27;,&#x27;1995&#x27;</span><br><span class="line">    ;The above 21 strings represent 21 years.</span><br><span class="line"></span><br><span class="line">    dd 16,22,382,1356,2390,8000,16000,24486,50065,97479,140417,197514</span><br><span class="line">    dd 345980,590827,803530,1183000,1843000,2759000,3753000,4649000,5937000</span><br><span class="line">    ;The 21 dwords represent the yearly incomes over 21 years.</span><br><span class="line"></span><br><span class="line">    dw 3,7,9,13,28,38,130,220,476,778,1001,1442,2258,2793,4037,5635,8226</span><br><span class="line">    dw 11542,14430,15257,17800</span><br><span class="line">    ;The above 21 words represent the yearly number of employees over 21 years.</span><br><span class="line">data ends</span><br></pre></td></tr></table></figure><p>Segment <code>data</code> is divided into three sections: </p><ul><li><strong>Years</strong>: from offset <code>0H</code> to <code>53H</code>, with a step size of 4 bytes;</li><li><strong>Incomes</strong>: from offset <code>54H</code> to <code>A7H</code>, with a step size of 4 bytes;</li><li>Numbers of <strong>Employees</strong>: from offset <code>A8H</code> to the end of the segment, with a step size of 2 bytes;</li></ul><p>Data can be accessed by adding the appropriate step size to <code>bx</code>. Since the sections of Years and Incomes share the same step size and use the same offset addressing, they can be processed within the same loop.</p><ul><li>Segment <code>table</code> stores output data and corresponds to Register <code>es</code>;</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">table segment</span><br><span class="line">    db 21 dup (&#x27;year summ ne ?? &#x27;)</span><br><span class="line">table ends</span><br></pre></td></tr></table></figure><p>In each “row”(<code>10H</code>) of Segment <code>table</code>:</p><ul><li><code>year</code> (4 bytes) is used to store the <strong>Year</strong> (string);</li><li><code>summ</code> (4 bytes) is used to store the <strong>Income</strong> (dword);</li><li><code>ne</code> (2 bytes) is used to store the numbers of <strong>Employees</strong> (word);</li><li><code>??</code> (2 bytes) is used to store the <strong>PCI</strong> (word);</li></ul><p>Register <code>es</code> is set to point to Segment <code>table</code>. Advancing to the next “row” can be archieved by incrementing <code>es</code> by 1. </p><h1 id="Program-Implementation"><a href="#Program-Implementation" class="headerlink" title="Program Implementation"></a>Program Implementation</h1><p>Assume segment registers:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code,ds:data,ss:stack</span><br></pre></td></tr></table></figure><br>Define Segment <code>stack</code>:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">stack segment</span><br><span class="line">    dw 8 dup (0)</span><br><span class="line">    ; For cx</span><br><span class="line">stack ends</span><br></pre></td></tr></table></figure><br>Define Segment <code>code</code> and the entry point <code>start</code>:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">......</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><br>Initialize segment registers: set <code>ds</code> to point to <code>data</code>, <code>es</code> to point to <code>table</code>, <code>ss:sp</code> to point to the bottom of <code>stack</code>:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mov ax,data</span><br><span class="line">mov ds,ax</span><br><span class="line"></span><br><span class="line">mov ax,table</span><br><span class="line">mov es,ax</span><br><span class="line"></span><br><span class="line">mov ax,stack</span><br><span class="line">mov ss,ax</span><br><span class="line">mov sp,16</span><br></pre></td></tr></table></figure><br>Process the <strong>Years</strong> and <strong>Incomes</strong> simultaneously, as both are 4 bytes in length:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mov bx,0</span><br><span class="line">mov cx,21</span><br><span class="line">s0:</span><br><span class="line">  push cx</span><br><span class="line">  mov si,0</span><br><span class="line">  mov cx,4</span><br><span class="line">  ; 4 bytes, 4 times, 1 byte each time;</span><br><span class="line">  s1:</span><br><span class="line">     ; Years</span><br><span class="line">     mov al,ds:[bx+si]  ; ds:[bx+si] -&gt; Years(0-53H)</span><br><span class="line">     mov es:[si],al     ; es:[si] -&gt; &quot;year&quot; in each row(10H) of Segment table</span><br><span class="line">     ; Incomes</span><br><span class="line">     mov al,ds:[bx+si+54h] ; ds:[bx+si+54h] -&gt; Incomes(54H-A7H)</span><br><span class="line">     mov es:[si+5],al      ; es:[si+5] -&gt; &quot;summ&quot; in each row of Segment table</span><br><span class="line">     inc si</span><br><span class="line">  loop s1</span><br><span class="line">  add bx,4</span><br><span class="line">  pop cx</span><br><span class="line">  mov ax,es</span><br><span class="line">  inc ax</span><br><span class="line">  mov es,ax ;Advancing to the next &quot;row&quot; is archieved by incrementing `es` by 1.</span><br><span class="line">loop s0</span><br></pre></td></tr></table></figure><br>Process the numbers of <strong>Employees</strong> and <strong>PCI</strong> simultaneously, as both are 2 bytes in length:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mov ax,table</span><br><span class="line">mov es,ax</span><br><span class="line">mov bx,0</span><br><span class="line">mov cx,21</span><br><span class="line">s2:</span><br><span class="line">  ; Employees</span><br><span class="line">  mov ax,ds:[bx+0a8h]   ; ds:[bx+0a8h] -&gt; Employees(0A8H-End)</span><br><span class="line">  mov es:[10],ax        ; es:[10] -&gt; &quot;ne&quot; in each row of Segment table</span><br><span class="line">  ; PCI</span><br><span class="line">  mov ax,es:[5]         ; es:[5] -&gt; lower 2 bytes of the Income</span><br><span class="line">  mov dx,es:[7]         ; es:[7] -&gt; higher 2 bytes of the Income</span><br><span class="line">  div word ptr es:[10]  ; es:[10] -&gt; number of Employees</span><br><span class="line">  mov es:[13],ax        ; es:[13] -&gt; &quot;??&quot; in each row of Segment table</span><br><span class="line">  </span><br><span class="line">  add bx,2</span><br><span class="line">  mov ax,es</span><br><span class="line">  inc ax</span><br><span class="line">  mov es,ax</span><br><span class="line">loop s2</span><br></pre></td></tr></table></figure><br>Finally, terminate:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br></pre></td></tr></table></figure><br>The full program is as shown below:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">; code.asm</span><br><span class="line">assume cs:code,ds:data,ss:stack</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">    db &#x27;1975&#x27;,&#x27;1976&#x27;,&#x27;1977&#x27;,&#x27;1978&#x27;,&#x27;1979&#x27;,&#x27;1980&#x27;,&#x27;1981&#x27;,&#x27;1982&#x27;,&#x27;1983&#x27;</span><br><span class="line">    db &#x27;1984&#x27;,&#x27;1985&#x27;,&#x27;1986&#x27;,&#x27;1987&#x27;,&#x27;1988&#x27;,&#x27;1989&#x27;,&#x27;1990&#x27;,&#x27;1991&#x27;,&#x27;1992&#x27;</span><br><span class="line">    db &#x27;1993&#x27;,&#x27;1994&#x27;,&#x27;1995&#x27;</span><br><span class="line">    ;The above is 21 strings representing 21 years</span><br><span class="line"></span><br><span class="line">    dd 16,22,382,1356,2390,8000,16000,24486,50065,97479,140417,197514</span><br><span class="line">    dd 345980,590827,803530,1183000,1843000,2759000,3753000,4649000,5937000</span><br><span class="line">    ;The above is 21 dwords representing the incomes of 21 years</span><br><span class="line"></span><br><span class="line">    dw 3,7,9,13,28,38,130,220,476,778,1001,1442,2258,2793,4037,5635,8226</span><br><span class="line">    dw 11542,14430,15257,17800</span><br><span class="line">    ;The above is 21 words representing the numbers of employees</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">table segment</span><br><span class="line">    db 21 dup (&#x27;year sums em ?? &#x27;)</span><br><span class="line">    ; Create 336 bytes to save the table</span><br><span class="line">table ends</span><br><span class="line"></span><br><span class="line">stack segment</span><br><span class="line">    dw 8 dup (0)</span><br><span class="line">    ; Create a stack to temporarily save CX</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">    ; Segment Register init</span><br><span class="line">    mov ax,data</span><br><span class="line">    mov ds,ax</span><br><span class="line"></span><br><span class="line">    mov ax,table</span><br><span class="line">    mov es,ax</span><br><span class="line"></span><br><span class="line">    mov ax,stack</span><br><span class="line">    mov ss,ax</span><br><span class="line">    mov sp,16</span><br><span class="line"></span><br><span class="line">    ; Years and Incomes(4B)</span><br><span class="line">    mov bx,0</span><br><span class="line">    mov cx,21</span><br><span class="line">    s0:</span><br><span class="line">      push cx</span><br><span class="line">      mov si,0</span><br><span class="line">      mov cx,4</span><br><span class="line">      s1:</span><br><span class="line">         ; Years</span><br><span class="line">         mov al,ds:[bx+si]</span><br><span class="line">         mov es:[si],al</span><br><span class="line">         ; Incomes</span><br><span class="line">         mov al,ds:[bx+si+54h]</span><br><span class="line">         mov es:[si+5],al</span><br><span class="line">         inc si</span><br><span class="line">      loop s1</span><br><span class="line">      add bx,4</span><br><span class="line">      pop cx</span><br><span class="line">      mov ax,es</span><br><span class="line">      inc ax</span><br><span class="line">      mov es,ax</span><br><span class="line">    loop s0</span><br><span class="line"></span><br><span class="line">    ; Employees and PCI(2B)</span><br><span class="line">    mov ax,table</span><br><span class="line">    mov es,ax</span><br><span class="line">    mov bx,0</span><br><span class="line">    mov cx,21</span><br><span class="line">    s2:</span><br><span class="line">      ; Emplyees</span><br><span class="line">      mov ax,ds:[bx+0a8h]</span><br><span class="line">      mov es:[10],ax</span><br><span class="line">      ; PCI</span><br><span class="line">      mov ax,es:[5]</span><br><span class="line">      mov dx,es:[7]</span><br><span class="line">      div word ptr es:[10]</span><br><span class="line">      mov es:[13],ax</span><br><span class="line">      </span><br><span class="line">      add bx,2</span><br><span class="line">      mov ax,es</span><br><span class="line">      inc ax</span><br><span class="line">      mov es,ax</span><br><span class="line">    loop s2</span><br><span class="line"></span><br><span class="line">    ; Termination</span><br><span class="line">    mov ax,4c00h</span><br><span class="line">    int 21h</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure></p><h1 id="Program-Behavior"><a href="#Program-Behavior" class="headerlink" title="Program Behavior"></a>Program Behavior</h1><p>Assemble, link, generate <code>code.exe</code>;<br><img src="assemble.png" alt="Assemble" title="Assemble"><br>The program behavior is as shown below:<br><img src="table.png" alt="Program Behavior" title="Program Behavior"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0778:0000 31 39 37 35 20 10 00 00-00 20 03 00 20 05 00 20 1975 .... .. ..</span><br></pre></td></tr></table></figure><p>As shown:</p><ul><li>Offsets <code>0H-3H</code> store <code>31 39 37 35</code>, which corresponds to the Year 1975 (in ASCII);</li><li>The 4th, 9th, 12th, and 15th bytes are all <code>20</code>, representing “ “ (Space);</li><li>Offsets <code>5H-8H</code> store the Income <code>10 00 00-00</code> (in little endian);</li><li>Offsets <code>10H-11H</code> store the number of Employees <code>03 00</code> (in little endian);</li><li>Offsets <code>13H-14H</code> store the PCI, which is the result of integer division (truncating toward zero) of Income by Employees: <code>05 00</code> (in little endian);<br>It can be seen that it fully meets the requirements of the project.<br><strong>Experiment completed.</strong></li></ul>]]></content>
    
    
    <summary type="html">Integrated use of various addressing modes in structured data access.</summary>
    
    
    
    <category term="Computer Science" scheme="https://hiedanoajuu.github.io/categories/Computer-Science/"/>
    
    <category term="Assembly" scheme="https://hiedanoajuu.github.io/categories/Computer-Science/Assembly/"/>
    
    <category term="MASM" scheme="https://hiedanoajuu.github.io/categories/Computer-Science/Assembly/MASM/"/>
    
    
    <category term="Data Structures" scheme="https://hiedanoajuu.github.io/tags/Data-Structures/"/>
    
    <category term="Learning Notes" scheme="https://hiedanoajuu.github.io/tags/Learning-Notes/"/>
    
    <category term="Assembly Language" scheme="https://hiedanoajuu.github.io/tags/Assembly-Language/"/>
    
  </entry>
  
  <entry>
    <title>寻址方式在结构化数据访问中的应用</title>
    <link href="https://hiedanoajuu.github.io/2025/01/19/expt-7/"/>
    <id>https://hiedanoajuu.github.io/2025/01/19/expt-7/</id>
    <published>2025-01-19T11:54:16.000Z</published>
    <updated>2025-07-30T08:44:23.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目情景"><a href="#项目情景" class="headerlink" title="项目情景"></a>项目情景</h1><p>Power idea 公司从 1975 年成立一直到 1995 年的基本情况如下。</p><div class="table-container"><table><thead><tr><th>年份</th><th style="text-align:right">收入</th><th style="text-align:right">雇员</th><th>人均收入</th></tr></thead><tbody><tr><td>1975</td><td style="text-align:right">16</td><td style="text-align:right">3</td><td>?</td></tr><tr><td>1976</td><td style="text-align:right">22</td><td style="text-align:right">7</td><td>?</td></tr><tr><td>1977</td><td style="text-align:right">382</td><td style="text-align:right">9</td><td>?</td></tr><tr><td>1978</td><td style="text-align:right">1356</td><td style="text-align:right">13</td><td>?</td></tr><tr><td>1979</td><td style="text-align:right">2390</td><td style="text-align:right">28</td><td>?</td></tr><tr><td>1980</td><td style="text-align:right">8000</td><td style="text-align:right">38</td><td>?</td></tr><tr><td>…</td><td style="text-align:right"></td><td style="text-align:right"></td><td></td></tr><tr><td>1995</td><td style="text-align:right">5,937,000</td><td style="text-align:right">17,800</td><td>?</td></tr></tbody></table></div><p>下面的程序中，已经定义好了这些数据:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">; source.asm</span><br><span class="line">assume cs:codesg</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">    db &#x27;1975&#x27;,&#x27;1976&#x27;,&#x27;1977&#x27;,&#x27;1978&#x27;,&#x27;1979&#x27;,&#x27;1980&#x27;,&#x27;1981&#x27;,&#x27;1982&#x27;,&#x27;1983&#x27;</span><br><span class="line">    db &#x27;1984&#x27;,&#x27;1985&#x27;,&#x27;1986&#x27;,&#x27;1987&#x27;,&#x27;1988&#x27;,&#x27;1989&#x27;,&#x27;1990&#x27;,&#x27;1991&#x27;,&#x27;1992&#x27;</span><br><span class="line">    db &#x27;1993&#x27;,&#x27;1994&#x27;,&#x27;1995&#x27;</span><br><span class="line">    ;以上是表示21年的21个字符串</span><br><span class="line"></span><br><span class="line">    dd 16,22,382,1356,2390,8000,16000,24486,50065,97479,140417,197514</span><br><span class="line">    dd 345980,590827,803530,1183000,1843000,2759000,3753000,4649000,5937000</span><br><span class="line">    ;以上是表示21年公司收入的21个dword型数据</span><br><span class="line"></span><br><span class="line">    dw 3,7,9,13,28,38,130,220,476,778,1001,1442,2258,2793,4037,5635,8226</span><br><span class="line">    dw 11542,14430,15257,17800</span><br><span class="line">    ;以上是表示21年公司雇员人数的21个word型数据</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">table segment</span><br><span class="line">    db 21 dup (&#x27;year summ ne ?? &#x27;)</span><br><span class="line">table ends</span><br></pre></td></tr></table></figure></p><p>编程，将<code>data</code>段中的数据按如下格式写入到<code>table</code>段中，并计算21年中的人均收入(取整)，结果也按照下面的格式保存在<code>table</code>段中。</p><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">年份 (4B)</th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center">空格（1B）</th><th style="text-align:center">收入 (4B)</th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center">空格 (1B)</th><th style="text-align:center">雇员数（2B）</th><th style="text-align:center"></th><th>空格 (1B)</th><th>人均收入 (2B)</th><th></th><th>空格 (1B)</th></tr></thead><tbody><tr><td style="text-align:center">table</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">4</td><td style="text-align:center">5</td><td style="text-align:center">6</td><td style="text-align:center">7</td><td style="text-align:center">8</td><td style="text-align:center">9</td><td style="text-align:center">A</td><td style="text-align:center">B</td><td>C</td><td>D</td><td>E</td><td>F</td></tr><tr><td style="text-align:center">0H</td><td style="text-align:center">1</td><td style="text-align:center">9</td><td style="text-align:center">7</td><td style="text-align:center">5</td><td style="text-align:center"></td><td style="text-align:center">16</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">3</td><td style="text-align:center"></td><td></td><td></td><td>??</td><td></td></tr><tr><td style="text-align:center">10H</td><td style="text-align:center">1</td><td style="text-align:center">9</td><td style="text-align:center">7</td><td style="text-align:center">6</td><td style="text-align:center"></td><td style="text-align:center">22</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">7</td><td style="text-align:center"></td><td></td><td></td><td>??</td><td></td></tr><tr><td style="text-align:center">…</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:center">140H</td><td style="text-align:center">1</td><td style="text-align:center">9</td><td style="text-align:center">9</td><td style="text-align:center">5</td><td style="text-align:center"></td><td style="text-align:center">5,937,000</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">17,800</td><td style="text-align:center"></td><td></td><td></td><td>??</td><td></td></tr></tbody></table></div><p>提示，可将<code>data</code>段中的数据看成是多个数组，而将<code>table</code>中的数据看成是一个结构型数据的数组，每个结构型数据包含多个数据项。可用<code>bx</code>定位每个结构型数据，用<code>idata</code>定位数据项，用<code>si</code>定位数组项中的每个元素，对于<code>table</code>中的数据的访问可采用<code>[bx].idata</code>和<code>[bx].idata[si]</code>的寻址方式。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>源程序<code>source.asm</code>中共定义了<code>codesg</code>(因为个人习惯，下改为<code>code</code>)，<code>data</code>与<code>table</code>段:</p><ul><li><code>code</code>段用于存储汇编指令，对应的段寄存器为<code>cs</code>；</li><li><code>data</code>段用于存储输入数据，对应的段寄存器为<code>ds</code>；</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">data segment</span><br><span class="line">    db &#x27;1975&#x27;,&#x27;1976&#x27;,&#x27;1977&#x27;,&#x27;1978&#x27;,&#x27;1979&#x27;,&#x27;1980&#x27;,&#x27;1981&#x27;,&#x27;1982&#x27;,&#x27;1983&#x27;</span><br><span class="line">    db &#x27;1984&#x27;,&#x27;1985&#x27;,&#x27;1986&#x27;,&#x27;1987&#x27;,&#x27;1988&#x27;,&#x27;1989&#x27;,&#x27;1990&#x27;,&#x27;1991&#x27;,&#x27;1992&#x27;</span><br><span class="line">    db &#x27;1993&#x27;,&#x27;1994&#x27;,&#x27;1995&#x27;</span><br><span class="line">    ;以上是表示21年的21个字符串</span><br><span class="line"></span><br><span class="line">    dd 16,22,382,1356,2390,8000,16000,24486,50065,97479,140417,197514</span><br><span class="line">    dd 345980,590827,803530,1183000,1843000,2759000,3753000,4649000,5937000</span><br><span class="line">    ;以上是表示21年公司收入的21个dword型数据</span><br><span class="line"></span><br><span class="line">    dw 3,7,9,13,28,38,130,220,476,778,1001,1442,2258,2793,4037,5635,8226</span><br><span class="line">    dw 11542,14430,15257,17800</span><br><span class="line">    ;以上是表示21年公司雇员人数的21个word型数据</span><br><span class="line">data ends</span><br></pre></td></tr></table></figure><p>分为三部分，由<code>data:0H</code>至<code>53H</code>为年份，步长为4字节；由<code>data:54H</code>至<code>A7H</code>为收入，步长为4字节；由<code>data:A8H</code>至段末为雇员人数，步长为2字节；<br>可以通过<code>bx</code>加上对应的步长实现对对应数据的定位，由于年份与收入两段的步长相等，共用同一个偏移地址，因此对两部分数据的处理可以在同一循环中进行；</p><ul><li><code>table</code>段用于存储输出数据，未指定段寄存器；<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">table segment</span><br><span class="line">    db 21 dup (&#x27;year summ ne ?? &#x27;)</span><br><span class="line">table ends</span><br></pre></td></tr></table></figure><code>table</code>段中每一“行”(10H)<code>year</code>对应的4个字节用于存储年份(字符串)，<code>summ</code>对应的4个字节用于存储收入(dword)，<code>ne</code>对应的2个字节用来存储雇员人数(word)，<code>??</code>对应的两个字节用于存储人均收入(word)；<br>可以将<code>es</code>指定为<code>table</code>段的段寄存器，通过<code>es+1</code>来实现换“行”；</li></ul><h1 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h1><p>指定各段的段寄存器:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code,ds:data,ss:stack</span><br></pre></td></tr></table></figure><br>定义栈段<code>stack</code>，用于暂存<code>cx</code>:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">stack segment</span><br><span class="line">    dw 8 dup (0)</span><br><span class="line">    ; 创建栈段暂存cx</span><br><span class="line">stack ends</span><br></pre></td></tr></table></figure><br>定义<code>code</code>段和程序起始点<code>start</code>:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">......</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><br>初始化各寄存器，使<code>ds</code>指向<code>data</code>，<code>es</code>指向<code>table</code>，<code>ss:sp</code>指向<code>stack</code>栈底:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mov ax,data</span><br><span class="line">mov ds,ax</span><br><span class="line"></span><br><span class="line">mov ax,table</span><br><span class="line">mov es,ax</span><br><span class="line"></span><br><span class="line">mov ax,stack</span><br><span class="line">mov ss,ax</span><br><span class="line">mov sp,16</span><br></pre></td></tr></table></figure><br>同时处理年份和收入2个长度为4字节的数据:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mov bx,0</span><br><span class="line">mov cx,21</span><br><span class="line">s0:</span><br><span class="line">  push cx</span><br><span class="line">  mov si,0</span><br><span class="line">  mov cx,4</span><br><span class="line">  ; 4字节，循环4次，每次复制1字节</span><br><span class="line">  s1:</span><br><span class="line">     ; 年份</span><br><span class="line">     mov al,ds:[bx+si]  ; ds:[bx+si]即data年份部分(0-53H)</span><br><span class="line">     mov es:[si],al     ; es:[si]即table每行(10H)的&quot;year&quot;位置</span><br><span class="line">     ; 收入</span><br><span class="line">     mov al,ds:[bx+si+54h] ; ds:[bx+si+54h]即data收入部分(54H-A7H)</span><br><span class="line">     mov es:[si+5],al      ; es:[si+5]即table每行的&quot;summ&quot;位置</span><br><span class="line">     inc si</span><br><span class="line">  loop s1</span><br><span class="line">  add bx,4</span><br><span class="line">  pop cx</span><br><span class="line">  mov ax,es</span><br><span class="line">  inc ax</span><br><span class="line">  mov es,ax ; 通过es+1实现换行</span><br><span class="line">loop s0</span><br></pre></td></tr></table></figure><br>同时处理雇员人数和人均收入2个长度为2字节的数据:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mov ax,table</span><br><span class="line">mov es,ax</span><br><span class="line">mov bx,0</span><br><span class="line">mov cx,21</span><br><span class="line">s2:</span><br><span class="line">  ; 雇员人数</span><br><span class="line">  mov ax,ds:[bx+0a8h]   ; ds:[bx+0a8h]即data雇员部分(0A8H至段末)</span><br><span class="line">  mov es:[10],ax        ; es:[10]即table每行&quot;ne&quot;位置</span><br><span class="line">  ; 人均收入</span><br><span class="line">  mov ax,es:[5]         ; es:[5]即收入低4位</span><br><span class="line">  mov dx,es:[7]         ; es:[7]即收入高4位</span><br><span class="line">  div word ptr es:[10]  ; es:[10]即雇员人数</span><br><span class="line">  mov es:[13],ax        ; es:[13]即table每行&quot;??&quot;位置</span><br><span class="line">  </span><br><span class="line">  add bx,2</span><br><span class="line">  mov ax,es</span><br><span class="line">  inc ax</span><br><span class="line">  mov es,ax</span><br><span class="line">loop s2</span><br></pre></td></tr></table></figure><br>最后退出:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br></pre></td></tr></table></figure><br>完整的程序如下:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">; code.asm</span><br><span class="line">assume cs:code,ds:data,ss:stack</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">    db &#x27;1975&#x27;,&#x27;1976&#x27;,&#x27;1977&#x27;,&#x27;1978&#x27;,&#x27;1979&#x27;,&#x27;1980&#x27;,&#x27;1981&#x27;,&#x27;1982&#x27;,&#x27;1983&#x27;</span><br><span class="line">    db &#x27;1984&#x27;,&#x27;1985&#x27;,&#x27;1986&#x27;,&#x27;1987&#x27;,&#x27;1988&#x27;,&#x27;1989&#x27;,&#x27;1990&#x27;,&#x27;1991&#x27;,&#x27;1992&#x27;</span><br><span class="line">    db &#x27;1993&#x27;,&#x27;1994&#x27;,&#x27;1995&#x27;</span><br><span class="line">    ;The above is 21 strings representing 21 years</span><br><span class="line"></span><br><span class="line">    dd 16,22,382,1356,2390,8000,16000,24486,50065,97479,140417,197514</span><br><span class="line">    dd 345980,590827,803530,1183000,1843000,2759000,3753000,4649000,5937000</span><br><span class="line">    ;The above is 21 dwords representing the incomes of 21 years</span><br><span class="line"></span><br><span class="line">    dw 3,7,9,13,28,38,130,220,476,778,1001,1442,2258,2793,4037,5635,8226</span><br><span class="line">    dw 11542,14430,15257,17800</span><br><span class="line">    ;The above is 21 words representing the numbers of employees</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">table segment</span><br><span class="line">    db 21 dup (&#x27;year sums em ?? &#x27;)</span><br><span class="line">    ; Create 336 bytes to save the table</span><br><span class="line">table ends</span><br><span class="line"></span><br><span class="line">stack segment</span><br><span class="line">    dw 8 dup (0)</span><br><span class="line">    ; Create a stack to temporarily save CX</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">    ; Segment Register init</span><br><span class="line">    mov ax,data</span><br><span class="line">    mov ds,ax</span><br><span class="line"></span><br><span class="line">    mov ax,table</span><br><span class="line">    mov es,ax</span><br><span class="line"></span><br><span class="line">    mov ax,stack</span><br><span class="line">    mov ss,ax</span><br><span class="line">    mov sp,16</span><br><span class="line"></span><br><span class="line">    ; Years and Incomes(4B)</span><br><span class="line">    mov bx,0</span><br><span class="line">    mov cx,21</span><br><span class="line">    s0:</span><br><span class="line">      push cx</span><br><span class="line">      mov si,0</span><br><span class="line">      mov cx,4</span><br><span class="line">      s1:</span><br><span class="line">         ; Years</span><br><span class="line">         mov al,ds:[bx+si]</span><br><span class="line">         mov es:[si],al</span><br><span class="line">         ; Incomes</span><br><span class="line">         mov al,ds:[bx+si+54h]</span><br><span class="line">         mov es:[si+5],al</span><br><span class="line">         inc si</span><br><span class="line">      loop s1</span><br><span class="line">      add bx,4</span><br><span class="line">      pop cx</span><br><span class="line">      mov ax,es</span><br><span class="line">      inc ax</span><br><span class="line">      mov es,ax</span><br><span class="line">    loop s0</span><br><span class="line"></span><br><span class="line">    ; Employees and PCI(2B)</span><br><span class="line">    mov ax,table</span><br><span class="line">    mov es,ax</span><br><span class="line">    mov bx,0</span><br><span class="line">    mov cx,21</span><br><span class="line">    s2:</span><br><span class="line">      ; Emplyees</span><br><span class="line">      mov ax,ds:[bx+0a8h]</span><br><span class="line">      mov es:[10],ax</span><br><span class="line">      ; PCI</span><br><span class="line">      mov ax,es:[5]</span><br><span class="line">      mov dx,es:[7]</span><br><span class="line">      div word ptr es:[10]</span><br><span class="line">      mov es:[13],ax</span><br><span class="line">      </span><br><span class="line">      add bx,2</span><br><span class="line">      mov ax,es</span><br><span class="line">      inc ax</span><br><span class="line">      mov es,ax</span><br><span class="line">    loop s2</span><br><span class="line"></span><br><span class="line">    ; Termination</span><br><span class="line">    mov ax,4c00h</span><br><span class="line">    int 21h</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure></p><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p>编译、链接，生成<code>code.exe</code>:<br><img src="assemble.png" alt="编译" title="编译"><br>运行结果如图所示:<br><img src="table.png" alt="table" title="运行结果"><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0778:0000 31 39 37 35 20 10 00 00-00 20 03 00 20 05 00 20 1975 .... .. ..</span><br></pre></td></tr></table></figure><br>可以看到，<code>0H-3H</code>为<code>31 39 37 35</code>即年份<code>1975</code>；第4、9、12、15个字节为<code>20</code>，即空格的ASCII编码；<code>5H-8H</code>为收入<code>10</code>(16)；<code>10H-11H</code>为雇员人数<code>03</code>(3)；<code>13H-14H</code>为人均收入(即收入与雇员人数的商向0舍入的结果)<code>05</code>(5)；<br>同理，各行数据的输出都是正确的；<br><strong>项目完成</strong></p>]]></content>
    
    
    <summary type="html">多种寻址方式在结构化数据访问中的综合应用</summary>
    
    
    
    <category term="zh-CN" scheme="https://hiedanoajuu.github.io/categories/zh-CN/"/>
    
    <category term="计算机" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="汇编语言" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Masm" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/Masm/"/>
    
    
    <category term="数据结构" scheme="https://hiedanoajuu.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="计算机" scheme="https://hiedanoajuu.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="编程语言" scheme="https://hiedanoajuu.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>埃及地图</title>
    <link href="https://hiedanoajuu.github.io/2025/01/11/egypt-maps/"/>
    <id>https://hiedanoajuu.github.io/2025/01/11/egypt-maps/</id>
    <published>2025-01-10T17:47:24.000Z</published>
    <updated>2025-07-30T05:24:41.039Z</updated>
    
    <content type="html"><![CDATA[<h1 id="下埃及"><a href="#下埃及" class="headerlink" title="下埃及"></a>下埃及</h1><p><img src="lower_egypt.gif" alt="下埃及" title="下埃及"></p><ul><li><strong>阿布西尔</strong>(Abusir，阿拉伯语:ابو صير):古埃及称<strong>佩尔-奥西里斯</strong>(pr wsjr)，阿布西尔纸草发现地；</li><li><strong>亚历山大里亚</strong>(Alexandria，希腊语:Ἀλεξάνδρεια，以「大帝」亚历山大三世命名):古埃及称<strong>拉科提斯</strong>(r-ꜥ-qd(y)t)，守护神为塞拉匹斯(埃及神祇阿皮斯与希腊神祇的融合神)，托勒密王朝(第31王朝)首都；</li><li><strong>阿马尔那</strong>(Amarna，阿拉伯语:العمارنة):古埃及称<strong>埃赫塔吞</strong>(Akhetaten)，意为“阿吞地平线”，守护神为阿吞，第18王朝阿马尔那时期首都；</li><li><strong>阿特里比斯</strong>(Athribis，希腊语:Ἄθριβις):古埃及称<strong>赫瓦特-塔-赫里-吉布</strong>(Ḥw.t-tꜣ-ḥry-jb)，守护神为雷皮特，黑牛诺姆(第10诺姆)首府；</li><li><strong>阿瓦里斯</strong>(Avaris，希腊语:Αὔαρις):古埃及称<strong>胡特-瓦雷特</strong>(ḥw.t wꜥr.t)，守护神为塞特，第14、15王朝首都；</li><li><strong>贝尼·哈桑</strong>(Beni Hassan，阿拉伯语:بني حسن):墓地；</li><li><strong>布巴斯提斯</strong>(Bubastis，希腊语:Βούβαστις):古埃及称<strong>佩尔-贝斯特</strong>(Pr-Bȝst.t)，意为贝斯特(猫女神)的神庙，守护神为贝斯特，第22王朝首都，南方王子诺姆(第18诺姆)首府；</li><li><strong>布西里斯</strong>(Busiris，希腊语:Βούσιρις):古埃及称<strong>杰杜</strong>(ḏdw)，守护神为奥西里斯，安杰提神诺姆(第9诺姆)首府；</li><li><strong>布陀</strong>(Buto，希腊语:Βοῦτος):古埃及称<strong>佩尔-瓦吉特</strong>(pr-wꜣḏyt)，意为瓦吉特(下埃及守护神)神庙，守护神为瓦吉特；</li><li><strong>开罗</strong>(Cairo，阿拉伯语:القاهرة):现代埃及首都；</li><li><strong>代赫舒尔</strong>(Dahshur，阿拉伯语:دهشور):代赫舒尔金字塔所在地；</li><li><strong>三角洲</strong>(Delta):<strong>尼罗河三角洲</strong>；</li><li><strong>埃尔-希巴</strong>(el-Hiba，阿拉伯语:الحيبة):古埃及称<strong>塔尤-贾耶特</strong>(t3yw-ḏ3yt)，南方王子诺姆(第18诺姆)首府；</li><li><strong>法尤姆</strong>(Faiyum，阿拉伯语:الفيوم):<strong>法尤姆绿洲</strong>，古埃及称<strong>沙德特</strong>(šd t)；</li><li><strong>吉萨</strong>(Giza，阿拉伯语(埃及):الجيزة):古埃及称<strong>提佩尔西斯</strong>(ϯⲡⲉⲣⲥⲓⲥ)，吉萨大金字塔所在地；</li><li><strong>赫利奥波利斯</strong>(Heliopolis，希腊语:Ἡλιούπολις，意为“日城”):古埃及称<strong>尤努</strong>(jwnw)，意为“柱子”，守护神为拉，繁荣权杖诺姆(第13诺姆)首府；</li><li><strong>赫拉克里奥波利斯</strong>(Heracleopolis，希腊语:Ἡρακλέους πόλις):古埃及称<strong>赫南-奈苏特</strong>(nn nswt)，守护神为赫里沙夫，第9、10王朝首都，索普杜-羽隼诺姆(第20诺姆)首府；</li><li><strong>赫耳墨波利斯</strong>(Hermopolis，希腊语:Ἑρμούπολις):古埃及称<strong>赫姆努</strong>(ḫmnw)，意为“八”，守护神为托特和八元神，哈雷斯诺姆(第15诺姆)首府;</li><li><strong>拉罕</strong>(Lahun，阿拉伯语:اللاهون):古埃及称<strong>拉-赫内特</strong>(rꜣ-ḥn.t)，意为“运河口”；</li><li><strong>莱昂托波利斯</strong>(Leontopolis，希腊语:Λεόντων πόλις，意为“狮城”):古埃及称<strong>塔雷穆</strong>(Taremu)，意为“鱼之地”，守护神为贝斯特和塞赫麦特，第23王朝首都，海塞布公牛诺姆(第11诺姆)首府；</li><li><strong>利什特</strong>(Lisht，阿拉伯语:اللشت):古埃及称<strong>伊特-塔维</strong>(Itj-tawy)，意为“一统两土地”，第12、13王朝首都；</li><li><strong>下埃及</strong>(Lower Egypt):<strong>尼罗河下游及三角洲的埃及土地</strong>，古埃及称<strong>塔-梅胡</strong>(tꜣ mḥw)，意为“北方”；</li><li><strong>孟斐斯</strong>(Memphis，希腊语:Μέμφις):古埃及称<strong>孟斐</strong>(mn nfr)，意为“永久而美丽”，守护神为普塔，第3、4、5、6、7、8、25(库施)、27(波斯)、31(波斯)王朝首都，白墙诺姆(第1诺姆)首府；</li><li><strong>美杜姆</strong>(Meydum，古埃及语:Mr(y)-Jtmw，意为“阿图姆(黄昏的太阳神)眷恋”):美杜姆金字塔所在地；</li><li><strong>门德斯</strong>(Mendes，希腊语:Μένδης):古埃及称<strong>杰德特</strong>(ḏd.t)，守护神为巴内布杰德特，第29王朝首都，鱼诺姆(第16诺姆)首府；</li><li><strong>瑙克拉提斯</strong>(Naucratis，希腊语:Ναύκρατις，意为“海军指挥部”):古埃及称<strong>尼沃特-卡尔特</strong>(Njwt-kꜣrṯ)或<strong>佩尔-梅里特</strong>(pr-mryt)，守护神为托特，古希腊佣兵在埃及的聚集地与殖民地；</li><li><strong>罗塞塔</strong>(Rosetta):罗塞塔石碑出土地，碑文见<a href="https://hiedanoajuu.github.io/2024/06/20/rosetta-stone-translation-greek">我之前的翻译</a>；</li><li><strong>萨卡拉</strong>(Saqqara，阿拉伯语:سقارة):萨卡拉王墓所在地；</li><li><strong>塞本尼托斯</strong>(Sebennytos，希腊语:Σεβέννυτος):古埃及称<strong>圣牛之城</strong>(ṯb-(n)-nṯr)，守护神为安胡尔，第30王朝首都，犊与母牛诺姆(第12诺姆)首府；</li><li><strong>塔尼斯</strong>(Tanis，希腊语:Τάνις):古埃及称<strong>贾奈特</strong>(ḏꜥn.t)，守护神为阿蒙，第21王朝首都，北方王子诺姆(第19诺姆首府)；</li></ul><h1 id="上埃及"><a href="#上埃及" class="headerlink" title="上埃及"></a>上埃及</h1><p><img src="central_egypt.gif" alt="上埃及" title="上埃及"></p><ul><li><strong>第一瀑布</strong>(1st Cataract):<strong>尼罗河第一瀑布</strong>；</li><li><strong>阿拜多斯</strong>(Abydos，阿拉伯语:أبيدوس):古埃及称<strong>阿卜杜</strong>(ꜣbḏw)，守护神为赫恩提阿门图，奥西里斯和伊西斯，大地诺姆(第8诺姆)首府；</li><li><strong>贝特·埃尔-瓦利</strong>(Beit el Wali):埃及神庙，修建于拉美西斯二世时期；</li><li><strong>科普托斯</strong>(Coptos，希腊语:Κόπτος):古埃及称<strong>盖布图</strong>(gbtjw)，守护神为敏，双隼诺姆(第5诺姆首府)，上埃及红海跨哈马马特干谷贸易商业中心；</li><li><strong>丹德拉</strong>(Dendera，阿拉伯语:دَنْدَرة):古埃及称<strong>尤内特</strong>(jwnt)，守护神为哈托尔，鳄鱼诺姆(第6诺姆)首府；</li><li><strong>埃德富</strong>(Edfu，阿拉伯语:إدفو):古埃及称<strong>贝赫德特</strong>(bḥdt)，守护神为荷鲁斯，荷鲁斯王座诺姆(第2诺姆)首府；</li><li><strong>象岛</strong>(Elephantine，希腊语:Ἐλεφαντίνη):古埃及称<strong>阿布</strong>(ꜣbw)，守护神为克奴姆，弓诺姆(第1诺姆)首府；</li><li><strong>埃尔-卡布</strong>(el-Kab，阿拉伯语:الكاب):古埃及称<strong>奈赫布</strong>(nḫb(t))，守护神为奈赫贝特，在奈赫恩之前作为神殿诺姆(第3诺姆)首府，被巨大的泥砖墙环绕；</li><li><strong>伊斯纳</strong>(Esna,阿拉伯语:إسنا):古埃及称<strong>塔-塞内特</strong>(tꜣ-snt)，守护神为克奴姆，在奈赫恩之后成为神殿诺姆(第3诺姆)首府；</li><li><strong>盖贝莱因</strong>(Gebelein，阿拉伯语:الجبلين):古埃及称<strong>佩尔-哈托尔</strong>(pr ḥwt-ḥr)，守护神为哈托尔；</li><li><strong>吉贝尔·埃尔-西尔西拉</strong>(Gebel el-Silsila，阿拉伯语:جبل السلسلة):古埃及称<strong>赫努</strong>(ẖny)；</li><li><strong>杰尔夫·侯赛因</strong>(Gerf Hussein):古埃及称<strong>佩尔-普塔</strong>(Per-Ptah)，有一座普塔神庙；</li><li><strong>希拉孔波利斯</strong>(Hierakonpolis，希腊语:Ἱεράκων πόλις，意为“隼鹰之城”):古埃及称<strong>奈赫恩</strong>(nḫn)，守护神为荷鲁斯，在奈赫布之后成为神殿诺姆(第3诺姆)首府，在奈赫布的尼罗河正对岸；</li><li><strong>涅伽达</strong>(Naqada，阿拉伯语:نقادة):古埃及称<strong>努布特</strong>(Nbyt)，守护神为塞特，前王朝涅伽达文化发现地；</li><li><strong>斐莱</strong>(Philae，希腊语:Φιλαί):古埃及称<strong>帕-尤-尔克</strong>(p3-jw-rķ’)尼罗河上的一个岛，其上有伊西斯神庙；</li><li><strong>塞赫尔岛</strong>(Sehel Island，希腊语:Σῆτις):古埃及称<strong>塞泰特</strong>(sṯt(t))；</li><li><strong>底比斯</strong>(Thebes，阿拉伯语:طيبة):古埃及称<strong>瓦塞特</strong>(wꜣs.t)，守护神为阿蒙，权杖诺姆(第4诺姆)首府，第11、16、17、18、19、25王朝首都；</li><li><strong>托德</strong>(Tod，阿拉伯语:طود):古埃及称<strong>杰尔提</strong>(Ḏrty)，守护神为孟图；</li><li><strong>哈马马特干谷</strong>(Wadi Hammamat，阿拉伯语:وادي الحمامات):上埃及的一条干谷；</li></ul><h1 id="西奈"><a href="#西奈" class="headerlink" title="西奈"></a>西奈</h1><p><img src="sinai.gif" alt="西奈" title="西奈"></p><ul><li><strong>贝鲁西亚</strong>(Pelusium，科普特语:Ⲡⲉⲣⲉⲙⲟⲩⲛ):古埃及称<strong>佩尔-阿蒙</strong>(pr-jmn)，守护神为阿蒙，埃及最东部的主要城市；</li><li><strong>红海</strong>(Red Sea):南起曼德海峡，北至苏伊士运河的一片狭长的、较为封闭的海域；</li><li><strong>塞拉比特·埃尔-哈迪姆</strong>(Serabit el-Khadim，阿拉伯语:سرابيط الخادم):古埃及考古发掘点，发现了几座采矿营地和一座哈托尔神庙；</li><li><strong>西奈</strong>(Sinai，阿拉伯语:سِينَاء):古埃及称<strong>比阿乌</strong>(bjꜣw)，意为“矿产之国”，埃及的一座半岛；</li><li><strong>提姆纳</strong>(Timna，希伯来语:תִּמְנָע):以色列南部的一条河谷；</li><li><strong>马格哈拉干谷</strong>(Wadi Maghara):古埃及称<strong>孟法卡</strong>(mfkꜣ)，意为“绿松石镇”，西奈半岛上的一座干谷；</li></ul><h1 id="努比亚"><a href="#努比亚" class="headerlink" title="努比亚"></a>努比亚</h1><p><img src="southern_egypt.gif" alt="努比亚" title="努比亚"></p><ul><li><strong>第二瀑布</strong>(2nd Cataract):<strong>尼罗河第二瀑布</strong>；</li><li><strong>第三瀑布</strong>(3nd Cataract):<strong>尼罗河第三瀑布</strong>；</li><li><strong>阿布辛贝勒</strong>(Abu Simbel，阿拉伯语:أبو سمبل):两座岩雕神殿遗迹；</li><li><strong>阿马达</strong>(Amada):神庙遗迹；</li><li><strong>阿马拉</strong>(Amara):库施总督所在地；</li><li><strong>阿尼巴</strong>(Aniba):努比亚村庄；</li><li><strong>布亨</strong>(Buhen，古埃及语:b(w)hn):努比亚最大的要塞城镇，有一座铜厂；</li><li><strong>德尔</strong>(Derr):神庙遗迹；</li><li><strong>下努比亚</strong>(Lower Nubia):亦称<strong>瓦瓦特</strong>(Wawat)，努比亚北部；</li><li><strong>塞姆纳</strong>(Semna):古埃及在努比亚的要塞区；</li><li><strong>索雷布</strong>(Soleb):神庙遗迹；</li><li><strong>上努比亚</strong>(Upper Nubia):努比亚南部；</li></ul>]]></content>
    
    
    <summary type="html">埃及地图，来自http://www.mnsu.edu/emuseum/prehistory/egypt/maps/mainmap.html</summary>
    
    
    
    <category term="zh-CN" scheme="https://hiedanoajuu.github.io/categories/zh-CN/"/>
    
    <category term="历史" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E5%8E%86%E5%8F%B2/"/>
    
    <category term="古代史" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E5%8E%86%E5%8F%B2/%E5%8F%A4%E4%BB%A3%E5%8F%B2/"/>
    
    <category term="埃及" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E5%8E%86%E5%8F%B2/%E5%8F%A4%E4%BB%A3%E5%8F%B2/%E5%9F%83%E5%8F%8A/"/>
    
    <category term="0 杂项" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E5%8E%86%E5%8F%B2/%E5%8F%A4%E4%BB%A3%E5%8F%B2/%E5%9F%83%E5%8F%8A/0-%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="渣翻" scheme="https://hiedanoajuu.github.io/tags/%E6%B8%A3%E7%BF%BB/"/>
    
    <category term="图表" scheme="https://hiedanoajuu.github.io/tags/%E5%9B%BE%E8%A1%A8/"/>
    
    <category term="埃及" scheme="https://hiedanoajuu.github.io/tags/%E5%9F%83%E5%8F%8A/"/>
    
  </entry>
  
  <entry>
    <title>平假名寻根——草书书法中的“平假名”</title>
    <link href="https://hiedanoajuu.github.io/2024/08/10/hiragana-in-chinese/"/>
    <id>https://hiedanoajuu.github.io/2024/08/10/hiragana-in-chinese/</id>
    <published>2024-08-10T12:27:00.000Z</published>
    <updated>2025-07-30T05:25:34.217Z</updated>
    
    <content type="html"><![CDATA[<p>平假名想必各位都很熟悉了。平假名是日语使用的一种表音文字，最初是为了写物语与和歌而用。平假名来源于汉字的草书，那么在汉字草书书法作品中，或许就能找到日语平假名的源头吧。下面我们就来看看一些日语片假名的来源。虽说有部分平假名与汉字之间的联系过于抽象，但基本上都还是能在书法作品中找到原型的。</p><h1 id="あ行"><a href="#あ行" class="headerlink" title="あ行"></a>あ行</h1><h2 id="あ"><a href="#あ" class="headerlink" title="あ"></a>あ</h2><p><img src="a.jpg" alt="あ" title="あ"></p><center>[晋]王羲之 《上虞帖》 “安”</center><h2 id="い"><a href="#い" class="headerlink" title="い"></a>い</h2><p><img src="i.jpg" alt="い" title="い"></p><center>[唐]李世民 《淳化阁唐太宗帖》 “以”</center><h2 id="う"><a href="#う" class="headerlink" title="う"></a>う</h2><p><img src="u.jpg" alt="う" title="う"></p><center>[唐]怀素 《草书千字文》 “宇”</center><h2 id="え"><a href="#え" class="headerlink" title="え"></a>え</h2><p><img src="e.jpg" alt="え" title="え"></p><center>[宋]黄庭坚 《廉颇蔺相如列传》 “衣”</center><h2 id="お"><a href="#お" class="headerlink" title="お"></a>お</h2><p><img src="o.jpg" alt="お" title="お"></p><center>[唐]张旭 《李青莲序》 “於(于)”</center><h1 id="か行"><a href="#か行" class="headerlink" title="か行"></a>か行</h1><h2 id="か"><a href="#か" class="headerlink" title="か"></a>か</h2><p><img src="ka.jpg" alt="か" title="か"></p><center>[宋]文天祥 《谢昌元座右自警辞》 “加”</center><h2 id="き"><a href="#き" class="headerlink" title="き"></a>き</h2><p><img src="ki.jpg" alt="き" title="き"></p><center>[唐]张旭 《李青莲序》 “幾(几)”</center><h2 id="く"><a href="#く" class="headerlink" title="く"></a>く</h2><p><img src="ku.jpg" alt="く" title="く"></p><center>[晋]王羲之 《知宝帖》 “久”</center><h2 id="け"><a href="#け" class="headerlink" title="け"></a>け</h2><p><img src="ke.jpg" alt="け" title="け"></p><center>[晋]王羲之 《一朝帖》 “計(计)”</center><h2 id="こ"><a href="#こ" class="headerlink" title="こ"></a>こ</h2><p><img src="ko.jpg" alt="こ" title="こ"></p><center>[宋]文天祥 《谢昌元座右自警辞》 “己”</center><h1 id="さ行"><a href="#さ行" class="headerlink" title="さ行"></a>さ行</h1><h2 id="さ"><a href="#さ" class="headerlink" title="さ"></a>さ</h2><p><img src="sa.jpg" alt="さ" title="さ"></p><center>[晋]王献之 《近与铁石帖》 “左”</center><h2 id="し"><a href="#し" class="headerlink" title="し"></a>し</h2><p><img src="si.jpg" alt="し" title="し"></p><center>[晋]王羲之 《其书帖》 “之”</center><h2 id="す"><a href="#す" class="headerlink" title="す"></a>す</h2><p><img src="su.jpg" alt="す" title="す"></p><center>[明]王铎 《自作诗十首》 “寸”</center><h2 id="せ"><a href="#せ" class="headerlink" title="せ"></a>せ</h2><p><img src="se.jpg" alt="せ" title="せ"></p><center>[唐]怀素 《圣母帖》 “世”</center><h2 id="そ"><a href="#そ" class="headerlink" title="そ"></a>そ</h2><p><img src="so.jpg" alt="そ" title="そ"></p><center>[唐]怀素 《自叙帖》 “曽(曾)”</center><h1 id="た行"><a href="#た行" class="headerlink" title="た行"></a>た行</h1><h2 id="た"><a href="#た" class="headerlink" title="た"></a>た</h2><p><img src="ta.jpg" alt="た" title="た"></p><center>[唐]张旭 《李青莲序》 “太”</center><h2 id="ち"><a href="#ち" class="headerlink" title="ち"></a>ち</h2><p><img src="chi.jpg" alt="ち" title="ち"></p><center>[晋]王羲之 《中郎帖》 “知”</center><h2 id="つ"><a href="#つ" class="headerlink" title="つ"></a>つ</h2><p><img src="tsu.jpg" alt="つ" title="つ"></p><center>[明]宋客 《进学解》 “川”</center><h2 id="て"><a href="#て" class="headerlink" title="て"></a>て</h2><p><img src="te.jpg" alt="て" title="て"></p><center>[唐]张旭 《李青莲序》 “天”</center><h2 id="と"><a href="#と" class="headerlink" title="と"></a>と</h2><p><img src="so.jpg" alt="と" title="と"></p><center>[唐]怀素 《四十二章经》 “止”</center><h1 id="な行"><a href="#な行" class="headerlink" title="な行"></a>な行</h1><h2 id="な"><a href="#な" class="headerlink" title="な"></a>な</h2><p><img src="na.jpg" alt="な" title="な"></p><center>[晋]谢安 《中郎帖》 “奈”</center><h2 id="に"><a href="#に" class="headerlink" title="に"></a>に</h2><p><img src="ni.jpg" alt="に" title="に"></p><center>[晋]王献之 《玄度帖》 “仁”</center><h2 id="ぬ"><a href="#ぬ" class="headerlink" title="ぬ"></a>ぬ</h2><p><img src="nu.jpg" alt="ぬ" title="ぬ"></p><center>[晋]王羲之 《大佳忧卿帖》 “奴”</center><h2 id="ね"><a href="#ね" class="headerlink" title="ね"></a>ね</h2><p><img src="ne.png" alt="ね" title="ね"></p><center>毛泽东 “祢”</center><h2 id="の"><a href="#の" class="headerlink" title="の"></a>の</h2><p><img src="no.jpg" alt="の" title="の"></p><center>[唐]怀素 《四十二章经》 “乃”</center><h1 id="は行"><a href="#は行" class="headerlink" title="は行"></a>は行</h1><h2 id="は"><a href="#は" class="headerlink" title="は"></a>は</h2><p><img src="ha.jpg" alt="は" title="は"></p><center>[明]文徵明 《早朝诗》 “波”</center><h2 id="ひ"><a href="#ひ" class="headerlink" title="ひ"></a>ひ</h2><p><img src="hi.jpg" alt="ひ" title="ひ"></p><center>[唐]孙过庭 《景福殿赋》 “比”</center><h2 id="ふ"><a href="#ふ" class="headerlink" title="ふ"></a>ふ</h2><p><img src="fu.jpg" alt="ふ" title="ふ"></p><center>[汉]张芝 《冠军帖》 “不”</center><h2 id="へ"><a href="#へ" class="headerlink" title="へ"></a>へ</h2><p><img src="he.jpg" alt="へ" title="へ"></p><center>[唐]怀素 《自叙帖》 “部”</center><h2 id="ほ"><a href="#ほ" class="headerlink" title="ほ"></a>ほ</h2><p><img src="ho.jpg" alt="ほ" title="ほ"></p><center>[晋]王羲之 《龙保帖》 “保”</center><h1 id="ま行"><a href="#ま行" class="headerlink" title="ま行"></a>ま行</h1><h2 id="ま"><a href="#ま" class="headerlink" title="ま"></a>ま</h2><p><img src="ma.jpg" alt="ま" title="ま"></p><center>[晋]王羲之 《上虞帖》 “末”</center><h2 id="み"><a href="#み" class="headerlink" title="み"></a>み</h2><p><img src="mi.jpg" alt="み" title="み"></p><center>[明]陈道复 《古诗十九首》 “美”</center><h2 id="む"><a href="#む" class="headerlink" title="む"></a>む</h2><p><img src="mu.jpg" alt="む" title="む"></p><center>[唐]怀素 《草书千字文》 “武”</center><h2 id="め"><a href="#め" class="headerlink" title="め"></a>め</h2><p><img src="me.jpg" alt="め" title="め"></p><center>[晋]王羲之 《中郎女帖》 “女”</center><h2 id="も"><a href="#も" class="headerlink" title="も"></a>も</h2><p><img src="mo.jpg" alt="も" title="も"></p><center>[明]王铎 《今夕行村外》 “毛”</center><h1 id="や行"><a href="#や行" class="headerlink" title="や行"></a>や行</h1><h2 id="や"><a href="#や" class="headerlink" title="や"></a>や</h2><p><img src="ya.jpg" alt="や" title="や"></p><center>[晋]王献之 《省前书帖》 “也”</center><h2 id="ゆ"><a href="#ゆ" class="headerlink" title="ゆ"></a>ゆ</h2><p><img src="yu.jpg" alt="ゆ" title="ゆ"></p><center>[唐]孙过庭 《书谱》 “由”</center><h2 id="𛀁"><a href="#𛀁" class="headerlink" title="𛀁"></a>𛀁</h2><p><img src="ye.jpg" alt="𛀁" title="𛀁"></p><center>[唐]怀素 《秋兴八首》 “江”</center><h2 id="よ"><a href="#よ" class="headerlink" title="よ"></a>よ</h2><p><img src="yo.jpg" alt="よ" title="よ"></p><center>[元]康里巎巎 《致彦中尺牍》 “与”</center><h1 id="ら行"><a href="#ら行" class="headerlink" title="ら行"></a>ら行</h1><h2 id="ら"><a href="#ら" class="headerlink" title="ら"></a>ら</h2><p><img src="ra.jpg" alt="ら" title="ら"></p><center>[唐]怀素 《大草千字文》 “良”</center><h2 id="り"><a href="#り" class="headerlink" title="り"></a>り</h2><p><img src="ri.jpg" alt="り" title="り"></p><center>[唐]孙过庭 《书谱》 “利”</center><h2 id="る"><a href="#る" class="headerlink" title="る"></a>る</h2><p><img src="ru.jpg" alt="る" title="る"></p><center>[唐]孙过庭 《书谱》 “留”</center><h2 id="れ"><a href="#れ" class="headerlink" title="れ"></a>れ</h2><p><img src="re.jpg" alt="れ" title="れ"></p><center>[唐]怀素 《自叙帖》 “礼”</center><h2 id="ろ"><a href="#ろ" class="headerlink" title="ろ"></a>ろ</h2><p><img src="ro.jpg" alt="ろ" title="ろ"></p><center>[元]邓文原 《书谱》 “呂(吕)”</center><h1 id="わ行"><a href="#わ行" class="headerlink" title="わ行"></a>わ行</h1><h2 id="わ"><a href="#わ" class="headerlink" title="わ"></a>わ</h2><p><img src="wa.jpg" alt="わ" title="わ"></p><center>[晋]王献之 《奉别贴》 “和”</center><h2 id="ゐ"><a href="#ゐ" class="headerlink" title="ゐ"></a>ゐ</h2><p><img src="wi.jpg" alt="ゐ" title="ゐ"></p><center>[汉]蔡琰 《胡笳帖》 “爲(为)”</center><h2 id="ゑ"><a href="#ゑ" class="headerlink" title="ゑ"></a>ゑ</h2><p><img src="we.jpg" alt="ゑ" title="ゑ"></p><center>[元]邓文原 《急就章》 “恵(惠)”</center><h2 id="を"><a href="#を" class="headerlink" title="を"></a>を</h2><p><img src="wo.jpg" alt="を" title="を"></p><center>[唐]怀素 《自叙帖》 “遠(远)”</center><h1 id="ん"><a href="#ん" class="headerlink" title="ん"></a>ん</h1><p><img src="n.jpg" alt="ん" title="ん"></p><center>[明]王铎 《临唐太宗帖》 “無(无)”</center><h1 id="一些统计"><a href="#一些统计" class="headerlink" title="一些统计"></a>一些统计</h1>    <div id="echarts34" style="width: 85%;height: 400px;margin: 0 auto"></div>    <script src="https://cdn.jsdelivr.net/npm/echarts@4.9.0/dist/echarts.min.js"></script>    <script type="text/javascript">            // 基于准备好的dom，初始化echarts实例            var myChart = echarts.init(document.getElementById('echarts34'));            // 指定图表的配置项和数据            var option = {    title: {        text: '书法家贡献统计图(三次以上)'    },    tooltip: {},    legend: {        data:['贡献']    },    xAxis: {        data: ["怀素","王羲之","孙过庭","王献之","张旭","王铎"]    },    yAxis: {},    series: [{        name: '贡献',        type: 'bar',        data: [11, 9, 4, 4, 4, 3]    }]};            // 使用刚指定的配置项和数据显示图表。            myChart.setOption(option);    </script>        <div id="echarts2010" style="width: 85%;height: 400px;margin: 0 auto"></div>    <script src="https://cdn.jsdelivr.net/npm/echarts@4.9.0/dist/echarts.min.js"></script>    <script type="text/javascript">            // 基于准备好的dom，初始化echarts实例            var myChart = echarts.init(document.getElementById('echarts2010'));            // 指定图表的配置项和数据            var option = {    title: {        text: '朝代变化统计图'    },    tooltip: {},    legend: {        data:['贡献']    },    xAxis: {        data: ["汉","晋","唐","宋","元","明","清及以后"]    },    yAxis: {},    series: [{        name: '贡献',        type: 'line',        data: [2, 14, 20, 3, 3, 6, 1]    }]};            // 使用刚指定的配置项和数据显示图表。            myChart.setOption(option);    </script>    <h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>平假名作为日语重要的表音符号，有着深远的历史。平假名由汉字的草书演变而来，从中我们便能一窥古代中日文化交流的情况。</p>]]></content>
    
    
    <summary type="html">寻找汉字草书书法中的“平假名”</summary>
    
    
    
    <category term="zh-CN" scheme="https://hiedanoajuu.github.io/categories/zh-CN/"/>
    
    <category term="杂项" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="书法" scheme="https://hiedanoajuu.github.io/tags/%E4%B9%A6%E6%B3%95/"/>
    
    <category term="文化" scheme="https://hiedanoajuu.github.io/tags/%E6%96%87%E5%8C%96/"/>
    
    <category term="日本" scheme="https://hiedanoajuu.github.io/tags/%E6%97%A5%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>博丽神社及大结界管理委员会 人类村落居民委员会讣告 稗田阿求同志逝世</title>
    <link href="https://hiedanoajuu.github.io/2024/08/07/akyuu/"/>
    <id>https://hiedanoajuu.github.io/2024/08/07/akyuu/</id>
    <published>2024-08-07T00:00:00.000Z</published>
    <updated>2025-07-30T05:23:41.158Z</updated>
    
    <content type="html"><![CDATA[<p><img src="akyuu.jpg" alt="稗田阿求同志遗像" title="稗田阿求同志遗像"></p><center>稗田阿求同志遗像</center><center>稗田阿求同志の遺影</center><center>稗田阿求同志ノ遺影</center><p><strong>《文文。新闻》编辑部幻想乡8月7日电</strong>  博丽神社及大结界管理委员会、人类村落居民委员会沉痛宣告：人类村落名门「稗田家」当家，第九代”御阿礼之子”，杰出的史学家、作家，幻想乡优秀教师，「幻想乡的记忆」稗田阿求 同志，因突发心脏病，经全力抢救无效，于2024年8月7日(第百卅九季文月之一 周三)0时0分在稗田邸逝世，享年30岁。</p><p><strong>《文々。新聞》編集部幻想郷8月7日电</strong>　博麗神社と大結界管理委員会、人間の里住民委員会は沈痛な宣告をしました: 人間の里の名門「稗田家」当主、九代目《御阿礼の子》、優れた歴史家と作家、幻想郷の優秀な教師、《幻想郷の記憶》 稗田阿求同志は、突発性心臓病のため、全力で救助したが効果がなく、2024年8月7日（第百卅九季文月第一水曜日）0時0分に稗田坻で逝去した。享年30歳。</p><p><strong>《文々。新聞》編集部幻想郷8月7日电</strong>  博麗神社ト大結界管理委員会、人間ノ里住民委員会、沈痛ニ宣告ス：人間ノ里ノ名门「稗田家」当主、九代目《御阿礼ノ子》、傑出ノ史家ト作家、幻想郷ノ優秀教師、《幻想郷ノ記憶》　稗田阿求同志、心痛発シ、治療効ナク、百三十九季文月ノ第一水曜日ノ子正ニ稗田邸ニテ逝去ス。享年三十。</p>]]></content>
    
    
    <summary type="html">博麗神社と大結界管理委員会 人間の里住民委員会　稗田阿求同志逝去の訃報</summary>
    
    
    
    <category term="zh-CN" scheme="https://hiedanoajuu.github.io/categories/zh-CN/"/>
    
    <category term="东方Project" scheme="https://hiedanoajuu.github.io/categories/zh-CN/%E4%B8%9C%E6%96%B9Project/"/>
    
    
    <category term="东方Project" scheme="https://hiedanoajuu.github.io/tags/%E4%B8%9C%E6%96%B9Project/"/>
    
    <category term="新闻" scheme="https://hiedanoajuu.github.io/tags/%E6%96%B0%E9%97%BB/"/>
    
    <category term="恶搞" scheme="https://hiedanoajuu.github.io/tags/%E6%81%B6%E6%90%9E/"/>
    
  </entry>
  
</feed>
